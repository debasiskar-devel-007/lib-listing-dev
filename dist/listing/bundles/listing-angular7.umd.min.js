!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports,require("@angular/cdk/collections"),require("ngx-uploader"),require("ngx-cookie-service"),require("@angular/common/http"),require("@angular/animations"),require("moment"),require("rxjs"),require("@angular/material/snack-bar"),require("rxjs/operators"),require("@angular/cdk/a11y"),require("@angular/cdk/drag-drop"),require("@angular/cdk/portal"),require("@angular/cdk/scrolling"),require("@angular/cdk/stepper"),require("@angular/cdk/table"),require("@angular/cdk/tree"),require("@angular/material"),require("@angular/common"),require("ngx-moment"),require("@angular/router"),require("@angular/platform-browser"),require("ng2-ckeditor"),require("ngx-image-cropper"),require("ngx-material-timepicker"),require("@angular/forms"),require("@angular/core")):"function"==typeof define&&define.amd?define("listing-angular7",["exports","@angular/cdk/collections","ngx-uploader","ngx-cookie-service","@angular/common/http","@angular/animations","moment","rxjs","@angular/material/snack-bar","rxjs/operators","@angular/cdk/a11y","@angular/cdk/drag-drop","@angular/cdk/portal","@angular/cdk/scrolling","@angular/cdk/stepper","@angular/cdk/table","@angular/cdk/tree","@angular/material","@angular/common","ngx-moment","@angular/router","@angular/platform-browser","ng2-ckeditor","ngx-image-cropper","ngx-material-timepicker","@angular/forms","@angular/core"],a):a(e["listing-angular7"]={},e.ng.cdk.collections,e.ngxUploader,e.ngxCookieService,e.ng.common.http,e.ng.animations,e.momentImported,e.rxjs,e.ng.material["snack-bar"],e.rxjs.operators,e.ng.cdk.a11y,e.ng.cdk["drag-drop"],e.ng.cdk.portal,e.ng.cdk.scrolling,e.ng.cdk.stepper,e.ng.cdk.table,e.ng.cdk.tree,e.ng.material,e.ng.common,e.ngxMoment,e.ng.router,e.ng.platformBrowser,e.ng2Ckeditor,e.ngxImageCropper,e.ngxMaterialTimepicker,e.ng.forms,e.ng.core)}(this,function(exports,collections,ngxUploader,ngxCookieService,http,animations,momentImported,rxjs,snackBar,operators,a11y,dragDrop,portal,scrolling,stepper,table,tree,material,common,ngxMoment,router,platformBrowser,ng2Ckeditor,ngxImageCropper,ngxMaterialTimepicker,forms,i0){"use strict";var ListingService=(d.decorators=[{type:i0.Injectable,args:[{providedIn:"root"}]}],d.ctorParameters=function(){return[]},d.ngInjectableDef=i0.defineInjectable({factory:function(){return new d},token:d,providedIn:"root"}),d);function d(){}var ApiService=(f.prototype.onUploadOutput=function(a,e,n,t){if("allAddedToQueue"===a.type){var i={type:"uploadAll",url:"http://developmentapi.audiodeadline.com:7031/uploads",method:"POST",data:{path:t}};this.uploadInput.emit(i)}else if("addedToQueue"===a.type&&"undefined"!=typeof a.file)""!=a.file.response&&(this.files=[],this.files.push(a.file),console.log("this.files*********"),console.log(this.files),this.lengthis=this.files.length,this.percentageis=this.files[0].progress.data.percentage);else if("uploading"===a.type&&"undefined"!=typeof a.file){var l=this.files.findIndex(function(e){return"undefined"!=typeof a.file&&e.id===a.file.id});this.files[l]=a.file,this.lengthis=this.files.length,null!=this.files[0]&&null!=this.files[0].progress&&(this.percentageis=this.files[0].progress.data.percentage),console.log("this.files=================="),console.log(this.files)}else"removed"===a.type?this.files=this.files.filter(function(e){return e!==a.file}):"dragOver"===a.type?this.dragOver=!0:"dragOut"===a.type?this.dragOver=!1:"drop"===a.type&&(this.dragOver=!1);if(console.log("files"),console.log(this.files),null!=this.files[0]&&null!=this.files[0].progress&&(null==this.progress[e]&&(this.progress[e]=0),this.inprogress=!0,console.log("file upload progressing"),console.log(this.files[0].progress.data.percentage),this.progress[e]=this.files[0].progress.data.percentage,100==this.progress[e]&&(this.progress[e]=null,this.inprogress=null),console.log("this.uploadtype in api service"),console.log(n)),"single"==n&&(null==this.fileservername[e]&&(this.fileservername[e]=[]),this.fileservername[e]=[],null!=this.files[0].response&&this.fileservername[e].push(this.files[0].response)),"multiple"==n&&(console.log("this.files[0].response"),console.log(this.files.length),console.log(this.files),null==this.fileservername[e]&&(this.fileservername[e]=[]),1==this.files.length&&(this.files[0]&&null!=this.files[0].response&&null==this.files[0].response.error_code&&(this.fileservername[e].push(this.files[0].response),this.files=[],this.uploaderror=""),null!=this.files[0]&&null!=this.files[0].response&&null!=this.files[0].response.error_code&&(this.uploaderror="error occured on uploading !!!")),1<this.files.length)){for(var o in console.log("sdfdsf==== in multiple length "),this.files)null!=this.files[o].response&&null==this.files[o].response.error_code&&this.fileservername[e].push(this.files[o].response);this.files=[]}console.log("this.fileservername"),console.log(this.fileservername),console.log(this.uploaderror)},f.prototype.isTokenExpired=function(){},f.prototype.getclientip=function(){return console.log("endpoint"),this._http.get("http://ipinfo.io/?format=json&token=9797c42b93078a").pipe(operators.map(function(e){return e}))},f.prototype.getEndpoint=function(e){var a={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(a),console.log(""),this._http.post(""+e.source,{},a).pipe(operators.map(function(e){return e}))},f.prototype.getData=function(e){var a={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(a),console.log(""),this._http.post("datalist",e,a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postData=function(e,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a.token})};return this._http.post(this.getEndpointUrl(e),JSON.stringify(a),n).pipe(operators.catchError(function(e){return console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postDatawithoutToken=function(e,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return this._http.post(this.getEndpointUrl(e),JSON.stringify(a),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postlogin=function(e,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return console.log(""),console.log("endpoint"),console.log(e),this._http.post(this.getEndpointUrl(e),JSON.stringify(a),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch=function(e,a,n){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a})};return n.secret=this.secretkey,n.token=a,this._http.post(e,n,t).pipe(operators.catchError(function(e){return console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch1=function(e,a){return new http.HttpHeaders({"Content-Type":"application/json",Authorization:a.token}),console.log("------ "),console.log("link"),console.log(e),this._http.post(e,a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.putData=function(e,a,n){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return this._http.put(this.getEndpointUrl(e)+"/"+n,JSON.stringify(a),t).pipe(operators.map(function(e){return e}))},f.prototype.deteOneData=function(e,a,n,t){var i,l={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(i={source:t,id:a._id}).secret=this.secretkey,i.token=n,this._http.post(e,i,l).pipe(operators.catchError(function(e){return console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatus=function(e,a,n,t){var i,l={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(i={source:t,data:a}).secret=this.secretkey,i.token=n,this._http.post(e,i,l).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.deteManyData=function(e,a,n,t){var i,l={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(i={source:t,ids:a}).secret=this.secretkey,i.token=n,this._http.post(e+"many",i,l).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatusmany=function(e,a,n,t,i){var l,o={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:t})};return(l={source:i,data:{ids:a,val:n}}).secret=this.secretkey,l.token=t,this._http.post(e+"many",l,o).pipe(operators.catchError(function(e){return console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.getEndpointUrl=function(e){return""+e},f.prototype.postDataApi=function(e,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return this._http.post(e,JSON.stringify(a),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.decorators=[{type:i0.Injectable}],f.ctorParameters=function(){return[{type:http.HttpClient},{type:http.HttpClient},{type:ngxCookieService.CookieService}]},f.propDecorators={uploaderInput:[{type:i0.ViewChild,args:["fileInput1"]}]},f);function f(e,a,n){this._http=e,this._authHttp=a,this.cookieService=n,this.domain_for_fileupload_val="http://developmentapi.audiodeadline.com:7031/uploadsuploads",this.progress=[],this.uploaderror="",this.secretkey="na",this.fileservername=[],this.options={concurrency:10,maxUploads:10},this.files=[],this.uploadInput=new i0.EventEmitter,this.humanizeBytes=ngxUploader.humanizeBytes,this.cookieService.check("secret")&&(this.secretkey=this.cookieService.get("secret"))}var ObservableserviceService=(gb.prototype.setmultilingualData=function(e){this.subject.next(e)},gb.prototype.getmultilingualData=function(){return this.subject.asObservable()},gb.prototype.setconvertToLanguage=function(e){this.subject1.next(e)},gb.prototype.getconvertToLanguage=function(){return this.subject1.asObservable()},gb.prototype.setapiUrl=function(e){console.log("observablee data",e),this.apiUrlsubject.next(e)},gb.prototype.getapiUrl=function(){return this.apiUrlsubject.asObservable()},gb.decorators=[{type:i0.Injectable,args:[{providedIn:"root"}]}],gb.ctorParameters=function(){return[]},gb.ngInjectableDef=i0.defineInjectable({factory:function(){return new gb},token:gb,providedIn:"root"}),gb);function gb(){this.subject=new rxjs.Subject,this.subject1=new rxjs.Subject,this.apiUrlsubject=new rxjs.Subject}var moment=momentImported,ListingComponent=function(){function ListingComponent(e,a,n,t,i,l,o,r,s,d,c,m){var f=this;this._apiService=e,this.dialog=a,this.bottomSheet=n,this.fb=t,this.router=i,this.resolver=l,this.container=o,this._http=r,this.sanitizer=s,this._snackBar=d,this._elementRef=c,this.observableService=m,this.selectedItem=0,this.myControl=new forms.FormControl,this.staticTooltip={"delete":"Delete",edit:"Edit",preview:"Preview",changeStatus:"Change Status"},this.keepPagination=0,this.startDate111=new Date(162235805e4),this.rescount=0,this.columns=[],this.autosearchinput=[],this.currentautosearcharr=[],this.olddata=[],this.tsearch=[],this.tableflag=0,this.autosearch=[],this.libdataval={},this.limitcondval={},this.result={},this.sortdataval={},this.sh=!1,this.art=!1,this.aud2=!1,this.aud=!1,this.updatetableval=!1,this.loaderrow=null,this.customButtonFlagVal={},this.allSearchCond=[],this.searchbuttonval=[],this.searchBarFlag=!1,this.searchBarToolTip="Open Search Bar",this.searchBarFlagVal=!1,this.recordFoundFlag=!1,this.recordFoundData="",this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.previewFlug=!1,this.selectsearch=[],this.newpagingcountFlag=!0,this.initiateSearch=!1,this.minDate="",this.onLiblistingChange=new i0.EventEmitter,this.onLiblistingButtonChange=new i0.EventEmitter,this.searchstrsarr=[],this.oldlimitrange=[],this.languagedataset=[],this.paginationtypeFlag=!0,this.displayedColumns=[],this.datacolumns=[],this.displayedColumnsheader=[],this.formarray=[],this.dateSearch_condition={},this.selectSearch_condition={},this.autoSearch_condition={},this.textSearch_condition={},this.loading=!1,this.preresult={},this.buttonSearchData=[],this.dataSource=new material.MatTableDataSource,this.modelChanged=new rxjs.Subject,this.modelChangedserver=new rxjs.Subject,this.pagechanged=new rxjs.Subject,this.subscriptions=[],this.subscriptioncount=0,this.tableFooterColumns=[],this.testvalue="s1",this.txtQueryChanged=new rxjs.Subject,this.limitChangrd=new rxjs.Subject,this.pages=[],this.status=!1,this.stateGroups=this.searchListval,this.router.events.subscribe(function(e){switch(!0){case e instanceof router.NavigationStart:f.loading=!0;break;case e instanceof router.NavigationEnd:case e instanceof router.NavigationCancel:case e instanceof router.NavigationError:f.loading=!1}}),this.subscriptions[this.subscriptioncount++]=this.txtQueryChanged.pipe(operators.debounceTime(2500)).subscribe(function(){console.log("pageChangeValue subscribed !! ",f.pageChangeValue,f.pageCountArray.length),f.pageChangeValue>f.lastpageCountArray&&f._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Sorry!! Page number is out of range, highest range is "+f.lastpageCountArray}}),f.pageCountArray.length+1>f.pageChangeValue?f.paging(f.pageChangeValue,""):f.pageChangeValue=f.limitcondval.pagecount,console.log("first",f.pageChangeValue,"+++",f.pageCountArray.length)}),this.subscriptions[this.subscriptioncount++]=this.limitChangrd.pipe(operators.debounceTime(2500)).subscribe(function(){console.log("pageChangeValue subscribed !! ",f.pageChangeValue,f.pageCountArray.length),f.pageChangeValue?f.paging(f.pageChangeValue,""):f.pageChangeValue=f.limitcondval.pagecount}),this.subscriptions[this.subscriptioncount++]=this.modelChanged.pipe(operators.debounceTime(1e3)).subscribe(function(){f.filterautoval(f.currentautocompleteitem)}),this.subscriptions[this.subscriptioncount++]=this.modelChangedserver.pipe(operators.debounceTime(1e3)).subscribe(function(){if(null!=f.autosearchinput[f.currentautocompleteitem.field]&&""!=f.autosearchinput[f.currentautocompleteitem.field]){var e,a=f.apiurlval+""+f.currentautocompleteitem.serversearchdata.endpoint;"undefined"!=typeof f.libdataval.basecondition&&null!=f.libdataval.basecondition||(f.libdataval.basecondition={});var n={};for(var t in f.tsearch)null!=f.tsearch[t]&&""!=f.tsearch[t].toString().toLowerCase()&&(n[t]={$regex:f.tsearch[t].toString().toLowerCase()});var i={};for(var l in f.buttonSearchData)for(var o in f.buttonSearchData[l].value){var r={};r[f.buttonSearchData[l].field]=f.buttonSearchData[l].value[o].val.toString().toLowerCase(),null==i.$or&&(i.$or=[]),i.$or.push(r)}e={search_str:f.autosearchinput[f.currentautocompleteitem.field],sort:{field:f.sortdataval.field,type:f.sortdataval.type},allSearchCond:f.allSearchCond,basecondition:f.libdataval.basecondition,datasearch:f.dateSearch_condition,textsearch:n,buttonSearch:i,selectsearch:f.selectSearch_condition},f.date_search_source_countval=0,f.loading=!0,f.subscriptions[f.subscriptioncount++]=f._apiService.postSearch(a,f.jwttokenval,e).subscribe(function(e){var a;f.loading=!1,null!=(a=e)&&null!=a.results&&null!=a.results.res&&(f.rescount=a.results.res.length),null!=a.res&&0<a.res.length?f.currentautosearcharr=a.res:f.currentautosearcharr=[],f.loading=!1})}})}return Object.defineProperty(ListingComponent.prototype,"languageDataset",{set:function(e){this.languagedataset=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"setconvertToLanguage",{set:function(e){this.convertToLanguage=e,"undefined"!=typeof this.convertToLanguage&&null!=this.convertToLanguage&&""!=this.convertToLanguage&&this.observableService.setconvertToLanguage(this.convertToLanguage)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"search_settings",{set:function(e){this.search_settingsval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"click_to_add_ananother_page",{set:function(e){this.click_to_add_ananother_pageval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"limitcond",{set:function(e){this.limitcondval=e,null==this.limitcondval.pagecount&&(this.limitcondval.pagecount=1),this.newcurrentpagingVal=this.limitcondval.pagecount,this.pageChangeValue=this.limitcondval.pagecount,this.oldlimitrange.push(e)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source_count",{set:function(e){this.date_search_source_countval=e,this.pageCountArray=new Array(Math.ceil(e/this.limitcondval.limit)),this.lastpageCountArray=Math.ceil(e/this.limitcondval.limit),console.log("this.pageCountArray",Math.ceil(e/this.limitcondval.limit)),0==this.date_search_source_countval&&(this.limitcondval.pagecount=1)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"grab_link",{set:function(e){this.grab_linkval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"custombutton",{set:function(e){this.custombuttonval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source",{set:function(e){this.date_search_sourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sortdata",{set:function(e){this.sortdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_endpoint",{set:function(e){this.date_search_endpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"url",{set:function(e){this.urlval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchendpoint",{set:function(e){this.searchendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"pdf_link",{set:function(e){this.pdf_link_val=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchList",{set:function(e){this.searchListval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"libdata",{set:function(e){var a=this;this.libdataval=[],this.libdataval=e,this.paginationtype=this.libdataval.paginationType,"undefined"==typeof this.libdataval.paginationType&&null==this.libdataval.paginationType&&(this.paginationtypeFlag=!1),console.log("libdataval",this.libdataval),console.log("libdataval",this.paginationtype),"undefined"!=typeof this.libdataval.pages&&null!=this.libdataval.pages&&(this.pages=this.libdataval.pages),null!=e.searchBarFlagVal&&""!=e.searchBarFlagVal?setTimeout(function(){a.searchBarFlagVal=e.searchBarFlagVal},1e3):this.searchBarFlag=!0,null!=e.recordfoundflag&&""!=e.recordfoundflag&&null!=e.recordfounddata?setTimeout(function(){a.recordFoundFlag=e.recordfoundflag,a.recordFoundData=e.recordfounddata},1e3):this.recordFoundFlag=!1},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datasource",{set:function(e){this.datasourceval=[],this.datasourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datacollection",{set:function(e){this.datacollectionval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"skip",{set:function(e){this.skipval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_datatype",{set:function(e){this.detail_datatypeval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_skip_array",{set:function(e){this.detail_skip_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sourcedata",{set:function(e){this.sourcedataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"modify_header_array",{set:function(e){this.modify_header_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"deleteendpoint",{set:function(e){this.deleteendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updateendpoint",{set:function(e){this.updateendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"apiurl",{set:function(e){this.apiurlval=e,this.observableService.setapiUrl(this.apiurlval+this.libdataval.addlanguagedataEndpoint)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updatetable",{set:function(e){this.updatetableval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"jwttoken",{set:function(e){this.jwttokenval=null!=e?e:""},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"statusarr",{set:function(e){this.statusarrval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"emailarray",{set:function(e){this.emailarrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"editroute",{set:function(e){this.editrouteval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"preview_artistxp",{set:function(e){this.previewFlug=!0},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"customlistenbutton",{set:function(e){this.customButtonFlagVal=e},enumerable:!0,configurable:!0}),ListingComponent.prototype.clickEvent=function(){this.status=!this.status},ListingComponent.prototype.autocompletefunction=function(e){this.currentautosearcharr=[]},ListingComponent.prototype.ngOnChanges=function(e){for(var a in e)"updatetable"==a&&null!=e[a].previousValue&&(this.selection.clear(),this.allSearch())},ListingComponent.prototype.counter=function(e){return new Array(e)},ListingComponent.prototype.onFieldChange=function(e){this.pageCountArray.length+1>e&&this.txtQueryChanged.next(e)},ListingComponent.prototype.onFieldChangeforlimit=function(e){e<100&&this.limitChangrd.next(e)},ListingComponent.prototype.inputblur=function(e){this.myForm.controls[e].markAsUntouched()},ListingComponent.prototype.ngOnInit=function(){var _this=this;this.observableService.setmultilingualData(this.languagedataset),this.stateGroup=this.myControl.valueChanges.pipe(operators.startWith(""),operators.map(function(e){return _this._filter(e)})),this.x=this.datasourceval;var x=this.x;this.datasourceval&&(this.rescount=this.datasourceval.length);var temp=[],keys=x[0];temp=Object.keys(keys);for(var coldef_list=[],header_list=[],i=0;i<temp.length;i++)coldef_list.push(temp[i].replace(/\s/g,"_")),header_list.push(temp[i]);this.columns=[];for(var _loop_1=function(i){var ff="row."+coldef_list[i],tt={columnDef:""+coldef_list[i],header:""+header_list[i],tooltip:""+header_list[i],cell:function(row){return eval(ff)},objlength:header_list.length};for(var b in this_1.modify_header_arrayval)b==tt.header&&(tt.header=this_1.modify_header_arrayval[b]);if(null!=this_1.libdataval.header_tooltip_array&&"undefined"!=typeof this_1.libdataval.header_tooltip_array)for(var b in this_1.libdataval.header_tooltip_array)b==tt.tooltip&&(tt.tooltip=this_1.libdataval.header_tooltip_array[b]);-1==this_1.skipval.indexOf(tt.columnDef)&&this_1.columns.push(tt)},this_1=this,i=0;i<coldef_list.length;i++)_loop_1(i);var displayedcols=[];this.tableflag=1,setTimeout(function(){_this.tableflag=0},100),displayedcols=this.columns.map(function(e){return e.columnDef}),null!=this.libdataval.footersettings?this.tableFooterColumns=this.libdataval.footersettings.map(function(e){return e.key}):this.tableFooterColumns=[];var customcols=[];if(null!=this.libdataval&&null!=this.libdataval.tableheaders&&(customcols=this.libdataval.tableheaders),null!=customcols&&0<customcols.length){var ccolval="";for(var v in customcols)if(0==displayedcols.includes(customcols[v])){for(var b in this.modify_header_arrayval)b==customcols[v]&&(ccolval=this.modify_header_arrayval[b]);this.columns.push({columnDef:customcols[v],header:ccolval,cell:"NA"})}displayedcols=customcols}null!=this.libdataval.hideaction&&0!=this.libdataval.hideaction||(displayedcols.push(null==this.libdataval.actioncolname?"Actions":this.libdataval.actioncolname),this.columns.push({columnDef:null==this.libdataval.actioncolname?"Actions":this.libdataval.actioncolname,header:"Actions",cell:"NA"})),null!=this.libdataval.hidecounter&&0!=this.libdataval.hidecounter||(displayedcols.unshift("#"),this.columns.push({columnDef:"#",header:"#",cell:"NA"})),this.displayedColumns=[],this.displayedColumns=displayedcols,1!=this.libdataval.hidemultipleselectbutton&&(this.displayedColumns.unshift("select"),this.columns.push({columnDef:"select",header:"select",cell:"NA"}));var tempcolarr=[],tempcolarr2=[];for(var n in this.columns.reverse(),this.columns)-1==tempcolarr.indexOf(this.columns[n].columnDef)&&tempcolarr2.push(this.columns[n]),tempcolarr.push(this.columns[n].columnDef);this.columns=tempcolarr2,this.displayedColumns=Array.from(new Set(this.displayedColumns));for(var data_list=[],i=0;i<this.x.length;i++)data_list.push(this.createData(x[i]));this.olddata=data_list,this.dataSource=new material.MatTableDataSource([]),this.dataSource=new material.MatTableDataSource(data_list),this.selection=new collections.SelectionModel(!0,[]),this.expandedElement=this.dataSource,setTimeout(function(){if(null!=_this.search_settingsval.selectsearch)for(var e in _this.search_settingsval.selectsearch)null!=_this.search_settingsval.selectsearch[e].value&&""!=_this.search_settingsval.selectsearch[e].value&&(_this.selectsearch[_this.search_settingsval.selectsearch[e].field]=_this.search_settingsval.selectsearch[e].value,_this.initiateSearch=!0,_this.selectSearch_condition[_this.search_settingsval.selectsearch[e].field]=_this.search_settingsval.selectsearch[e].value);if(null!=_this.search_settingsval.textsearch)for(var e in _this.search_settingsval.textsearch)null!=_this.search_settingsval.textsearch[e].value&&""!=_this.search_settingsval.textsearch[e].value&&(_this.tsearch[_this.search_settingsval.textsearch[e].field]=_this.search_settingsval.textsearch[e].value,_this.initiateSearch=!0);if(null!=_this.search_settingsval.search)for(var a in _this.search_settingsval.search)if(null!=_this.search_settingsval.search[a].value&&""!=_this.search_settingsval.search[a].value&&0<_this.search_settingsval.search[a].value.length)for(var n in _this.initiateSearch=!0,null==_this.autosearch[_this.search_settingsval.search[a].field]&&(_this.autosearch[_this.search_settingsval.search[a].field]=[]),_this.search_settingsval.search[a].value)_this.autosearch[_this.search_settingsval.search[a].field].push({val:_this.search_settingsval.search[a].value[n].val,name:_this.search_settingsval.search[a].value[n].name});if(null!=_this.search_settingsval.datesearch&&null!=_this.search_settingsval.datesearch[0].value&&""!=_this.search_settingsval.datesearch[0].value&&(_this.initiateSearch=!0,_this.search_settingsval.datesearch[0].value.$lte=_this.search_settingsval.datesearch[0].value.$lte-86399e3,_this.start_date=new Date(_this.search_settingsval.datesearch[0].value.$gte),_this.end_date=new Date(_this.search_settingsval.datesearch[0].value.$lte),_this.search_settingsval.datesearch[0].value.$lte=_this.search_settingsval.datesearch[0].value.$lte+86399e3,_this.dateSearch_condition[_this.search_settingsval.datesearch[0].field]=_this.search_settingsval.datesearch[0].value),null!=_this.search_settingsval.buttonsearch)for(var t in _this.search_settingsval.buttonsearch){var i;i=parseInt(t),null!=_this.search_settingsval.buttonsearch[t].values&&""!=_this.search_settingsval.buttonsearch[t].values&&(_this.initiateSearch=!0,_this.buttonSearchData.push({field:_this.search_settingsval.buttonsearch[t].field,key:i,value:_this.search_settingsval.buttonsearch[t].values}))}1==_this.initiateSearch&&_this.allSearch()},1e3)},ListingComponent.prototype.CustomButtonListen=function(e){this.onLiblistingButtonChange.emit({action:"customlistenbutton",limitdata:this.limitcondval,sortdata:this.sortdataval,selecteddata:this.selection.selected,searchdata:this.search_settingsval,buttondata:e,allSearchCond:this.allSearchCond,autoSearchVal:this.autosearch,buttonSearchData:this.buttonSearchData})},ListingComponent.prototype.img_modal_view=function(e){this.dialog.open(ImageView,{panelClass:["custom-modalbox","custom-modalbox-image-preview"],height:"auto",data:{alldata:e}})},ListingComponent.prototype.ngAfterContentInit=function(){},ListingComponent.prototype.ngAfterViewInit=function(){var n=this;setTimeout(function(){if(null!=n.libdataval&&null!=n.libdataval.cssoverridesoncelltorow)for(var e in n.libdataval.cssoverridesoncelltorow){var a=n.upTo(n._elementRef.nativeElement.querySelector("."+n.libdataval.cssoverridesoncelltorow[e].key),"tr");null!=a&&a.classList.add(n.libdataval.cssoverridesoncelltorow[e].val)}},2e3)},ListingComponent.prototype.SearchBarToggle=function(e){switch(this.onLiblistingButtonChange.emit({action:"searchbar",flag:e}),e){case!0:this.searchBarFlag=!1,this.searchBarToolTip="Open Search Bar";break;case!1:this.searchBarFlag=!0,this.searchBarToolTip="Close Search Bar"}},ListingComponent.prototype.upTo=function(e,a){for(a=a.toLowerCase();e&&e.parentNode;)if((e=e.parentNode).tagName&&e.tagName.toLowerCase()==a)return e;return null},ListingComponent.prototype.ngAfterContentChecked=function(){},ListingComponent.prototype.ngOnDestroy=function(){this.subscriptions.forEach(function(e){return e.unsubscribe()})},ListingComponent.prototype.clickmultipleselectoption=function(e){this.onLiblistingChange.emit({action:"multipleselectoptionclick",limitdata:this.limitcondval,sortdata:this.sortdataval,selecteddata:this.selection.selected,btndata:e})},ListingComponent.prototype.onSubmit=function(){var e;this.errormg="";this.myForm.value;for(e in this.myForm.controls)this.myForm.controls[e].markAsTouched()},ListingComponent.prototype.dateSearch=function(e,a){this.minDate=moment(new Date(this.start_date).getTime()).format("YYYY-MM-DD"),this.searchstrsarr.push({val:this.tsearch[e],label:a.label,key:e});this.apiurlval,this.datacollectionval,this.apiurlval,this.datacollectionval;var n,t={};if(n={},this.limitcondval.pagecount=1,this.limitcondval.skip=0,null==moment(this.end_date).unix()||null==moment(this.start_date).unix())console.log("error");else{for(var i in this.dateSearch_condition={},this.dateSearch_condition=n,null!=this.end_date&&null!=this.start_date&&(n[e]={$gte:new Date(this.start_date).getTime(),$lte:new Date(this.end_date).getTime()+86399e3}),null==this.start_date||null!=this.end_date&&0!=this.end_date.length||(n[e]={$gte:new Date(this.start_date).getTime()}),null==this.end_date||null!=this.start_date&&0!=this.start_date.length||(n[e]={$lte:new Date(this.end_date).getTime()+86399e3}),this.tsearch)null!=this.tsearch[i]&&""!=this.tsearch[i]&&(t[i]={$regex:this.tsearch[i].toString().toLowerCase()});var l={};for(var o in this.autosearch)for(var r in this.autosearch[o]){var s={};s[o]=this.autosearch[o][r].val.toString().toLowerCase(),null==l.$or&&(l.$or=[]),l.$or.push(s)}var d=Object.assign({},t,this.dateSearch_condition,l,this.selectSearch_condition,this.libdataval.basecondition);({condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:d})}},ListingComponent.prototype.selectSearch=function(e,a,n,t){console.log("multipleFlag",this.tsearch[a.field]),console.log(e,"value"),console.log(a,"type"),console.log(n,"statusval"),this.searchstrsarr[a.field]={val:n.name,label:a.label,key:a.field};null!=this.tsearch&&null!=this.tsearch[e]&&this.tsearch[e].toString().toLowerCase();var i;this.apiurlval,this.date_search_endpointval;i={},"true"==t?(i[a.field]=this.tsearch[a.field],this.selectSearch_condition[a.field]=this.tsearch[a.field]):(i[a.field]=e,this.selectSearch_condition[a.field]=e);var l=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);console.log("this.date_search_sourceval",this.selectSearch_condition),this.date_search_sourceval},ListingComponent.prototype.paging=function(e,a){var n=this;console.log(this.oldlimitrange,"this.oldlimitrange"),this.selectedItem=e,null==this.limitcondval.pagecount&&(this.limitcondval.pagecount=1),null==this.limitcondval.limit&&(this.limitcondval.limit=10),this.oldlimitrange.push({skip:this.limitcondval.skip,limit:this.limitcondval.limit,pagecount:this.limitcondval.pagecount}),null!=this.limitcondval.limit&&this.limitcondval.limit;var t=Number(this.date_search_source_countval/this.limitcondval.limit);if(t=~~t,1==e&&(this.limitcondval.skip=this.limitcondval.pagecount*this.limitcondval.limit,this.limitcondval.pagecount++),!(-1==e&&this.limitcondval.skip<this.limitcondval.limit)){-1==e&&this.limitcondval.skip>=this.limitcondval.limit&&(this.limitcondval.skip=(this.limitcondval.pagecount-2)*this.limitcondval.limit,this.limitcondval.pagecount--),1<e&&(2==this.paginationtype&&(this.limitcondval.pagecount=e),null==this.limitcondval.pagecount?this.limitcondval.skip=0:(this.limitcondval.pagecount=e,this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit)),e<=1&&2==this.paginationtype&&(this.limitcondval.skip=0,this.limitcondval.pagecount=1),this.limitcondval.pagecount>t+1&&(this.limitcondval.pagecount=t+1,this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit);var i={};for(var l in this.tsearch)null!=this.tsearch[l].toString().toLowerCase()&&""!=this.tsearch[l].toString().toLowerCase()&&(i[l]={$regex:this.tsearch[l].toString().toLowerCase()});var o={};for(var r in this.autosearch)for(var s in this.autosearch[r]){var d={};d[r]=this.autosearch[r][s].val.toString().toLowerCase(),null==o.$or&&(o.$or=[]),o.$or.push(d)}var c=Object.assign({},i,this.dateSearch_condition,o,this.selectSearch_condition,this.libdataval.basecondition),m={condition:{limit:this.limitcondval.limit,skip:this.limitcondval.skip},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:c};this.allpaginationpostData=m;var f=this.apiurlval+""+this.datacollectionval;this.newpagingcountFlag=!1,this.loading=!0,this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(f,this.jwttokenval,m).subscribe(function(e){5<n.limitcondval.pagecount&&2==n.paginationtype&&(n.newcurrentpagingVal=n.limitcondval.pagecount-5),n.limitcondval.pagecount<=5&&2==n.paginationtype&&(n.newcurrentpagingVal=1),n.result=e,n.newpagingcountFlag=!0,null!=n.result.results.res&&0<n.result.results.res.length?(n.onLiblistingChange.emit({action:"paging",limitdata:n.limitcondval,searchcondition:c,sortdata:n.sortdataval,results:n.result.results.res,totalresults:n.result}),n.pageChangeValue!=n.limitcondval.pagecount&&(n.pageChangeValue=n.limitcondval.pagecount),setTimeout(function(){"undefined"!=typeof n.libdataval.containerid&&document.getElementById(n.libdataval.containerid).scrollIntoView({behavior:"smooth"})},100),n.dataSource=new material.MatTableDataSource(n.result.results.res),n._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New range of data loaded"}})):(n.limitcondval.skip=n.oldlimitrange[n.oldlimitrange.length-1].skip,n.limitcondval.pagecount=n.oldlimitrange[n.oldlimitrange.length-1].pagecount,n.limitcondval.limit=n.oldlimitrange[n.oldlimitrange.length-1].limit,n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No Data Found in this range !!"}})),n.loading=!1}),this.selection.clear()}},ListingComponent.prototype.addautosearchdata=function(e){},ListingComponent.prototype.remove=function(e,a,n){null!=this.autosearch[n]&&this.autosearch[n].splice(a,1)},ListingComponent.prototype.autocompletechangedetected=function(e){this.currentautocompleteitem=e,this.currentautosearcharr=[],null==this.currentautocompleteitem.serversearchdata?this.modelChanged.next():this.modelChangedserver.next()},ListingComponent.prototype.filterautoval=function(e){var a=this.autosearchinput[e.field];if(this.currentautosearcharr=[],null!=this.autosearchinput[e.field]&&""!=this.autosearchinput[e.field]){var n=e.values.filter(function(e){return e.name.toString().toLowerCase().includes(a.toLowerCase())});this.currentautosearcharr=n}},ListingComponent.prototype.resetautocomp=function(e){document.querySelector("#autocompletesearch"+e.field).value=""},ListingComponent.prototype.autosearchfunction=function(e,a,n){this.searchstrsarr.push({val:this.autosearchinput[e],label:n.label,key:e}),null==this.autosearch[e]&&(this.autosearch[e]=[]),this.autosearch[e].push(a);var t=[];this.autosearch[e].filter(function(a){return t.findIndex(function(e){return e.val==a.val})<=-1&&t.push(a),null}),this.autosearch[e]=t,this.autosearchinput[e]=null,this.currentautosearcharr=[],document.querySelector("#autocompletesearch"+e).value=""},ListingComponent.prototype.textsearchfunction=function(e,a){if(""==this.tsearch[e]){this.searchstrsarr.indexOf(this.searchstrsarr[e]);delete this.searchstrsarr[e]}else this.searchstrsarr[e]={val:this.tsearch[e],label:a.label,key:e};this.apiurlval,this.date_search_endpointval;var n={},t="";null!=this.tsearch&&null!=this.tsearch[e]&&(t=this.tsearch[e].toString().toLowerCase()),null!=this.tsearch[e]&&1<this.tsearch[e].length&&{$or:[this.tsearch[e].toString().toLowerCase(),this.tsearch[e].toUpperCase()]}&&(n[e+"_regex"]=t),this.textSearch_condition={},this.textSearch_condition=n;var i=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);this.date_search_sourceval},ListingComponent.prototype.refreshdata=function(){this.autosearch=[],this.tsearch=[],this.selectsearch=[],this.start_date=null,this.limitcondval.skip=0,this.end_date=null,this.selectSearch_condition={},this.dateSearch_condition={},this.allSearch(),this.selection.clear(),this.allSearchCond=[],this.buttonSearchData=[],this.minDate=""},ListingComponent.prototype.refreshalldata=function(e){if(this.dataSource=new material.MatTableDataSource(this.olddata),this.selection=new collections.SelectionModel(!0,[]),null!=e.filteredData&&e.filteredData.length<this.olddata.length)this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","refreshdata"],data:{message:"Refresh successfully!!",isconfirmation:!1}});else this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","refreshdata"],data:{message:" Updated!!",isconfirmation:!1}})},ListingComponent.prototype._filter=function(e){var a=e.toString().toLowerCase();return this.searchListval.filter(function(e){return e.toString().toLowerCase().includes(a)})},ListingComponent.prototype.getstatus=function(e){for(var a in this.statusarrval)if(this.statusarrval[a].val==e)return this.statusarrval[a].name;return"N/A"},ListingComponent.prototype.pdfFlag=function(e){null!=e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!1),null!=e.shatterblok_agreement_date&&null!=e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!0),null==e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!1,this.aud=!1)},ListingComponent.prototype.grapurl=function(e){null!=e&&(this.art=!0,this.aud2=!0),null==e&&(this.art=!1,this.aud2=!1)},ListingComponent.prototype.copyText=function(e,a){var n=a+""+e,t=document.createElement("textarea");t.style.position="fixed",t.style.left="0",t.style.top="0",t.style.opacity="0",t.value=n,document.body.appendChild(t),t.focus(),t.select(),document.execCommand("copy"),document.body.removeChild(t),this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Copied Successfully !! "}})},ListingComponent.prototype.openinternallink=function(e){this.router.navigate([e.route])},ListingComponent.prototype.openinternallinkwithparam=function(e,a){var n=[];for(var t in n.push(e.route),e.param)n.push(a[e.param[t]]);this.router.navigate(n)},ListingComponent.prototype.opencustombuttonactionlocaldata=function(e,a){var n=[];for(var t in null!=e.refreshdata&&1==e.refreshdata&&this.allSearch(),e.datafields){var i=[];if(i.push(e.datafields[t]),"image"!=e.datafields[t]&&"video"!=e.datafields[t]&&(null!=a[e.datafields[t]]&&"object"!=typeof a[e.datafields[t]]&&null!=a[e.datafields[t]]&&a[e.datafields[t]].toString().includes("iframe")?i.push(this.sanitizer.bypassSecurityTrustHtml(a[e.datafields[t]])):i.push(a[e.datafields[t]])),"image"==e.datafields[t]&&i.push("<img mat-card-image src="+a[e.datafields[t]]+" > <br/>"),"video"==e.datafields[t])if(null!=a[e.datafields[t]]&&""!=a[e.datafields[t]]){var l="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+a[e.datafields[t]]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";l=this.sanitizer.bypassSecurityTrustHtml(l),i.push(l)}else i.push("N/A");n.push(i)}var o=n;if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var r=[];for(var s in o){for(var d in this.libdataval.detailview_override)this.libdataval.detailview_override[d].key==o[s][0]&&(r[s]=[this.libdataval.detailview_override[d].val,o[s][1],o[s][0]]);null==r[s]&&(r[s]=o[s])}o=r}null!=e.refreshdata&&1==e.refreshdata&&this.allSearch(),o.message=e.headermessage;this.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox-apidata","modal-localdata"],data:{isconfirmation:!1,data:o}})},ListingComponent.prototype.opencustombuttonactionapidata=function(f,e){var u=this;this.loading=!0;var a=this.apiurlval+f.endpoint,n={};if(n[f.param]=e._id,null!=f.otherparam)for(var t in f.otherparam)n[f.otherparam[t]]=e[f.otherparam[t]];this.loaderrow=e._id,this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(a,this.jwttokenval,n).subscribe(function(e){var a;if("success"==(a=e).status){u._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:a.msg}});var n={};u.loaderrow=null,u.loading=!1,n=null!=a.res[0]?a.res[0]:a.res;var t={};if(null!=f.datafields){for(var i in f.datafields)t[f.datafields[i]]=n[f.datafields[i]];n=t}var l=[];for(var o in n){var r=[];if(r.push(o),"image"!=o&&"video"!=o&&(null!=n[o]&&"object"!=typeof n[o]&&n[o].toString().includes("iframe")?r.push(u.sanitizer.bypassSecurityTrustHtml(n[o])):r.push(n[o])),"image"==o&&r.push("<img mat-card-image src="+n[o]+" > <br/>"),"video"==o){var s="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+n[o]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";s=u.sanitizer.bypassSecurityTrustHtml(s),r.push(s)}l.push(r)}if(null!=u.libdataval.detailview_override&&0<u.libdataval.detailview_override.length){var d=[];for(var c in l){for(var m in u.libdataval.detailview_override)u.libdataval.detailview_override[m].key==l[c][0]&&(d[c]=[u.libdataval.detailview_override[m].val,l[c][1],l[c][0]]);null==d[c]&&(d[c]=l[c])}l=d}null!=f.refreshdata&&1==f.refreshdata&&u.allSearch(),l.message=f.headermessage;u.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox","api-data"],data:{isconfirmation:!1,data:l}})}"error"==a.status&&u._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){u._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),u.loading=!1})},ListingComponent.prototype.openextlinkwithparam=function(e,a){var n="",t="";if(t=e.link,null==e.paramtype)for(var i in e.param)n=e.param[i].q+"="+encodeURI(a[e.param[i].key]),0==parseInt(i)&&(t=t+"?"+n),0!=parseInt(i)&&(t=t+"&"+n);if(null!=e.paramtype&&"angular"==e.paramtype)for(var i in e.param)t=t+"/"+encodeURI(a[e.param[i]]);setTimeout(function(){},10),window.open(t,"_blank")},ListingComponent.prototype.clickurl=function(e,a){var n=a+""+e._id+this.pdf_link_val;window.open(n,"_blank")},ListingComponent.prototype.checkedlist=function(){var e=this;setTimeout(function(){e.selection.selected.map(function(e){return e._id});e.onLiblistingChange.emit({action:"multipleselectionchange",limitdata:e.limitcondval,sortdata:e.sortdataval,selecteddata:e.selection.selected})},100)},ListingComponent.prototype.isAllSelected=function(){if(null!=this.selection&&this.selection.select)return this.selection.selected.length===this.dataSource.data.length},ListingComponent.prototype.masterToggle=function(){var a=this;this.isAllSelected()?this.selection.clear():this.dataSource.data.forEach(function(e){return a.selection.select(e)}),this.checkedlist()},ListingComponent.prototype.checkboxLabel=function(e){return e?(this.selection.isSelected(e)?"deselect":"select")+" row "+(e.position+1):(this.isAllSelected()?"select":"deselect")+" all"},ListingComponent.prototype.createData=function(a){var n={};return Object.keys(a).forEach(function(e){n[e.replace(/\s/g,"_")]=a[e]}),n},ListingComponent.prototype.applyFilter=function(e){this.dataSource.filter=e.trim().toString().toLowerCase(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()},ListingComponent.prototype.styleCell=function(e,a){return{}},ListingComponent.prototype.fetchvideo=function(e){this.dialog.open(VideoPlayer,{panelClass:["custom-modalbox-videoplayer-preview","video-modal"],height:"auto",data:{previewData:e}})},ListingComponent.prototype.opennotes=function(n){var t=this;this.loading=!0,this.loaderrow=n._id,this._apiService.postSearch(this.apiurlval+this.libdataval.notes.listendpoint,this.jwttokenval,{id:n._id}).subscribe(function(e){var a;a=e,t.loading=!1,t.loaderrow=null,t.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox","notes-modal"],data:{isconfirmation:!1,notes:!0,apiurl:t.apiurlval,notedata:t.libdataval.notes,rowdata:n,jwttokenval:t.jwttokenval,listdata:a.res,_snackBar:t._snackBar}}).afterClosed().subscribe(function(e){t.keepPagination=1,t.allSearch()})})},ListingComponent.prototype.viewdata=function(e){var a;a=e;var n=[],t={};for(var i in null!=this.libdataval.preview_header&&null!=this.libdataval.preview_header.header&&""!=this.libdataval.preview_header.header&&(t=this.libdataval.preview_header),a)if(a.hasOwnProperty(i)&&("boolean"==typeof a[i]&&(1==a[i]&&(a[i]="Yes"),0==a[i]&&(a[i]="No")),"image"==i&&(a[i+":"]="<img mat-card-image src="+a[i]+"><br/>"),a[i],"object"==typeof a[i])){var l=[];for(var o in a[i])for(var r in this.detail_datatypeval)if(this.detail_datatypeval[r].key==i&&"image"==this.detail_datatypeval[r].value&&l.push("<img mat-card-image src="+a[i][o]+"><br/>"),this.detail_datatypeval[r].key==i&&"image"!=this.detail_datatypeval[r].value&&l.push("<span>"+a[i][o]+"</span><br/>"),this.detail_datatypeval[r].key!=i&&"object"==typeof a[i][o])for(var s in a[i][o])l.push("<span>"+s+" : "+a[i][o][s]+"</span><br/>");a[i+":"]=l}for(var d in a)null!=a[d]&&""!=a[d]&&(n[d]=a[d]);for(var c in this.detail_skip_arrayval)delete n[this.detail_skip_arrayval[c]];var m=Object.entries(n);if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var f=[];for(var u in m){for(var p in this.libdataval.detailview_override)this.libdataval.detailview_override[p].key==m[u][0]&&(f[u]=[this.libdataval.detailview_override[p].val,m[u][1],m[u][0]]);null==f[u]&&(f[u]=m[u])}m=f}this.dialog.open(Confirmdialog,{height:"auto",autoFocus:!1,maxHeight:"1000vh",panelClass:["custom-modalbox","detail-view"],data:{isconfirmation:!1,data:m,headerData:t}})},ListingComponent.prototype.managestatus=function(t){var i=this,e=this.bottomSheet.open(BottomSheet,{panelClass:["custom-bottomsheet","parent-bottom-class"],data:{items:this.statusarrval}});this.subscriptions[this.subscriptioncount++]=e.afterDismissed().subscribe(function(e){null!=e&&(t.status=e.val,t.id=t._id,i.subscriptions[i.subscriptioncount++]=i._apiService.togglestatus(i.apiurlval+i.libdataval.updateendpoint,t,i.jwttokenval,i.sourcedataval).subscribe(function(e){var a;if("success"==(a=e).status){for(var n in i.olddata)i.olddata[n]._id==t._id&&(i.olddata[n].status=t.status);i.dataSource=new material.MatTableDataSource(i.olddata),i.selection=new collections.SelectionModel(!0,[]),i.dataSource.paginator=i.paginator,i.dataSource.sort=i.sort,i.onLiblistingChange.emit({action:"statusupdate",limitdata:i.limitcondval,sortdata:i.sortdataval,totalresults:a});i.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","manage-status"],data:{message:"Status updated successfully!!",isconfirmation:!1}})}"error"==a.status&&i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.custombuttonlistner=function(e,a){this.onLiblistingChange.emit({action:"custombuttonclick",limitdata:this.limitcondval,sortdata:this.sortdataval,custombuttonclick:{data:e,btninfo:a}})},ListingComponent.prototype.custombuttonfunc=function(e){var a=this.custombuttonval.url;for(var n in this.custombuttonval.fields)a=a+"/"+e[this.custombuttonval.fields[n]];a=this.sanitizer.bypassSecurityTrustResourceUrl(a);this.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-data-modal",data:{isconfirmation:!1,data:[{data:e,customdata:a}]}})},ListingComponent.prototype.managestatusmultiple=function(){var e,t=this,i=[];for(e in this.selection.selected)i.push(this.selection.selected[e]._id);var a=this.bottomSheet.open(BottomSheet,{panelClass:["custom-bottomsheet","parent-bottom-class"],data:{items:this.statusarrval}});this.subscriptions[this.subscriptioncount++]=a.afterDismissed().subscribe(function(e){if(null!=e){var n=e.val;t.subscriptions[t.subscriptioncount++]=t._apiService.togglestatusmany(t.apiurlval+t.libdataval.updateendpointmany,i,e.val,t.jwttokenval,t.sourcedataval).subscribe(function(e){if("success"==e.status){for(var a in t.olddata)-1<i.indexOf(t.olddata[a]._id)&&(t.olddata[a].status=n);t.dataSource=new material.MatTableDataSource(t.olddata),t.selection=new collections.SelectionModel(!0,[]),t.dataSource.paginator=t.paginator,t.dataSource.sort=t.sort,t.onLiblistingChange.emit({action:"multiplestatusupdate",limitdata:t.limitcondval,sortdata:t.sortdataval});t.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","toogle-many"],data:{message:"Status updated successfully!!",isconfirmation:!1}})}},function(e){t._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})})}})},ListingComponent.prototype.deletemultiple=function(){var e,i=this,a=this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-multiple"],data:{message:"Are you sure you want to delete these records? This process can not be undone.",type:"confirm"}}),l=[];for(e in this.selection.selected)l.push(this.selection.selected[e]._id);a.afterClosed().subscribe(function(e){"yes"==e&&(i.subscriptions[i.subscriptioncount++]=i._apiService.deteManyData(i.apiurlval+i.libdataval.deleteendpointmany,l,i.jwttokenval,i.sourcedataval).subscribe(function(e){var a;if("success"==(a=e).status){var n=function(a){i.olddata=i.olddata.filter(function(e){return e._id!=l[a]})};for(var t in l)n(t);i.dataSource=new material.MatTableDataSource(i.olddata),i.selection=new collections.SelectionModel(!0,[]),i.dataSource.paginator=i.paginator,i.dataSource.sort=i.sort,i.allSearch(),i.onLiblistingChange.emit({action:"multipledelete",limitdata:i.limitcondval,sortdata:i.sortdataval,totalresults:a});i.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-multiple"],data:{message:"Record(s)  deleted successfully !!",isconfirmation:!1}})}"error"==a.status&&i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.deletedata=function(n){var t=this;this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-single"],height:"auto",data:{message:"Are you sure you want to delete this record? This process can not be undone.",type:"confirm"}}).afterClosed().subscribe(function(e){"yes"==e&&(t.subscriptions[t.subscriptioncount++]=t._apiService.deteOneData(t.apiurlval+t.deleteendpointval,n,t.jwttokenval,t.sourcedataval).subscribe(function(e){var a;if("success"==(a=e).status){t.olddata=t.olddata.filter(function(e){return e._id!=n._id}),t.dataSource=new material.MatTableDataSource(t.olddata),t.selection=new collections.SelectionModel(!0,[]),t.dataSource.paginator=t.paginator,t.dataSource.sort=t.sort,t.allSearch(),t.onLiblistingChange.emit({action:"delete",limitdata:t.limitcondval,sortdata:t.sortdataval,totalresults:a});t.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-single"],data:{message:"Record  deleted successfully !!",isconfirmation:!1}})}"error"==a.status&&t._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){t._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.editdata=function(e){this.router.navigate([this.editrouteval,e._id])},ListingComponent.prototype.sorttable=function(e,a){console.log("sorttable function data",e,a),this.sortdataval.field=e,this.sortdataval.type=a,this.allSearch()},ListingComponent.prototype.allSearch=function(){var e,n=this,a=this.apiurlval+""+this.datacollectionval,t=this.apiurlval+""+this.datacollectionval+"-count",i={};for(var l in this.tsearch)null!=this.tsearch[l]&&""!=this.tsearch[l].toString().toLowerCase()&&(i[l]={$regex:this.tsearch[l].toString().toLowerCase()});var o={};for(var r in this.autosearch){var s={};for(var d in this.autosearch[r]){var c={};c[r]=this.autosearch[r][d].val.toString().toLowerCase(),null==s.$or&&(s.$or=[]),s.$or.push(c)}null==o.$and&&(o.$and=[]),o.$and.push(s);null==Object.keys(o).length||"undefined"==typeof Object.keys(o).length?0:Object.keys(o).length}var m={};for(var f in this.buttonSearchData)for(var u in this.buttonSearchData[f].value){var p={};p[this.buttonSearchData[f].field]=this.buttonSearchData[f].value[u].val.toString().toLowerCase(),null==m.$or&&(m.$or=[]),m.$or.push(p)}"undefined"!=typeof this.limitcondval.pagecount?(this.oldlimitrange.push(this.limitcondval),1!=this.keepPagination&&(this.limitcondval.skip=0,this.limitcondval.pagecount=1)):(this.limitcondval.pagecount=1,this.limitcondval.skip=0,this.oldlimitrange.push(this.limitcondval));var g;if(g=Object.assign({},i,this.dateSearch_condition,o,m,this.selectSearch_condition,this.libdataval.basecondition),this.allSearchCond=g,1!=this.keepPagination&&(this.limitcondval.skip=0,this.limitcondval.pagecount=1),"undefined"!=typeof this.allpaginationpostData){e=this.allpaginationpostData;var h={field:this.sortdataval.field,type:this.sortdataval.type};e.sort=h,void 0!==g&&null!=g&&(e.searchcondition=g,1!=this.keepPagination&&(this.limitcondval.skip=0,this.limitcondval.pagecount=1))}else e={condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:g};Object.keys(g).length<0?this._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"No Search criteria selected !! "}}):(this.date_search_source_countval=0,this.loading=!0,1!=this.keepPagination&&(e.condition.skip=0),1==this.keepPagination&&(this.keepPagination=0),this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(a,this.jwttokenval,e).subscribe(function(e){var a;a=e,n.pageCountArray=new Array(Math.ceil(n.date_search_source_countval/n.limitcondval.limit)),n.lastpageCountArray=Math.ceil(n.date_search_source_countval/n.limitcondval.limit),n.pageChangeValue=n.limitcondval.pagecount,n.newcurrentpagingVal=n.limitcondval.pagecount,null!=a.results.res&&0<a.results.res.length?(n.onLiblistingChange.emit({action:"search",limitdata:n.limitcondval,searchcondition:g,sortdata:n.sortdataval,res:a.results.res.length,totalresults:a,allSearchCond:n.allSearchCond,autoSearchVal:n.autosearch,searchdata:n.search_settingsval,selecteddata:n.selection.selected}),n.dataSource=new material.MatTableDataSource(a.results.res),n._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New Search of data loaded"}})):(n.onLiblistingChange.emit({action:"search",limitdata:n.limitcondval,searchcondition:g,sortdata:n.sortdataval,res:a.results.res.length,totalresults:a,allSearchCond:n.allSearchCond,autoSearchVal:n.autosearch,searchdata:n.search_settingsval,selecteddata:n.selection.selected,flag:"no_record"}),n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No such search record found !!"}})),n.loading=!1}),this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(t,this.jwttokenval,e).subscribe(function(e){var a;console.log("count log++",n.newcurrentpagingVal),a=e,n.date_search_source_countval=a.count,n.pageCountArray=new Array(Math.ceil(n.date_search_source_countval/n.limitcondval.limit)),n.lastpageCountArray=Math.ceil(n.date_search_source_countval/n.limitcondval.limit),n.pageChangeValue=n.limitcondval.pagecount,n.newcurrentpagingVal=n.limitcondval.pagecount,0==a.count?n.tableflag=1:n.tableflag=0}),this.initiateSearch=!1)},ListingComponent.prototype.gettypeof=function(e){return typeof e},ListingComponent.prototype.openBottomSheetForSearch=function(e,i){var l=this,o=1,a=this.dialog.open(ModalForButtomSearch,{panelClass:"button-search-modal",data:{items:e}});a.disableClose=!0,a.afterClosed().subscribe(function(e){if(null!=e&&"yes"==e.flag){o=1;var a=0;if(0<l.buttonSearchData.length){for(var n in a=1,l.buttonSearchData){if(l.buttonSearchData[n].field==e.items.field){for(var t in o=2,a=1,e.selectedData)l.buttonSearchData[n].value.push(e.selectedData[t]);return void(1==a&&l.allSearch())}o=0}0==o&&(l.buttonSearchData.push({value:e.selectedData,key:i,field:e.items.field}),a=1)}else l.buttonSearchData.push({value:e.selectedData,key:i,field:e.items.field}),a=1;1==a&&l.allSearch()}})},ListingComponent.prototype.clearButtonSearchChips=function(e,a,n,t){for(var i in this.buttonSearchData[a].value.splice(t,1),this.search_settingsval.buttonsearch)this.search_settingsval.buttonsearch[i].field==e.field&&this.search_settingsval.buttonsearch[i].value.push(n)},ListingComponent.prototype.artistxpPreview=function(e){var n=this,a={source:"blockchainuser_view",condition:{posts_id_object:e._id},token:this.jwttokenval};this.subscriptions[this.subscriptioncount++]=this._apiService.postData("http://developmentapi.audiodeadline.com:3090/datalist",a).subscribe(function(e){var a=e;n.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-axp"],height:"auto",data:{preview:!0,previewData:a}})})},ListingComponent.decorators=[{type:i0.Component,args:[{selector:"lib-listing",template:'<div class="container " id={{libdataval.containerid}}>\n\n\n    <mat-card>\n\n        <div class="searchiconcls" *ngIf="searchBarFlagVal == true">\n            <span class="material-icons iconcls" matTooltip="{{searchBarToolTip}}"\n                (click)="SearchBarToggle(searchBarFlag)">\n                search\n            </span>\n        </div>\n\n\n\n        <div class="togglesearchcls" *ngIf="searchBarFlag == true">\n\n            <mat-toolbar-row class="searchbar listmaindivbody" *ngIf="rescount>0">\n\n\n                <ng-container class="inputfilterForloop"\n                    *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\n                    <ng-container *ngFor="let item of search_settingsval.textsearch">\n                        <mat-form-field class="searchdiv pad-gap">\n\n                            <input class="filterForText" matInput (change)="textsearchfunction(item.field,item)"\n                                (keyup)="textsearchfunction(item.field,item)" [(ngModel)]=\'tsearch[item.field]\'\n                                placeholder="{{item.label}}">\n                            <span class="filterForTexticon" matPrefix><i class="material-icons searchicon">\n                                    search\n                                </i> &nbsp;</span>\n                        </mat-form-field>\n                    </ng-container>\n                </ng-container>\n\n                <ng-container class="inputfilterForAuto"\n                    *ngIf="search_settingsval !=null && search_settingsval.search != null ">\n                    <mat-form-field class="filterForAuto searchdiv" *ngFor="let item of search_settingsval.search">\n\n\n                        <mat-chip-list #chipList aria-label="Fruit selection">\n                            <mat-chip *ngFor="let v of autosearch[item.field]; let i=index;" [selectable]="true"\n                                [removable]="true" (removed)="remove(v,i,item.field)">\n                                {{v.name}}\n                                <mat-icon matChipRemove>cancel</mat-icon>\n                            </mat-chip>\n                            <input id="autocompletesearch{{item.field}}" placeholder="{{item.label}} "\n                                [matAutocomplete]="auto" [matChipInputFor]="chipList"\n                                [(ngModel)]="autosearchinput[item.field]" (blur)="resetautocomp(item)"\n                                (keyup)="autocompletechangedetected(item);" (click)="autocompletefunction(item)">\n                        </mat-chip-list>\n\n                        \x3c!--[matChipInputSeparatorKeyCodes]="[ENTER, COMMA]"--\x3e\n                        \x3c!--(matChipInputTokenEnd)="addautosearchdata($event)"--\x3e\n\n\n                        \x3c!--<input class="filterForAutoInput"  type="text" placeholder="{{item.label}}" matInput [(ngModel)]="autosearch[item.field]" [matAutocomplete]="auto">--\x3e\n                        <mat-autocomplete #auto="matAutocomplete">\n                            \x3c!--<mat-option *ngFor="let option of item.values | async" [value]="option[item.field]" (click)="autosearchfunction(item.field)">\n                                {{option[item.field]}}\n                            </mat-option>--\x3e\n\n                            <mat-option *ngFor="let statusval of currentautosearcharr" [value]="statusval.val"\n                                (click)="autosearchfunction(item.field,statusval,item)">\n                                {{statusval.name}}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </mat-form-field>\n                </ng-container>\n\n\n\n                \x3c!--      <span *ngIf="search_settingsval !=null && search_settingsval != null ">\n    \n          <mat-form-field *ngFor="let item of search_settingsval.search">\n            <mat-label>{{item.label}}</mat-label>\n            <mat-select>\n              <mat-option *ngFor="let status of preresult" [value]="status" (click)="autosearchfunction(status.email)">\n                {{status.email}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n    \n          </span>--\x3e\n                \x3c!--  <ng-container  *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\n    &lt;!&ndash;        <span *ngFor="let status of this.search_settingsval.textsearch">&ndash;&gt;\n    &lt;!&ndash;        <mat-form-field *ngFor="let statusval of status.value">&ndash;&gt;\n            <mat-form-field *ngFor="let status of this.search_settingsval.textsearch">\n                  <input matInput (keyup)="applyFilter1($event.target.value, status)" placeholder="{{status.label}}">\n            </mat-form-field>\n    &lt;!&ndash;              </span>&ndash;&gt;\n          </ng-container>--\x3e\n\n\n                <ng-container class="filterForTexticon"\n                    *ngIf="search_settingsval !=null && search_settingsval.selectsearch != null ">\n\n                    <mat-form-field class="searchdiv" *ngFor="let status of search_settingsval.selectsearch">\n                        <mat-label>{{status.label}}</mat-label>\n                        \x3c!-- <mat-select [(ngModel)]="selectsearch[status.field]" [(value)]="selectsearch[status.field]"> --\x3e\n                        \x3c!-- single select box --\x3e\n                        <ng-container *ngIf="status.multiple===undefined">\n                            <mat-select [(ngModel)]="selectsearch[status.field]" [(value)]="status.value"\n                                [(ngModel)]=\'tsearch[status.field]\'>\n                                <mat-option *ngFor="let statusval of status.values" [value]="statusval.val"\n                                    (click)="selectSearch(statusval.val, status,statusval,\'false\')">\n                                    {{statusval.name}}\n                                </mat-option>\n                            </mat-select>\n                        </ng-container>\n                        \x3c!-- multiple select box search --\x3e\n                        <ng-container *ngIf="status.multiple==true">\n                            <mat-select multiple [(ngModel)]="selectsearch[status.field]" [(value)]="status.value"\n                                [(ngModel)]=\'tsearch[status.field]\'>\n                                <mat-option *ngFor="let statusval of status.values" [value]="statusval.val"\n                                    (click)="selectSearch(statusval.val, status,statusval,\'true\')">\n                                    {{statusval.name}}\n                                </mat-option>\n                            </mat-select>\n                        </ng-container>\n\n                    </mat-form-field>\n                </ng-container>\n\n\n                <ng-container *ngIf=" search_settingsval != null && search_settingsval.datesearch != null ">\n                    \x3c!-- <span>D search !!</span> --\x3e\n                    <ng-container class="filterFordatesearch" *ngFor="let status of this.search_settingsval.datesearch">\n\n                        <mat-form-field class="filterFordatesearchformfield searchdiv">\n                            <input readonly class="filterFordatesearchinput" matInput [matDatepicker]="picker"\n                                autocomplete="off" placeholder="{{status.startdatelabel}}" [(ngModel)]="start_date"\n                                (dateChange)="dateSearch(status.field,status)">\n                            <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                        </mat-form-field>\n\n                        \x3c!-- <mat-form-field>\n                            <input matInput [matDatepicker]="picker1" placeholder="From Date" [(ngModel)]="startDate111">\n                            <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                            <mat-datepicker  #picker1></mat-datepicker>\n                        </mat-form-field> --\x3e\n\n                        <mat-form-field class="filterFordatesearchend">\n                            <input readonly class="filterFordatesearchinput" matInput [matDatepicker]="picker1"\n                                autocomplete="off" placeholder="{{status.enddatelabel}}" [(ngModel)]="end_date"\n                                (dateChange)="dateSearch(status.field,status)"\n                                [min]="minDate">\n                            <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n\n                        </mat-form-field>\n                        \x3c!-- datepicker{{end_date}} --\x3e\n\n                        \x3c!-- <span class="search_class">\n                            <button mat-raised-button color="primary" class="add_button"\n                                (click)="dateSearch(status.field)">{{status.submit}}</button>\n                        </span> --\x3e\n                    </ng-container>\n                </ng-container>\n\n\n                \x3c!-- <br><br> <br><br> --\x3e\n\n                <div class="searchbtncls">\n                    \x3c!-- use for refresh all data --\x3e\n                    <span class="search_class">\n                        <ng-container class="refresh">\n                            <i (click)="refreshdata()" class="material-icons cursor" matTooltip="refresh"\n                                matTooltipClass="refreshtooltipcls">\n                                autorenew\n                            </i>\n                        </ng-container>\n                        \x3c!-- *ngIf="date_search_endpointval ==null || date_search_sourceval == null || search_settingsval.datesearch == null " --\x3e\n                        <ng-container class="refresh">\n                            <button mat-raised-button color="primary" class="add_button" (click)="allSearch()"\n                                matTooltip="search" matTooltipClass="searchtooltipcls">Search</button>\n                        </ng-container>\n\n                        <br>\n                    </span>\n                </div>\n\n\n                \x3c!--custom buttons --\x3e\n                <div class="CustomButtonListen_div">\n                    <ng-container *ngIf="customButtonFlagVal?.flag == true  && customButtonFlagVal?.tooltipflag != true"\n                        class="filterForTexticon">\n                        <ng-container *ngFor="let bt of customButtonFlagVal.buttons;let i = index"\n                            class="add_custom_button">\n                            <button mat-raised-button color="primary" type="button" color="primary" class="add_button"\n                                (click)="CustomButtonListen(bt)">\n                                {{bt.label}}</button> &nbsp;\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf="customButtonFlagVal?.flag == true && customButtonFlagVal?.tooltipflag == true"\n                        class="filterForTexticon">\n                        <ng-container *ngFor="let bt of customButtonFlagVal.buttons;let i = index"\n                            class="add_custom_button">\n                            <button matTooltip="{{bt.tooltip}}" mat-raised-button color="primary" type="button"\n                                color="primary" class="add_button" (click)="CustomButtonListen(bt)">\n                                {{bt.label}}</button> &nbsp;\n                        </ng-container>\n                    </ng-container>\n                </div>\n\n\n\n\n\n                \x3c!-- for button search  --\x3e\n                <div class="buttonsearch_div">\n                    <ng-container class="filterForTexticon"\n                        *ngIf=" search_settingsval != null && search_settingsval.buttonsearch != null ">\n                        <ng-container *ngFor="let button of search_settingsval.buttonsearch;let i= index">\n\n                            <button mat-raised-button color="primary" class="add_button search_btn_class{{i}}"\n                                (click)="openBottomSheetForSearch(button,i)">{{button.label}}\n                            </button>\n                        </ng-container>\n                    </ng-container>\n                </div>\n\n                \x3c!-- *ngIf=" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || buttonSearchData[i].value != null " --\x3e\n\n\n                \x3c!-- buttonvSearch Data div --\x3e\n                <div class="buttonSearchDatacls_div">\n                    <ng-container class="buttonSearchDatacls"\n                        *ngIf="buttonSearchData != null && buttonSearchData.length >0">\n                        \x3c!-- <span>{{buttonSearchData | json}}</span> --\x3e\n                        <div *ngFor="let bs of buttonSearchData;let i =index">\n                            <div *ngIf="bs.field == search_settingsval.buttonsearch[bs.key].field">\n\n                                <h3 class="search_settingsval_bs_cls"\n                                    *ngIf=" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || (bs.field == search_settingsval.buttonsearch[bs.key].field && bs.value.length > 0)">\n                                    {{search_settingsval.buttonsearch[bs.key].label}} :</h3>\n\n                                <mat-chip-list class="example-chip" cdkDropList cdkDropListOrientation="horizontal">\n                                    <mat-chip class="example-box" cdkDrag *ngFor="let item of bs.value;let j = index">\n                                        {{item.name}}\n                                        <mat-icon style="cursor: pointer;" matChipRemove\n                                            (click)="clearButtonSearchChips(bs,i,item,j)">cancel</mat-icon>\n                                    </mat-chip>\n                                </mat-chip-list>\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n                <br />\n\n                <span *ngIf="click_to_add_ananother_pageval !=null">\n                    <button mat-raised-button color="primary" class="add_button"\n                        [routerLink]="click_to_add_ananother_pageval">Add</button>\n                </span>\n            </mat-toolbar-row>\n        </div>\n\n        <div class="recordflagcls" *ngIf="recordFoundFlag == true && libdataval.recordfounddata != null">\n            <div class="recorddatacls" [innerHTML]="libdataval?.recordfounddata"></div>\n        </div>\n\n\n\n        <ng-container\n            *ngIf="selection.selected !=null && selection.selected.length!=null && selection.selected.length>0">\n            <span class="multipledeleteandupdatebuttan">\n\n                <button *ngIf="libdataval.hidedeletemany==null || libdataval.hidedeletemany==false" matTooltip="Delete"\n                    mat-raised-button (click)="deletemultiple()"> Delete </button>\n                <button *ngIf="libdataval.hideupdatemany==null || libdataval.hideupdatemany==false"\n                    matTooltip="Update Status" mat-raised-button (click)="managestatusmultiple()"> Update Status\n                </button>\n                <ng-container\n                    *ngIf="libdataval!=null && libdataval.customselectbuttons!=null && libdataval.customselectbuttons.length>0">\n                    \x3c!-- has hhh  --\x3e\n                    <ng-container *ngFor="let cbtns of libdataval.customselectbuttons">\n\n                        <button class="customselbtn" matTooltip="{{cbtns?.tooltip}}" mat-raised-button\n                            (click)="clickmultipleselectoption(cbtns)">\n                            {{cbtns.label}} </button>\n                    </ng-container>\n\n                </ng-container>\n\n            </span>\n        </ng-container>\n\n\n\n\n\n\n        <section *ngIf="loading == true" class="example-section">\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\n                [bufferValue]="bufferValue">\n            </mat-progress-bar>\n            <br />\n            <br />\n        </section>\n\n\n        <ng-container *ngIf="tableflag==0 && !paginationtypeFlag">\n            <section class="lib-pager-class">\n                <mat-label>\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\n\n                    <ng-container\n                        *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) || date_search_source_countval==0">\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\n                    </ng-container>\n                    <ng-container\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{date_search_source_countval}}\n                    </ng-container>\n\n\n\n                    of\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\n\n                </mat-label>\n                <span class="pageformfield">\n                    <mat-form-field>\n                        <mat-label>Page Size</mat-label>\n                        <input matInput [(ngModel)]="limitcondval.limit" type="number" min="1" max="100"\n                            (ngModelChange)="onFieldChangeforlimit($event)">\n                    </mat-form-field>\n\n                    <mat-form-field>\n                        <mat-label>Page No</mat-label>\n                        <input matInput min="1" [(ngModel)]="pageChangeValue" (ngModelChange)="onFieldChange($event)"\n                            min="1" max="pageCountArray.length" type="number">\n                    </mat-form-field>\n                </span>\n                <span>\n\n\n                    <span class="material-icons cursor" (click)="paging(-1,\'\')">\n                        skip_previous\n                    </span>\n\n                    <span class="material-icons cursor" (click)="paging(1,\'\')">\n                        skip_next\n                    </span>\n                </span>\n\n                \x3c!-- for pagination in drop down format--\x3e\n                <div class="selectpaginationCls" *ngIf="libdataval.selectPagingflag">\n                    <mat-label>Show Records per Page</mat-label>\n                    <mat-select (selectionChange)="paging($event.value,\'selectpaging\')"\n                        [(ngModel)]="limitcondval.limit">\n                        <mat-option *ngFor="let no of pages" [value]="no.val">\n                            {{no.name}}\n                        </mat-option>\n                    </mat-select>\n                </div>\n\n            </section>\n        </ng-container>\n        \x3c!-- <div>{{rescount}} d lemgth </div> --\x3e\n\n        <div class="tablewrapper" *ngIf="tableflag==0">\n\n            <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n                \x3c!-- <ng-container matColumnDef="select" *ngIf="tableflag==0">\n                    <th mat-header-cell *matHeaderCellDef>\n                        <mat-checkbox (change)="$event ? masterToggle() : null" [checked]="selection.hasValue() && isAllSelected()" [indeterminate]="selection.hasValue() && !isAllSelected()">\n                        </mat-checkbox>\n                    </th>\n                    <td mat-cell *matCellDef="let row" data-label="select">\n                        <mat-checkbox (click)="$event.stopPropagation()" (change)="$event ? selection.toggle(row) : null" [checked]="selection.isSelected(row)">\n                        </mat-checkbox>\n                    </td>\n                </ng-container> --\x3e\n                \x3c!-- <ng-container matColumnDef="#">\n                    <th mat-header-cell *matHeaderCellDef>\n                        #\n                    </th>\n                    <td mat-cell *matCellDef="let element; let i = index">{{limitcondval.skip+(i+1)}}</td>\n                </ng-container> --\x3e\n                \x3c!-- footer loop  --\x3e\n                <ng-container *ngFor="let footer of libdataval.footersettings">\n                    <ng-container matColumnDef="{{footer.key}}">\n                        <td mat-footer-cell *matFooterCellDef [attr.colspan]="footer.colspan">\n                            <span [innerHtml]="footer.data"></span>\n                        </td>\n                    </ng-container>\n                </ng-container>\n\n\n                <ng-container *ngFor="let column of columns" [matColumnDef]="column.columnDef">\n                    <ng-container *ngIf="column.columnDef== \'select\' ">\n                        <th mat-header-cell *matHeaderCellDef>\n                            <mat-checkbox (change)="$event ? masterToggle() : null"\n                                [checked]="selection.hasValue() && isAllSelected()"\n                                [indeterminate]="selection.hasValue() && !isAllSelected()">\n                            </mat-checkbox>\n                        </th>\n                    </ng-container>\n\n                    <ng-container *ngIf="column.columnDef != \'select\' ">\n                        <th mat-header-cell *matHeaderCellDef class="th-header-center">\n                            <span>\n\n                                <span *ngIf="libdataval.header_tooltip_array == null">\n                                    <span [innerHtml]="column.header"> </span>\n                                    <span></span>\n                                </span>\n\n                                <span *ngIf="libdataval.header_tooltip_array != null">\n                                    <span [innerHtml]="column.header" matTooltip="{{column?.tooltip}}"></span>\n                                </span>\n\n                                \x3c!-- {{column.header}} --\x3e\n                                <span *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'desc\'"\n                                    class="material-icons cursor float-right"\n                                    (click)="sorttable(column.columnDef,\'asc\')">\n                                    arrow_downward\n                                </span>\n                                <span class="material-icons cursor float-right"\n                                    *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'asc\'"\n                                    (click)="sorttable(column.columnDef,\'desc\')">arrow_upward\n                                </span>\n\n                                <span class="material-icons cursor"\n                                    *ngIf="sortdataval!=null && sortdataval.options !=null && sortdataval.options.indexOf(column.columnDef) >-1  && column.columnDef!=sortdataval.field"\n                                    (click)="sorttable(column.columnDef,\'desc\')">\n                                    unfold_more\n                                </span>\n                            </span>\n                        </th>\n                    </ng-container>\n\n                    <ng-container\n                        *ngIf="column.columnDef!= \'#\' && column.columnDef!= \'Actions\' && column.columnDef!= \'select\'  ">\n                        <td mat-cell *matCellDef="let row " [ngStyle]="styleCell(column,row) "\n                            data-title="{{column.header.split(\'<br/>\').join(\'\')}}  " class="td-cell-center ">\n\n                            <span *ngIf="column.columnDef==\'status\' ">{{ getstatus([column.cell(row)]) }}\n                                {{pdfFlag(row)}}</span>\n                            <span\n                                *ngIf="column.columnDef!=\'status\' && column.columnDef!=\'image\' && column.columnDef!=\'video\' ">\n\n                                <ng-container\n                                    *ngIf="column!=null && row[column.columnDef]!=null && !column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetime\') ">\n\n                                    \x3c!-- <span>=++++{{row[column.columnDef] |json}} = {{column.columnDef}}</span><br> --\x3e\n\n                                    <span\n                                        [innerHTML]="row[column.columnDef] | CustomPipe: column.columnDef:row[column.columnDef]"></span>\n\n                                </ng-container>\n\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetime\') && (row[column.columnDef] !=0 && row[column.columnDef] !=\'na\' && row[column.columnDef]\n                        !=\'NA\' ) ">\n                                    {{row[column.columnDef] | date}}\n                                </ng-container>\n\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetimeshort\') &&  column.columnDef.includes( \'datetime\') && (row[column.columnDef] !=0 && row[column.columnDef] !=\'na\' && row[column.columnDef] !=\'NA\'\n                        ) ">\n                                    {{row[column.columnDef] | date:\'medium\'}}\n                                </ng-container>\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetime\')  && column.columnDef.includes( \'datetimeshort\') && (row[column.columnDef] !=0 && row[column.columnDef] !=\'na\' && row[column.columnDef] !=\'NA\'\n                        ) ">\n                                    {{row[column.columnDef] | date:\'short\'}}\n                                </ng-container>\n\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && (column.columnDef.includes( \'date\') || column.columnDef.includes( \'datetime\') )&& (row[column.columnDef]==0 || row[column.columnDef]==\'na\' || row[column.columnDef]==\'NA\'\n                        ) ">\n                                    NA\n                                </ng-container>\n                                <ng-container *ngIf="column!=null && row[column.columnDef]==null ">\n                                    NA\n                                </ng-container>\n\n                            </span>\n                            \x3c!-- for image view  --\x3e\n                            <span\n                                *ngIf="column.columnDef==\'image\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "\n                                (click)="img_modal_view(row[column.columnDef]) "> <span class="module_imgblock ">\n                                    <img src="{{row[column.columnDef]}} " alt="{{row[column.columnDef]}} ">\n                                </span></span>\n                            \x3c!-- for video view --\x3e\n                            <span\n                                *ngIf="column.columnDef==\'video\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "><span\n                                    class="module_videoblock " (click)="fetchvideo(row) ">\n                                    <img class="videothumbnailcls"\n                                        src=\'https://awsbackend-dev-patient-files-test.s3.amazonaws.com/icon-videoplay.png\'>\n                                    <img class="videovicls"\n                                        src="https://img.youtube.com/vi/{{row[column.columnDef]}}/sddefault.jpg "\n                                        alt="{{row[column.columnDef]}} " (click)="fetchvideo(row) "></span>\n                            </span>\n\n                            <span\n                                *ngIf="column.columnDef==\'grab_url && grab_linkval!=null && grab_linkval[0]!=null\' ">{{grapurl(row[this.grab_linkval[0].field_name])}}</span>\n\n\n                            \x3c!--          <span *ngIf="sh==true ">--\x3e\n                            <span *ngIf="column.columnDef==\'contractssigned\' && sh==true && urlval !=null "\n                                class="cursor ">\n                                <i title="{{urlval[0].label}} " (click)="clickurl(row,urlval[0].url) "\n                                    class="material-icons ">cloud_download</i>\n                            </span>\n                            \x3c!--          </span>--\x3e\n                            \x3c!--          <span *ngIf="aud==true ">--\x3e\n                            <span *ngIf="column.columnDef==\'contractssigned\' && aud==true && urlval !=null ">\n                                <i title="{{urlval[1].label}} " (click)="clickurl(row,urlval[1].url) "\n                                    class="material-icons ">cloud_download</i>\n                            </span>\n\n                            \x3c!--// for grap url//--\x3e\n\n                            <span\n                                *ngIf=" grab_linkval!=null && column.columnDef==[grab_linkval.colom_name[0].col_name] "\n                                class="cursor ">\n                                <ng-container *ngFor="let item of grab_linkval.field ">\n                                    \x3c!-- <p>{{item | json}}</p> --\x3e\n                                    <button mat-button\n                                        (click)="copyText(row[grab_linkval.colom_name[0].field_name],item.url) ">{{item.label}}</button>\n                                </ng-container>\n                            </span>\n\n                            \x3c!-- <span\n                            *ngIf=" grab_linkval!=null && grab_linkval[0]!=null && column.columnDef==[grab_linkval[0].col_name] "\n                            class="cursor ">\n                            <button mat-button\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[1].url) ">{{grab_linkval[1].label}}</button>\n                        </span>\n                        <span\n                            *ngIf="grab_linkval!=null && grab_linkval[0]!=null &&column.columnDef==[ grab_linkval[0].col_name] ">\n                            <button mat-button\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[2].url) ">{{grab_linkval[2].label}}</button>\n                        </span> --\x3e\n\n                            \x3c!--          //grap url end//--\x3e\n\n\n                            \x3c!--          </span>--\x3e\n                            \x3c!-- <span *ngIf="column.columnDef==\'contractssigned\' ">\n            <span *ngFor="let item of urlval " class="cursor ">\n            <i title="{{item.label}} " (click)="clickurl(row,item.url) " class="material-icons ">cloud_download</i>\n          </span>\n          </span>--\x3e\n                        </td>\n                    </ng-container>\n                    <ng-container *ngIf="column.columnDef== \'#\' ">\n                        <td mat-cell *matCellDef="let element; let i=index ">{{limitcondval.skip+(i+1)}}\n                        </td>\n\n                    </ng-container>\n\n                    <ng-container *ngIf="column.columnDef== \'select\' ">\n                        <td mat-cell *matCellDef="let row" data-label="select">\n                            <mat-checkbox (click)="$event.stopPropagation();checkedlist()"\n                                (change)="$event ? selection.toggle(row) : null" [checked]="selection.isSelected(row)">\n                            </mat-checkbox>\n                        </td>\n                    </ng-container>\n\n                    \x3c!-- action buttons start here --\x3e\n                    <ng-container *ngIf="column.columnDef== \'Actions\' ">\n                        <td mat-cell *matCellDef="let row " data-label="Actions " class="td-cell-center ">\n                            <div class="actionbuttonwrapper">\n                                <div class="button_div_custom_cls">\n\n                                    \x3c!-- loader --\x3e\n\n                                    <section class="example-section example-section-button-1 ">\n                                        <mat-progress-bar *ngIf="loaderrow!=null && loaderrow==row._id "\n                                            class="example-margin " [color]="color " [mode]="mode " [value]="value "\n                                            [bufferValue]="bufferValue ">\n                                        </mat-progress-bar>\n                                    </section>\n\n                                    \x3c!-- note block --\x3e\n                                    <ng-container *ngIf="libdataval.notes!=null ">\n                                        <button mat-raised-button color="primary" class="notebtncls"\n                                            matBadgeColor="warn" matBadge="{{row.notescount}}"\n                                            matTooltip="{{libdataval?.notes?.tooltip }}" (click)="opennotes(row)">\n                                            <span class="notelabelc"> {{libdataval.notes.label }}</span>\n                                            \x3c!-- <span class="notebracket1">(</span> --\x3e\n                                            \x3c!-- <span class="notecountc"  matBadgeColor="warn" matBadge="{{row.notescount}}"></span> --\x3e\n                                            \x3c!-- <span class="notebracket2">)</span> --\x3e\n                                        </button>\n                                    </ng-container>\n\n                                    \x3c!--custom buttions block --\x3e\n\n                                    <ng-container\n                                        *ngIf="libdataval !=null && libdataval.custombuttons !=null && libdataval.custombuttons.length>0 ">\n                                        <ng-container\n                                            *ngFor="let custombutton of libdataval.custombuttons; let cb=index">\n                                            <section class="custombutton{{cb}} {{custombutton?.classname}}">\n                                                <ng-container\n                                                    *ngIf="custombutton.type==\'listner\' && (custombutton.cond==null  || (row[custombutton.cond]==custombutton.condval) ) ">\n                                                    \x3c!-- ss {{row[\'status\']}} --\x3e\n                                                    <button mat-raised-button color="primary"\n                                                        matTooltip="{{custombutton?.tooltip }}"\n                                                        matTooltipClass="listnertooltipcls"\n                                                        (click)="custombuttonlistner(row,custombutton)">{{custombutton.label\n                                                        }}</button>\n                                                </ng-container>\n\n                                                <ng-container *ngIf="custombutton.type==\'externallink\'">\n                                                    <ng-container\n                                                        *ngIf="custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                                        <a target="_blank" href="{{custombutton.link}}">\n                                                            <button mat-raised-button\n                                                                matTooltipClass="externallinktooltipcls"\n                                                                matTooltip="{{custombutton?.tooltip}}"\n                                                                color="primary">{{custombutton.label}}</button>\n                                                        </a>\n                                                    </ng-container>\n\n                                                    <ng-container\n                                                        *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n\n                                                        <button mat-raised-button color="primary"\n                                                            matTooltip="{{custombutton?.tooltip }}"\n                                                            matTooltipClass="parambtntooltipcls"\n                                                            (click)="openextlinkwithparam(custombutton,row)">{{custombutton.label\n                                                            }}</button>\n\n                                                    </ng-container>\n\n                                                </ng-container>\n                                                <ng-container *ngIf="custombutton.type==\'internallink\'">\n                                                    <ng-container\n                                                        *ngIf="custombutton.toggle == null && custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                                        <button mat-raised-button color="primary"\n                                                            matTooltip="{{custombutton?.tooltip }}"\n                                                            (click)="openinternallink(custombutton)">{{custombutton.label\n                                                            }}</button>\n                                                    </ng-container>\n                                                    <ng-container\n                                                        *ngIf="custombutton.toggle != null && custombutton.toggle == \'delete\' && custombutton.toggle!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                                        <button mat-raised-button color="primary"\n                                                            (click)="deletedata(row)">{{custombutton.label}}</button>\n                                                    </ng-container>\n\n                                                    <ng-container\n                                                        *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n\n                                                        <button mat-raised-button color="primary"\n                                                            matTooltip="{{custombutton?.tooltip }}"\n                                                            (click)="openinternallinkwithparam(custombutton,row)">{{custombutton.label\n                                                            }}</button>\n\n                                                    </ng-container>\n\n                                                </ng-container>\n                                                <ng-container *ngIf="custombutton.type==\'action\'">\n                                                    <ng-container\n                                                        *ngIf="custombutton.datatype==\'local\' && custombutton != null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                                        <button mat-raised-button color="primary"\n                                                            matTooltip="{{custombutton?.tooltip }}"\n                                                            (click)="opencustombuttonactionlocaldata(custombutton,row)">{{custombutton.label\n                                                            }}</button>\n                                                    </ng-container>\n                                                    <ng-container\n                                                        *ngIf="custombutton.datatype==\'api\' && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                                        <button mat-raised-button color="primary"\n                                                            matTooltip="{{custombutton?.tooltip}}"\n                                                            (click)="opencustombuttonactionapidata(custombutton,row)">{{custombutton.label\n                                                            }}</button>\n                                                    </ng-container>\n\n                                                </ng-container>\n\n                                            </section>\n\n                                        </ng-container>\n                                    </ng-container>\n                                </div>\n\n\n\n                                <span class="actionbuttonwrapperspan"\n                                    *ngIf="selection.selected.length==null || selection.selected.length==0">\n                                    <span *ngIf="libdataval.hideeditbutton==null || libdataval.hideeditbutton==false"\n                                        class="cursor" (click)="editdata(row)">\n                                        <i class="material-icons" matTooltip="{{staticTooltip.edit}}">\n                                            edit\n                                        </i>\n                                    </span>\n\n                                    \x3c!--For modern browsers--\x3e\n                                    <span\n                                        *ngIf="libdataval.hidedeletebutton==null || libdataval.hidedeletebutton==false"\n                                        class="cursor" (click)="deletedata(row)">\n                                        <i class="material-icons" matTooltip="{{staticTooltip.delete }}">\n                                            delete_outline\n                                        </i>\n                                    </span>\n\n                                    \x3c!--For modern browsers--\x3e\n                                    <span *ngIf="libdataval.hideviewbutton==null || libdataval.hideviewbutton==false"\n                                        class="cursor" (click)="viewdata(row)">\n                                        <i class="material-icons" matTooltip="{{staticTooltip.preview }}">\n                                            remove_red_eye\n                                        </i>\n                                    </span>\n\n                                    \x3c!--For modern browsers--\x3e\n                                    <span class="cursor"\n                                        *ngIf="libdataval.hidestatustogglebutton==null || libdataval.hidestatustogglebutton==false"\n                                        (click)="managestatus(row)">\n                                        <i class="material-icons" matTooltip="{{staticTooltip.changeStatus  }}">\n                                            toggle_off\n                                        </i>\n                                    </span>\n\n                                    <span *ngIf="custombuttonval!=null" class="cursor treeclass"\n                                        (click)="custombuttonfunc(row)">\n                                        <i class="material-icons treeclass"\n                                            matTooltip="{{staticTooltip.changeStatus }} ">\n                                            toggle_off\n                                        </i>\n                                    </span>\n\n                                    \x3c!-- hide status toggle with cond--\x3e\n                                    <span *ngIf="libdataval?.hidestatustoggle !=null &&libdataval?.hidestatustoggle?.flag != null && libdataval?.hidestatustoggle?.flag==true \n                                    && (row[libdataval.hidestatustoggle.cond] == libdataval.hidestatustoggle.condval )"\n                                        class="cursor treeclass" (click)="managestatus(row)">\n                                        <i class="material-icons treeclass"\n                                            matTooltip="{{libdataval?.hidestatustoggle?.tooltip }}">\n                                            toggle_off\n                                        </i>\n                                    </span>\n\n                                    \x3c!-- artistxp preview start --\x3e\n                                    <span *ngIf="previewFlug==true" class="cursor treeclass"\n                                        (click)="artistxpPreview(row)">\n                                        <i class="material-icons">perm_media</i>\n                                    </span>\n                                    \x3c!-- artistxp preview end --\x3e\n\n                                </span>\n                            </div>\n                        </td>\n                    </ng-container>\n\n\n\n\n                </ng-container>\n\n\n\n\n\n                <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n                <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n\n                <tr mat-footer-row *matFooterRowDef="tableFooterColumns" colspan="2"></tr>\n\n            </table>\n\n        </div>\n\n        \x3c!--for pagination --\x3e\n        \x3c!-- <div>*ngIf="tableflag!=0"</div>\n        <div *ngIf="tableflag!=0"> jio </div> --\x3e\n\n        <mat-card *ngIf="tableflag!=0" class="noFoundText">\n            <div class="noFoundTextinner">\n                <span>Oops !</span>\n                <p>NO Record Found</p>\n            </div>\n        </mat-card>\n        \x3c!-- no record found block  --\x3e\n        <ng-container *ngIf="tableflag==0 && !paginationtypeFlag">\n            <section class="lib-pager-class">\n                <mat-label>\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\n\n                    <ng-container\n                        *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) ||  date_search_source_countval==0">\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\n                    </ng-container>\n                    <ng-container\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{date_search_source_countval}}\n                    </ng-container>\n\n\n\n                    of\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\n\n                </mat-label>\n                <span class="pageformfield">\n                    <mat-form-field>\n                        <mat-label>Page Size</mat-label>\n                        <input matInput min="1" [(ngModel)]="limitcondval.limit" type="number" max="100"\n                            (ngModelChange)="onFieldChangeforlimit($event)">\n                    </mat-form-field>\n\n                    <mat-form-field>\n                        <mat-label>Page No</mat-label>\n                        <input matInput min="1" [(ngModel)]="pageChangeValue" (ngModelChange)="onFieldChange($event)"\n                            min="1" max="pageCountArray.length" type="number">\n                    </mat-form-field>\n                </span>\n                <span>\n\n\n                    <span class="material-icons cursor" (click)="paging(-1,\'\')">\n                        skip_previous\n                    </span>\n\n                    <span class="material-icons cursor" (click)="paging(1,\'\')">\n                        skip_next\n                    </span>\n                </span>\n                \x3c!-- for pagination in drop down format--\x3e\n                <div class="selectpaginationCls" *ngIf="libdataval.selectPagingflag">\n                    <mat-label>Show Records per Page</mat-label>\n                    <mat-select (selectionChange)="paging($event.value,\'selectpaging\')"\n                        [(ngModel)]="limitcondval.limit">\n                        <mat-option *ngFor="let no of pages" [value]="no.val">\n                            {{no.name}}\n                        </mat-option>\n                    </mat-select>\n                </div>\n            </section>\n\n        </ng-container>\n\n\n        \x3c!-- new pagination block  --\x3e\n        <ng-container *ngIf="paginationtypeFlag && paginationtype==2 && newpagingcountFlag && tableflag==0">\n            <div class="paginationwrapper">\n                <span class="showingpaginationcls">Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\n                    <ng-container\n                        *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) ||  date_search_source_countval==0">\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\n                    </ng-container>\n                    <ng-container\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{date_search_source_countval}}\n                    </ng-container>\n\n\n\n                    of\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\n\n                    Results\n                </span>\n\n                <div class="paginationlistcon">\n                    <button *ngIf="pageChangeValue>1" mat-raised-button color="primary" class="pagefirst_button"\n                        (click)="paging(1,\'\')" matTooltipClass="pagebtntooltipcls"\n                        matTooltip="First Page">First</button>\n                    <button *ngIf="pageChangeValue>1" mat-raised-button color="primary" class="pageprev_button"\n                        (click)="paging(limitcondval.pagecount-1,\'\')" matTooltipClass="pagebtntooltipcls"\n                        matTooltip="Previous Page">Prev</button>\n\n                    <ng-container *ngFor="let item of pageCountArray;let i=index">\n                        <ng-container *ngIf="i<10 && (pageCountArray.length > newcurrentpagingVal+i-1)">\n\n                            \x3c!-- h{{i}}--{{newcurrentpagingVal+i-1}}--{{pageCountArray.length}} --\x3e\n\n\n                            \x3c!-- <span *ngIf=" (pageCountArray.length - limitcondval.pagecount) < 10" class="pagercls"\n                        [ngClass]="{\'active\': limitcondval.pagecount ===  limitcondval.pagecount+i-9}"\n                        (click)="paging(limitcondval.pagecount+i-9 ,\'\')">\n                        <span>\n                            \n                            {{ limitcondval.pagecount+i-9 }}\n                        </span>\n                    </span> --\x3e\n                            <span class="pagercls"\n                                [ngClass]="{\'active\': newcurrentpagingVal+i === limitcondval.pagecount}"\n                                (click)="paging(i+newcurrentpagingVal,\'\')">\n                                <span class="newpagingdatacls">\n                                    {{ i+newcurrentpagingVal }}\n                                </span>\n                            </span>\n                        </ng-container>\n\n\n                    </ng-container>\n                    <mat-label class="gotopagecls">Go to Page:</mat-label>\n                    <input type="number" [(ngModel)]="pageChangeValue" (ngModelChange)="onFieldChange($event)" min="1"\n                        max="{{lastpageCountArray}}">\n                    of {{lastpageCountArray}} Pages\n                    <button *ngIf="pageChangeValue!=lastpageCountArray" mat-raised-button color="primary"\n                        class="pagenext_button" (click)="paging(limitcondval.pagecount+1,\'\')"\n                        matTooltipClass="pagebtntooltipcls" matTooltip="Next Page">Next</button>\n\n                    <button *ngIf="pageChangeValue!=lastpageCountArray" mat-raised-button color="primary"\n                        class="pagelast_button" (click)="paging(lastpageCountArray,\'\')"\n                        matTooltipClass="pagebtntooltipcls" matTooltip="Last Page">Last</button>\n                </div>\n            </div>\n        </ng-container>\n        <section *ngIf="loading == true" class="example-section">\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\n                [bufferValue]="bufferValue">\n            </mat-progress-bar>\n            <br />\n            <br />\n        </section>\n\n\n    </mat-card>\n\n\n\n</div>\n\x3c!-- <div>{{ startDate111 }}</div>\n<mat-form-field>\n    <input matInput [matDatepicker]="picker1" placeholder="From Date" [(ngModel)]="startDate111">\n    <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n    <mat-datepicker  #picker1></mat-datepicker>\n</mat-form-field> --\x3e\n\n\x3c!-- <div>After Translet the word test is : {{"test" | languageTranslet}}</div> --\x3e\n\x3c!-- <div>{{"test"}}</div> --\x3e\n\x3c!-- <div>\n    <span>{{"Her knowledge of publishing trends, literary history, and books of every description and genre, however, filled rooms" | languageTranslet}}</span>\n    <br>\n    <span>{{"It is authorized to decide all cases of every description, arising under the constitution or laws of the United States" | languageTranslet}}</span>\n    <br>\n    <span>{{"For example, he wanted to be a member of as many clubs - of any description - as possible" |languageTranslet}}</span>\n    <br>\n    <span>{{"Academic excellence was matched with extra-curricular activities of every description - from drama through sport to foreign travel" | languageTranslet}}</span>\n    <br>\n    <span>{{"Superb apple pie with sultanas and cloves, interspersed with crusty bread sandwiches of every description" |languageTranslet}}</span>\n    <br>\n    <span>{{"being at least one —used to indicate that a logical proposition is asserted only of a subclass or certain members of the class denoted by the term which it modifies." | languageTranslet}}</span>\n    <br>\n    <span>{{"When some is used to modify a number, it is almost always a round number" | languageTranslet}}</span>\n    <br>\n    <span>{{"Middle English som, adjective & pronoun, from Old English sum; akin to Old High German sum some, Greek hamē somehow, homos same" | languageTranslet}}</span>\n    <br>\n    <span>{{"causing a specified feeling or condition" | languageTranslet}}</span>\n    <span>\n        {{ "The assessments of the autonomic nervous system, endothelial function, and Ankle-Brachial Index (ABI) are well-recognized tests to detect early complications in diabetic patients – diabetic neuropathy risk, cardiovascular risk, and peripheral artery disease. These assessments are recommended by the U.S. and International Medical Associations. Unfortunately, most of these assessments or exams are not routinely performed in daily clinical practice because of concerns about complex procedures, time consumption, and a high level of difficulty in reading and/or interpreting exam reports." | languageTranslet }}\n    </span>\n    <br>\n\n\n    \n    <span>\n        {{ "Our ANS testing medical device platform eliminates these concerns by offering an innovative medical device that provides physicians with new and easy to use tools that simplify complex procedures, significantly reduces the time required by technicians to perform the exams, and offers easy to read and interpret exam reports with clinical guidance support which is backed by studies and peer reviews. Lastly, our most recent innovation includes wireless transmission to increase patient and technician comfort." | languageTranslet }}\n    </span>\n</div> --\x3e',animations:[animations.trigger("detailExpand",[animations.state("collapsed",animations.style({height:"0px",minHeight:"0"})),animations.state("expanded",animations.style({height:"*"})),animations.transition("expanded <=> collapsed",animations.animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))])],styles:[".container{background:#fff}.lib-pager-class{display:block;clear:both;float:right}body{font-family:Roboto,Arial,sans-serif;margin:0;display:none!important}.clear{clear:both;display:block}.float-right{float:right;display:inline;clear:none}.pad-gap{margin-left:18px}.basic-container{padding:30px}.version-info{font-size:8pt;float:right}table{width:100%;color:red}th.mat-sort-header-sorted{color:#000}.cursor{cursor:pointer!important}.custom-modalbox{display:none}.module_imgblock{display:block;width:100px;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_imgblock img{width:100%;height:auto}.module_videoblock{display:block;width:100px;position:relative;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_videoblock img{width:100%;height:auto}.module_videoblock::after{content:'';display:block;width:30%;height:38%;background:url(image/video-play-arrow-png.png) 0 0/cover no-repeat;position:absolute;left:31%;top:30%}.tablewrapper tr td,.tablewrapper tr th{padding:5px}.close-btn-modal{float:right!important}.videothumbnailcls{height:50px;width:50px}.container .searchiconcls{height:55px;width:99%;background:#f5f5f5;padding:6px;margin:7px}.searchiconcls .iconcls{cursor:pointer;font-size:53px}.CustomButtonListen_div{padding:10px}.buttonsearch_div button{float:none}.buttonSearchDatacls_div{padding:10px}.searchbtncls{text-align:right}.searchbtncls button{float:none}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}.pagercls{cursor:pointer}.active{color:#00f}"]}]}],ListingComponent.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialog},{type:material.MatBottomSheet},{type:forms.FormBuilder},{type:router.Router},{type:i0.ComponentFactoryResolver},{type:i0.ViewContainerRef},{type:http.HttpClient},{type:platformBrowser.DomSanitizer},{type:snackBar.MatSnackBar},{type:i0.ElementRef},{type:ObservableserviceService}]},ListingComponent.propDecorators={onLiblistingChange:[{type:i0.Output}],onLiblistingButtonChange:[{type:i0.Output}],languageDataset:[{type:i0.Input}],setconvertToLanguage:[{type:i0.Input}],search_settings:[{type:i0.Input}],click_to_add_ananother_page:[{type:i0.Input}],limitcond:[{type:i0.Input}],date_search_source_count:[{type:i0.Input}],grab_link:[{type:i0.Input}],custombutton:[{type:i0.Input}],date_search_source:[{type:i0.Input}],sortdata:[{type:i0.Input}],date_search_endpoint:[{type:i0.Input}],url:[{type:i0.Input}],searchendpoint:[{type:i0.Input}],pdf_link:[{type:i0.Input}],searchList:[{type:i0.Input}],libdata:[{type:i0.Input}],datasource:[{type:i0.Input}],datacollection:[{type:i0.Input}],skip:[{type:i0.Input}],detail_datatype:[{type:i0.Input}],detail_skip_array:[{type:i0.Input}],sourcedata:[{type:i0.Input}],modify_header_array:[{type:i0.Input}],deleteendpoint:[{type:i0.Input}],updateendpoint:[{type:i0.Input}],apiurl:[{type:i0.Input}],updatetable:[{type:i0.Input}],jwttoken:[{type:i0.Input}],statusarr:[{type:i0.Input}],emailarray:[{type:i0.Input}],editroute:[{type:i0.Input}],preview_artistxp:[{type:i0.Input}],customlistenbutton:[{type:i0.Input}],sort:[{type:i0.ViewChild,args:[material.MatSort]}],paginator:[{type:i0.ViewChild,args:[material.MatPaginator]}]},ListingComponent}(),Confirmdialog=(Hh.prototype.onNoClick=function(){this.dialogRef.close()},Hh.prototype.deletenote=function(n){var t=this;this.dialog.open(DeleteNotesModal,{height:"auto",panelClass:["custom-modalbox","delete-notes-modal"],disableClose:!0}).afterClosed().subscribe(function(e){if(void 0!==e&&"undefined"!=typeof e.response&&""!=e.response){var a={id:t.data.rowdata._id,index:n};t.data.loading1=n,t._apiService.postSearch(t.data.apiurl+t.data.notedata.deleteendpoint,t.data.jwttokenval,a).subscribe(function(e){"success"==e.status&&(t.data.listdata.splice(n,1),t.data.loading1=null)})}})},Hh.prototype.addnotes=function(){var a=this;if(null!=this.data.notesval&&""!=this.data.notesval){var e={id:this.data.rowdata._id,note:this.data.notesval,user:this.data.notedata.user};this.data.loading=!0,this._apiService.postSearch(this.data.apiurl+this.data.notedata.addendpoint,this.data.jwttokenval,e).subscribe(function(e){"success"==e.status&&(null==a.data.listdata&&(a.data.listdata=[]),a.data.listdata.unshift({_id:a.data.rowdata._id,notes:{userid:a.data.notedata.user,note:a.data.notesval,user:a.data.notedata.currentuserfullname,created_date:Date.now()}}),a.data.notesval="",a.data.loading=null)})}else this.data._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"Notes can't be blank !! "}})},Hh.prototype.gettypeof=function(e){return typeof e},Hh.prototype.sanitizeUrl=function(e,a,n){for(var t in a)e=e+"/"+n[a[t]];return this.sanitizer.bypassSecurityTrustResourceUrl(e)},Hh.prototype.handleDrop=function(t){console.log("handelDrop",t),document.getElementById("list"),t.preventDefault();var e=null==t.dataTransfer?t:t.dataTransfer,i=null==t.dataTransfer?1:0,l=null==e.files?e.target.files:e.files;console.log("handelDrop files",l);for(var a=function(a){var e=l[a];if(console.log("files++",e),"image/png"==l[a].type||"image/jpg"==l[a].type||"image/jpeg"==l[a].type){var n=new FileReader;n.onload=function(e){l[a].imageUrl=e.target.result},n.readAsDataURL(l[a])}l[a].loaded=0,l[a].loadfile=1,0==i&&(null==o.filearray[t.target.id.replace("drop","")]&&(o.filearray[t.target.id.replace("drop","")]=[]),o.filearray[t.target.id.replace("drop","")].push(l[a])),1==i&&(null==o.filearray[t.target.id.replace("filechoosermultiple","")]&&(o.filearray[t.target.id.replace("filechoosermultiple","")]=[]),o.filearray[t.target.id.replace("filechoosermultiple","")].push(l[a])),console.log("files",l)},o=this,n=0;n<l.length;n++)a(n);return!1},Hh.prototype.uploadfile=function(a){console.log("upppp",a);var n=new FileReader,t=this.filearray[a.name];console.log("this.filearray",this.filearray),t.uploaded=2,n.onloadend=function(e){fetch(a.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:a.prefix+t[0].name.split(" ").join(""),type:t.type,path:a.path,bucket:a.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([n.result],{type:t.type})})}).then(function(){t.uploaded=1,t.loadfile=1,a.loaded=null,t.fileservername=a.prefix+t[0].name.split(" ").join("")})},console.log("file",t),n.readAsArrayBuffer(t[0])},Hh.decorators=[{type:i0.Component,args:[{selector:"confirmdialog",template:'<div class="maindialog maindialognew">\n    <span (click)="onNoClick()" style="float: right; cursor: pointer;" class="close-btn-modal material-icons">\n        close\n    </span>\n\n    <div class="dialoghead" *ngIf="data.preview != true">\n        <h1 mat-dialog-title *ngIf="data!=null && data.message!=null">Hey !</h1>\n        <h1 mat-dialog-title *ngIf="data!=null && data.data!=null && data.data[0]==null">Details </h1>\n        <h1 mat-dialog-title *ngIf="data!=null  && data.data!=null &&  data.data.message!=null">{{data.data.message}}\n        </h1>\n        <h1 class="preview_{{data?.headerData?.class}}" mat-dialog-title\n            *ngIf="data!=null && data.headerData != null && data.headerData.header != null">\n            {{data?.headerData?.header}}\n        </h1>\n\n        <div mat-dialog-content>\n            <p *ngIf="data!=null && data.message!=null">{{data.message}}</p>\n\n            <ng-container *ngIf="data.notes!=null && data.notes==true">\n                \x3c!-- <ng-container *ngFor="let note of data.listdata;"> --\x3e\n                <mat-list>\n                    <div mat-subheader>\n                        <ng-container *ngIf="data.notedata.header !=null && data.rowdata[data.notedata.header]!=null">\n                            <span class="notesheader">Notes for : {{data.rowdata[data.notedata.header]}} </span>\n                        </ng-container>\n                    </div>\n                    \x3c!-- <section class="example-section">\n                        <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                            [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                        </mat-progress-bar>\n                        <br />\n                        <br />\n                    </section> --\x3e\n                    <mat-list-item *ngFor="let note of data.listdata;let notej=index;">\n                        \x3c!-- <p>{{note.notes | json}}</p> --\x3e\n\n                        <span class="material-icons">\n                            notes\n                        </span>\n                        <div mat-line>\n                            {{note.notes.note }}\n                        </div>\n                        \x3c!-- <div mat-line class="line-user"><span>By:</span>{{note.note.userid}}</div> --\x3e\n                        \x3c!-- <div mat-line class="line-user"><span>This User:</span>{{data.notedata.user}}</div> --\x3e\n                        <div mat-line class="line-user" *ngIf="note.notes != null && note.notes.user != null">\n                            <span>By:</span>{{note.notes.user}}\n                        </div>\n                        <div mat-line class="line-datetime"\n                            *ngIf="note.notes != null && note.notes.created_date != null"> <span>On:</span>\n                            {{note.notes.created_date | date:\'medium\' }}\n                        </div>\n                        <span style="cursor: pointer;" *ngIf="note.notes.userid==data.notedata.user"\n                            class="material-icons" (click)="deletenote(notej)" matTooltip="Delete Note">\n                            delete\n                        </span>\n                        <div mat-line *ngIf="data.loading1!=null && data.loading1== notej ">\n                            <section class="example-section">\n                                <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                                    [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                                </mat-progress-bar>\n                                <br />\n                                <br />\n                            </section>\n                        </div>\n                        <mat-divider></mat-divider>\n\n\n                    </mat-list-item>\n                    <mat-divider></mat-divider>\n                </mat-list>\n                <div>\n                    \x3c!-- notes management form --\x3e\n                    <textarea placeholder="Add Notes Here !! " rows="5" cols="25" [(ngModel)]="data.notesval">\n                    </textarea>\n\n                    \x3c!-- <div class="drop" >\n                        Browse or Drop Files Here\n\n                        <ng-container >\n                            <input type="file"  id="filechoosermultiple{{data.notedata.imagedata.name}}" multiple  (change)="handleDrop($event)"\n                                >\n                        </ng-container>\n                    </div>\n\n                    <div class="actionbtndiv">\n                        <mat-chip class="fileuploadbutton" style="cursor: pointer;"\n                            mat-raised-button\n                            (click)="uploadfile(data.notedata.imagedata)">Upload</mat-chip>\n                    </div> --\x3e\n\n                    <button mat-button (click)="addnotes()" matTooltip="Add Note">Add Note</button>\n\n                </div>\n                <section *ngIf="data.loading !=null && data.loading == true" class="example-section">\n                    <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                        [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                    </mat-progress-bar>\n                    <br />\n                    <br />\n                </section>\n                \x3c!-- </ng-container> --\x3e\n            </ng-container>\n\n\n\n            <div *ngIf="data!=null && data.data!=null">\n                <mat-card class="example-card" *ngFor="let item of data.data;">\n                    <mat-card-header id="dialogdata{{item[0]}}">\n                        \x3c!--<div mat-card-avatar class="example-header-image"></div>--\x3e\n                        <mat-card-title>{{item[0]}}</mat-card-title>\n                    </mat-card-header>\n                    \x3c!--<img mat-card-image src="https://material.angular.io/assets/img/examples/shiba2.jpg" alt="Photo of a Shiba Inu">--\x3e\n                    <mat-card-content id="dialogdata{{item[0]}}">\n                        \x3c!-- {{gettypeof(item[1])}} --\x3e\n                        <p class="innerhtml-content"\n                            *ngIf="(item[2]==null && gettypeof(item[1]) !=\'object\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) != \'object\')"\n                            [innerHtml]="item[1]">\n                        </p>\n                        <p class="innerhtml-content-video"\n                            *ngIf="(item[2]==null && gettypeof(item[1]) ==\'object\' && item[0]!=\'image_array\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) == \'object\' && (item[0]==\'video\' || item[0]=\'vd_array\' )) "\n                            [innerHtml]="item[1]">\n\n                        </p>\n                        <p class="innerhtml-content"\n                            *ngIf="item[2]!=null && item[2].includes(\'date\') && !item[2].includes(\'datetime\') ">\n                            {{item[1] | date}}\n                        </p>\n                        <p class="innerhtml-content"\n                            *ngIf="item[2]!=null && item[2].includes(\'date\') && item[2].includes(\'datetime\') ">\n                            {{item[1] | date:\'medium\' }}\n                        </p>\n                        \x3c!-- length : {{item[1].length}} {{gettypeof(item[1])}} --\x3e\n                        <p class="innerhtml-content"\n                            *ngIf=" gettypeof(item[1]) == \'object\' && item[1].length>1 &&  item[0]!==\'video\' && !item[0].includes(\'vd\')  ">\n                            \x3c!-- in ng for .. --\x3e\n                            <ng-container *ngFor="let arr of item[1]">\n                                <span\n                                    *ngIf=" !item[0].includes(\'image\') &&  (item[2]!=null &&   !item[2].includes(\'image\') ) && item[0] !=\'video_array\'"\n                                    [innerHtml]="arr"></span>\n                                <span\n                                    *ngIf="item[0].includes(\'image\') || (item[2]!=null && item[2].includes(\'image\')) ">\n                                    <img [src]="arr" [alt]="arr">\n                                </span>\n                                <span\n                                    *ngIf="item[0].includes(\'video_array\') || (item[2]!=null && item[2].includes(\'video_array\'))"\n                                    [innerHtml]="arr">\n\n                                </span>\n\n                            </ng-container>\n                        </p>\n                    </mat-card-content>\n                </mat-card>\n\n            </div>\n\n            \x3c!--for custom page in modal(mainly used for tree)--\x3e\n            <div *ngIf="data!=null && data.data!=null  && data.data[0]!=null &&  data.data[0].customdata!=null">\n\n                <iframe class="custom-datadiv" height="auto" [src]="data.data[0].customdata"></iframe>\n\n            </div>\n\n        </div>\n    </div>\n\n\n    <div *ngIf="data.preview == true">\n        <lib-singlepost [post1]="data.previewData.res[0].posts" [user]=""></lib-singlepost>\n    </div>\n\n\n\n\n\n    <div mat-dialog-actions *ngIf="data.preview != true && data.type==\'confirm\' ">\n        <button mat-button *ngIf="data.isconfirmation==null ||  data.isconfirmation!=false"\n            (click)="onNoClick()">CANCEL</button>\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>CONFIRM</button>\n    </div>\n\n</div>'}]}],Hh.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]},{type:platformBrowser.DomSanitizer},{type:material.MatDialog}]},Hh);function Hh(e,a,n,t,i){this._apiService=e,this.dialogRef=a,this.data=n,this.sanitizer=t,this.dialog=i,this.filearray=[],console.log("lib data in modal ",this.data),this.data.color="primary",this.data.mode="indeterminate",this.data.loadervalue=50,this.data.bufferValue=76}var DeleteNotesModal=(ti.prototype.onNoClick=function(){this.dialogRef.close()},ti.prototype.responseFunction=function(e){this.dialogRef.close({response:e})},ti.decorators=[{type:i0.Component,args:[{selector:"deletenotesConfirmationModal",template:'<mat-card class="deletenotesparentcls">\n    <mat-card-content class="deletenoteschildcls">\n        <h3> hey !!</h3>\n        <P>Are you sure you want to delete this note?</P>\n    </mat-card-content>\n    <ng-container>\n        \n        <mat-card-content class="deletenotescls">\n            <button mat-button class="liblist_btn_1" (click)="responseFunction(\'Yes\')">\n                Yes\n            </button>\n            <button mat-button class="liblist_btn_2" (click)="onNoClick()">\n                No\n            </button>\n        </mat-card-content>\n    </ng-container>\n</mat-card>'}]}],ti.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},ti);function ti(e,a){this.dialogRef=e,this.data=a}var BottomSheet=(xi.prototype.openLink=function(e){this.bottomSheetRef.dismiss(e)},xi.decorators=[{type:i0.Component,args:[{selector:"bottom-sheet",template:'<div class="bottom-sheet-header-toggle">\n    You are about to change status of these record(s)\n\n</div>\n<mat-nav-list class="navlist">\n    <a *ngFor="let item of data.items;" mat-list-item (click)="openLink(item)">\n        <span class="bottom-sheet{{item.name}}" mat-line>{{item.name}}</span>\n    </a>\n</mat-nav-list>'}]}],xi.ctorParameters=function(){return[{type:material.MatBottomSheetRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_BOTTOM_SHEET_DATA]}]}]},xi);function xi(e,a){this.bottomSheetRef=e,this.data=a}var ModalForButtomSearch=(Bi.prototype.chooseChipItem=function(e,a){this.selectedData.push(e),this.buttonSearchData.items.value.splice(a,1)},Bi.prototype.searchByItem=function(){this.data.flag="yes",this.data.selectedData=this.selectedData,this.bnottoRef.close(this.data)},Bi.prototype.remove=function(e,a){this.selectedData.splice(a,1),this.buttonSearchData.items.value.push(e)},Bi.prototype.reset=function(){this.searchVal="",this.buttonSearchData.items.value=[],this.buttonSearchData.items.value=this.allButtonData},Bi.prototype.searchByKeyword=function(e){var n=this;if(null!=this.searchVal&&""!=this.searchVal){this.loading_flag=!0;var a=this.buttonSearchData.items.serversearchdata.url+this.buttonSearchData.items.serversearchdata.endpoint,t={search_str:e,limit:50};this.apiService.postSearch1(a,t).subscribe(function(e){var a=e;"success"==a.status&&(n.loading_flag=!1,a=a.res.slice(0,50),n.matAutosearchData=a)})}else this.errmsg="Please Enter Keywords"},Bi.prototype.close=function(){this.data.flag="no",this.bnottoRef.close(this.data)},Bi.decorators=[{type:i0.Component,args:[{selector:"button-search-modal",template:'<div class="bottom-sheet-header-toggle">\n    <h2 style="text-align: center;"> {{buttonSearchData.items.label}}</h2>\n</div>\n\n\n<div class="selecteditemcls" *ngIf="selectedData.length >0">\n    <span>Selected :</span>\n    <div class="navlist" style="display: inline;">\n        <mat-chip class="example-box" *ngFor="let item of selectedData;let i=index;">{{item.name}}\n            <mat-icon style="cursor: pointer;" matChipRemove (click)="remove(item,i)">cancel</mat-icon>\n        </mat-chip>\n    </div>\n    <span>\n        <button mat-raised-button color="primary" class="add_button" (click)="searchByItem()">Search\n        </button>\n    </span>\n</div>\n<br><br>\n\n<div>\n    <mat-progress-bar mode="indeterminate" *ngIf="loading_flag == true"></mat-progress-bar>\n</div>\n<br><br>\n\n<div class="searchValcls">\n    <mat-form-field class="example-full-width">\n        <mat-label>Search By Keywords</mat-label>\n        <input matInput placeholder="filter" [(ngModel)]="searchVal" (keyup)="searchByKeyword(searchVal)" [matAutocomplete]="auto">\n    </mat-form-field>\n    <mat-autocomplete #auto="matAutocomplete">\n        <mat-option *ngFor="let item of matAutosearchData;let i = index" [value]="item.name"\n        (click)="chooseChipItem(item,i)">\n            {{item.name}}\n        </mat-option>\n    </mat-autocomplete>\n\n    \x3c!-- <span class="errcls" style="color: brown;" *ngIf="searchVal == null || searchVal == \'\'">{{errmsg}}</span> --\x3e\n    <span class=\'searchByKeywordcls\'>\n        <span style="cursor: pointer;" class="material-icons" (click)="reset()">\n            sync\n        </span>\n         \x3c!-- <button mat-raised-button color="primary" class="add_button" (click)="searchByKeyword(searchVal)">Search\n        </button> --\x3e\n    </span>\n\n</div>\n<br>\n\n<div class="chipdatacls">\n    <div style="display: inline;" *ngIf="buttonSearchData.items?.value.length >0">\n        <h2 style="text-align: center;">OR Choose From <span class="material-icons">\n                south\n            </span></h2>\n        <mat-chip-list class="example-chip" cdkDropList cdkDropListOrientation="horizontal">\n            <mat-chip class="example-box" cdkDrag *ngFor="let item of buttonSearchData.items?.value;let i =index">\n                <span style="cursor: pointer;" (click)="chooseChipItem(item,i)"> {{item.name}}</span>\n            </mat-chip>\n        </mat-chip-list>\n    </div>\n    <span class=\'norecordcls\' style="text-align: center;" *ngIf="buttonSearchData.items?.value.length == 0"><span\n           >No Record Found</span></span>\n</div>\n\n\n<div class="clrcls">\n    <span style="cursor: pointer;\n    float: right;\n    margin-bottom: -6px;" matTooltip="Clear" class="material-icons" (click)="close()">\n        clear\n    </span>\n</div>'}]}],Bi.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]},{type:ApiService}]},Bi);function Bi(e,a,n){this.bnottoRef=e,this.data=a,this.apiService=n,this.buttonSearchData={},this.selectedData=[],this.searchVal="",this.allButtonData=[],this.loading_flag=!1,this.errmsg="",this.matChipData=[],this.matAutosearchData=[],this.buttonSearchData={},this.buttonSearchData=a,this.allButtonData=a.items.value}var VideoPlayer=(Pi.prototype.onNoClick=function(){this.dialogRef.close()},Pi.decorators=[{type:i0.Component,args:[{selector:"videoplayer",template:'<lib-youtubeplayer [videoid]="data.previewData.video"></lib-youtubeplayer>\n<button type="button" mat-dialog-close class="closemodal">x</button>'}]}],Pi.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},Pi);function Pi(e,a){this.dialogRef=e,this.data=a}var ImageView=(Si.prototype.addnotes=function(){},Si.prototype.onNoClick=function(){this.dialogRef.close()},Si.decorators=[{type:i0.Component,args:[{selector:"image",template:'<mat-card class="imgmodalcls">\n    <mat-card-container>\n        <span>\n            <img src={{data.alldata}} height="100%" width="100%">\n        </span>\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>Close</button>        \n    </mat-card-container>\n    </mat-card>'}]}],Si.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},Si);function Si(e,a){this.dialogRef=e,this.data=a}var SnackbarComponent=(Vi.decorators=[{type:i0.Component,args:[{selector:"snack-bar-component-example-snack",template:'<span class="snack-bar-message">\n  {{data.errormessage}}\n</span>\n',styles:["\n    .example-pizza-party {\n      color: hotpink;\n    }\n  "]}]}],Vi.ctorParameters=function(){return[{type:snackBar.MatSnackBarRef},{type:undefined,decorators:[{type:i0.Inject,args:[snackBar.MAT_SNACK_BAR_DATA]}]}]},Vi);function Vi(e,a){this.snackBarRef=e,this.data=a}var ShowformComponent=(Object.defineProperty(Yi.prototype,"formdata",{set:function(e){this.formdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(Yi.prototype,"formfieldrefreshdata",{set:function(e){this.formfieldrefreshdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(Yi.prototype,"formfieldrefresh",{set:function(e){this.formfieldrefreshval=e},enumerable:!0,configurable:!0}),Object.defineProperty(Yi.prototype,"custombuttons",{set:function(e){this.customlistenbuttons=e},enumerable:!0,configurable:!0}),Object.defineProperty(Yi.prototype,"externaldatavalue",{set:function(e){this.externalDataVal=e},enumerable:!0,configurable:!0}),Object.defineProperty(Yi.prototype,"name",{get:function(){return this.formGroup.get("name")},enumerable:!0,configurable:!0}),Yi.prototype.ngOnInit=function(){this.createForm(0)},Yi.prototype.getFormVal=function(e){this.onFormFieldChange.emit({field:"formdata",fieldval:"formdataval",fromval:this.formGroup.value,buttonval:e,loading:this.loading})},Yi.prototype.CustomFlagFields=function(e,a){this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,customButtonVal:a,customfield:"add"})},Yi.prototype.CustomFlagFieldsRemove=function(e,a){this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,customButtonVal:a,customfield:"remove"})},Yi.prototype.unique=function(n,t){return n.filter(function(a,e){return n.findIndex(function(e){return e[t]===a[t]})===e})},Yi.prototype.GeneratePassword=function(e){var a=this;this.PasswordVal="",this.PasswordVal=this.makeid(10),setTimeout(function(){e.value=a.PasswordVal,a.formGroup.controls[e.name].patchValue(a.PasswordVal)},200)},Yi.prototype.onchoosefiles=function(e,a,n){void 0===n?document.getElementById("filechoosersingle"+a).click():document.getElementById("filechoosermultiple"+a).click()},Yi.prototype.copyGeneratePassword=function(e){var a="";if(null!=(a=null!=this.formGroup.controls[e.name].value&&"undefined"!=typeof this.formGroup.controls[e.name].value&&""!=this.formGroup.controls[e.name].value?this.formGroup.controls[e.name].value:"")&&""!=a&&void 0!==a){var n=document.createElement("textarea");n.value=a,document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Copy To Clipboard"}})}else this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Please Generate or Enter Password..!"}})},Yi.prototype.previewGeneratePassword=function(e){var a="";if(null!=(a=null!=this.formGroup.controls[e.name].value&&"undefined"!=typeof this.formGroup.controls[e.name].value&&""!=this.formGroup.controls[e.name].value?this.formGroup.controls[e.name].value:"")&&""!=a&&void 0!==a)switch(e.type){case"password":e.type="text",this.isPasswordVisible=!1;break;case"text":e.type="password",this.isPasswordVisible=!0}else this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Please Generate or Enter Password..!"}})},Yi.prototype.makeid=function(e){var a="P";e+=1;for(var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=n.length,i=0;i<e;i++)a+=n.charAt(Math.floor(Math.random()*t));return a},Yi.prototype.externalDataFunction=function(e,a){this.onFormFieldChange.emit({action:"externaldata",flag:"add",fieldVal:e,index:a,externalDataVal:this.externalDataVal})},Yi.prototype.externalDataEditFunction=function(e,a,n,t){"edit"==e&&this.onFormFieldChange.emit({action:"externaldata",flag:"edit",fieldVal:a,index:n,valind:t,externalDataVal:this.externalDataVal}),"remove"==e&&a.value.splice(t,1)},Yi.prototype.openCalendar=function(){this.dateflag=!0},Yi.prototype.navtocancel=function(){this.onFormFieldChange.emit({field:"formcancel",fromval:this.formGroup.value,loading:this.loading}),null!=this.formdataval.cancelroute&&this.router.navigate([this.formdataval.cancelroute])},Yi.prototype.ngAfterViewInit=function(){var a=this;setTimeout(function(){for(var e in a.formdataval.fields)"file"==a.formdataval.fields[e].type&&(a.elementRef.nativeElement.querySelector("#drop"+a.formdataval.fields[e].name).addEventListener("drop",a.handleDrop.bind(a)),a.elementRef.nativeElement.querySelector("#drop"+a.formdataval.fields[e].name).addEventListener("dragenter",a.cancel.bind(a)),a.elementRef.nativeElement.querySelector("#drop"+a.formdataval.fields[e].name).addEventListener("dragover",a.cancel.bind(a)))},1e3)},Yi.prototype.triggerevents=function(e){var a=this;setTimeout(function(){a.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("drop",a.handleDrop.bind(a)),a.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragenter",a.cancel.bind(a)),a.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragdragover",a.cancel.bind(a))},1e3)},Yi.prototype.cancel=function(e){return e.preventDefault(),!1},Yi.prototype.handleDrop=function(i){var l=this;document.getElementById("list"),i.preventDefault();for(var e=null==i.dataTransfer?i:i.dataTransfer,o=null==i.dataTransfer?1:0,r=null==e.files?e.target.files:e.files,a=function(t){var e=r[t];function a(n){if("file"==s.formdataval.fields[n].type&&(s.formdataval.fields[n].name==i.target.id.replace("drop","")||s.formdataval.fields[n].name==i.target.id.replace("filechoosersingle","")||s.formdataval.fields[n].name==i.target.id.replace("filechoosermultiple","")))if(console.log("if part",i.target.id,s.formdataval.fields[n]),null==s.formdataval.fields[n].multiple){if("image/png"!=r[t].type&&"image/jpg"!=r[t].type&&"image/jpeg"!=r[t].type||((a=new FileReader).onload=function(e){if(l.formdataval.fields[n].imageUrl=e.target.result,l.formdataval.fields[n].croppedimagearray=[],null!=l.formdataval.fields[n].aspectratio&&null!=l.formdataval.fields[n].imagecroppedratiolabel&&0<l.formdataval.fields[n].aspectratio.length)for(var a in l.formdataval.fields[n].aspectratio)l.formdataval.fields[n].croppedImage=[],l.formdataval.fields[n].imagecroppedratiolabel=l.formdataval.fields[n].imagecroppedratiolabel},a.readAsDataURL(r[t])),s.formdataval.fields[n].loaded=0,s.formdataval.fields[n].loadfile=1,0==o)if(null!=s.filearray[i.target.id.replace("drop","")])for(var e in s.formdataval.fields)s.formdataval.fields[e].name==i.target.id.replace("drop","")&&(s.deletefile(s.formdataval.fields[e],1),setTimeout(function(){l.filearray[i.target.id.replace("drop","")]=r[t]},0));else s.filearray[i.target.id.replace("drop","")]=r[t];else if(1==o)if(null!=s.filearray[i.target.id.replace("filechoosersingle","")])for(var e in s.formdataval.fields)s.formdataval.fields[e].name==i.target.id.replace("filechoosersingle","")&&(s.deletefile(s.formdataval.fields[e],1),setTimeout(function(){l.filearray[i.target.id.replace("filechoosersingle","")]=r[t]},0));else s.filearray[i.target.id.replace("filechoosersingle","")]=r[t]}else{var a;"image/png"!=r[t].type&&"image/jpg"!=r[t].type&&"image/jpeg"!=r[t].type||((a=new FileReader).onload=function(e){if(r[t].imageUrl=e.target.result,null!=l.formdataval.fields[n].aspectratio&&null!=l.formdataval.fields[n].imagecroppedratiolabel&&0<l.formdataval.fields[n].aspectratio.length)for(var a in r[t].croppedImage=[],r[t].aspectratio=l.formdataval.fields[n].aspectratio,r[t].imagecroppedratiolabel=l.formdataval.fields[n].imagecroppedratiolabel,r[t].croppedimagearray=[],r[t].aspectratio)null!=r[t].aspectratio&&null!=r[t].aspectratio[a]&&r[t].aspectratio[a]},a.readAsDataURL(r[t])),r[t].loaded=0,r[t].loadfile=1,null!=s.formdataval.fields[n]&&null!=s.formdataval.fields[n].imagefields&&0<s.formdataval.fields[n].imagefields.length&&(r[t].imagefields=s.formdataval.fields[n].imagefields),0==o&&(null==s.filearray[i.target.id.replace("drop","")]&&(s.filearray[i.target.id.replace("drop","")]=[]),s.filearray[i.target.id.replace("drop","")].push(r[t])),1==o&&(null==s.filearray[i.target.id.replace("filechoosermultiple","")]&&(s.filearray[i.target.id.replace("filechoosermultiple","")]=[]),s.filearray[i.target.id.replace("filechoosermultiple","")].push(r[t]))}}for(var n in console.log("files++",e),s.formdataval.fields)a(n)},s=this,n=0;n<r.length;n++)a(n);return!1},Yi.prototype.trackByFn=function(e){return e},Yi.prototype.trackByFnMultiple=function(e){return e},Yi.prototype.trackByFnMulti=function(e){return e},Yi.prototype.keyupVal=function(e,a,n,t,i,l,o,r){this.filearray[l][n].imagefields[t].value=r.target.value,null!=this.filearray[l][n].flds&&null!=this.filearray[l][n].flds[t]||(null==this.filearray[l][n].flds&&(this.filearray[l][n].flds=[]),this.filearray[l][n].flds[t]=[]),this.filearray[l][n].flds[t]={key:r.target.name,value:r.target.value}},Yi.prototype.checkValue=function(e,a,n,t,i,l,o){if(null!=this.filearray[l][n].flds&&null!=this.filearray[l][n].flds[t]||(null==this.filearray[l][n].flds&&(this.filearray[l][n].flds=[]),this.filearray[l][n].flds[t]=[]),null!=this.filearray[l][n].flds&&null!=this.filearray[l][n].flds[t]&&null!=this.filearray[l][n].flds[t].key&&this.filearray[l][n].flds[t].key==o)switch(this.filearray[l][n].flds[t].value){case!0:this.filearray[l][n].flds[t].value=!1;break;case!1:this.filearray[l][n].flds[t].value=!0}else this.filearray[l][n].flds[t]={key:o,value:!0}},Yi.prototype.uploadfile=function(a){var n=new FileReader,t=this.filearray[a.name];t.uploaded=2,this.fieldloading[a.name],a.name,n.onloadend=function(e){fetch(a.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:a.prefix+t.name.split(" ").join(""),type:t.type,path:a.path,bucket:a.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([n.result],{type:t.type})})}).then(function(){t.uploaded=1,t.loadfile=1,a.loaded=null,t.fileservername=a.prefix+t.name.split(" ").join("")})},console.log("filee++",t),n.readAsArrayBuffer(t)},Yi.prototype.uploadall=function(e){for(var a in this.filearray[e.name])null==this.filearray[e.name][a].bucket&&this.uploadfilemultiple(e,this.filearray[e.name][a],a)},Yi.prototype.deletefilemultipleall=function(e){for(var a in this.filearray[e.name])this.deletefilemultiple(e,this.filearray[e.name][a],a);setTimeout(function(){},3e3)},Yi.prototype.uploadfilemultiple=function(a,e,n){var t=new FileReader,i=this.filearray[a.name][n];null==this.filecount[a.name]&&(this.filecount[a.name]=0),this.filecount[a.name]++,i.uploaded=2,i.loadfile=1,this.fieldloading[a.name],a.name,t.onloadend=function(e){fetch(a.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:a.prefix+i.name.split(" ").join(""),type:i.type,path:a.path,bucket:a.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([t.result],{type:i.type})})}).then(function(){i.uploaded=1,i.loaded=null,i.fileservername=a.prefix+i.name.split(" ").join("")})},t.readAsArrayBuffer(i)},Yi.prototype.deletefile=function(n,t){var i=this;void 0===t&&(t="");var e={},a=this.filearray[n.name];e.file=n.prefix+a.name,e.path=n.path,e.bucket=n.bucket,this.filearray[n.name].uploaded=2,this.filearray[n.name].loadfile=0,this._apiService.postSearch(n.apideleteurl,this.formdataval.jwttoken,e).subscribe(function(e){var a;"success"==(a=e).status&&""==t&&(n.value={},i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),i.filearray[n.name].uploaded=null,i.filearray[n.name].loadfile=0,n.loadfile=0),"error"==a.status&&i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),i.loading=!1})},Yi.prototype.deletesinglefile=function(e,a){"image/png"==a||"image/jpg"==a||"image/jpeg"==a?(this.filearray[e.name].loadfile=0,e.imageUrl=null,e.loadfile=0):this.filearray[e.name].loadfile=0,this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}})},Yi.prototype.deletesinglefilefrommultiple=function(e,a,n){void 0===a&&(a=""),this.filearray[e.name][n].loadfile=0,null!=this.filearray[e.name]&&this.filearray[e.name].splice(n,1),this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}})},Yi.prototype.deletefilemultiple=function(n,e,t){var i=this;void 0===e&&(e="");var a={},l=this.filearray[n.name][t];this.filecount[n.name]--,a.file=n.prefix+l.name,a.path=n.path,a.bucket=n.bucket,l.uploaded=2,this._apiService.postSearch(n.apideleteurl,this.formdataval.jwttoken,a).subscribe(function(e){var a;"success"==(a=e).status&&(l.loadfile=0,i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),null!=i.filearray[n.name]&&(l.loadfile=0,i.filearray[n.name].splice(t,1))),"error"==a.status&&i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a})},function(e){i._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),i.loading=!1})},Yi.prototype.ngOnChanges=function(e){var t=this;for(var a in e)"formfieldrefreshdata"==a&&setTimeout(function(){if(null!=t.formfieldrefreshdataval){if(null!=t.formGroup&&null!=t.formfieldrefreshdataval.field&&null!=t.formGroup.controls[t.formfieldrefreshdataval.field]&&t.formGroup.controls[t.formfieldrefreshdataval.field].patchValue(t.formfieldrefreshdataval.value),null==t.formfieldrefreshdataval.field&&null!=t.formfieldrefreshdataval.formvaldata&&"object"==typeof t.formfieldrefreshdataval.formvaldata)for(var e in t.formfieldrefreshdataval.formvaldata)for(var a in null!=t.formGroup.controls[e]&&t.formGroup.controls[e].patchValue(t.formfieldrefreshdataval.formvaldata[e]),t.formdataval.fields){if(t.formdataval.fields[a].name==e&&"autocomplete"==t.formdataval.fields[a].type&&null!=t.formdataval.fields[a].multiple&&0!=t.formdataval.fields[a].multiple)for(var n in t.formdataval.fields[a].val)-1!=t.formfieldrefreshdataval.formvaldata[e].indexOf(t.formdataval.fields[a].val[n].key)&&t.setautocompletevalue(t.formdataval.fields[a].val[n],t.formdataval.fields[a]);if(t.formdataval.fields[a].name==e&&"autocomplete"==t.formdataval.fields[a].type&&(null==t.formdataval.fields[a].multiple||0==t.formdataval.fields[a].multiple))for(var n in t.formdataval.fields[a].val)t.formfieldrefreshdataval.formvaldata[e]==t.formdataval.fields[a].val[n].key&&t.setautocompletevalue(t.formdataval.fields[a].val[n],t.formdataval.fields[a]);if(t.formdataval.fields[a].name==e&&"checkbox"==t.formdataval.fields[a].type&&null!=t.formdataval.fields[a].multiple&&0!=t.formdataval.fields[a].multiple)for(var n in t.formdataval.fields[a].val)-1!=t.formfieldrefreshdataval.formvaldata[e].indexOf(t.formdataval.fields[a].val[n].key)?null!=t.formGroup.controls[e+"__"+n]&&t.formGroup.controls[e+"__"+n].patchValue(!0):null!=t.formGroup.controls[e+"__"+n]&&t.formGroup.controls[e+"__"+n].patchValue(!1)}"showfieldloader"==t.formfieldrefreshdataval.field&&(t.fieldloading=t.formfieldrefreshdataval.value),"addfromcontrol"==t.formfieldrefreshdataval.field&&t.managefromcontrol(t.formfieldrefreshdataval.value,"add"),"removefromcontrol"==t.formfieldrefreshdataval.field&&t.managefromcontrol(t.formfieldrefreshdataval.value,"remove"),"resetform"==t.formfieldrefreshdataval.field&&t.resetformdata(),"autocompletevisible"==t.formfieldrefreshdataval.field&&t.autocompletevisible(t.formfieldrefreshdataval)}},0)},Yi.prototype.autocompletevisible=function(e){for(var a=document.querySelectorAll('.libformclass input[ng-reflect-autocomplete]:not([ng-reflect-autocomplete="0"])'),n=0;n<=a.length;n++){var t=document.querySelectorAll('.libformclass input[ng-reflect-autocomplete]:not([ng-reflect-autocomplete="0"])')[n];null!=t&&(t.style.display=e.display)}},Yi.prototype.inputblur=function(e){this.formGroup.controls[e].markAsUntouched()},Yi.prototype.filterautocomplete=function(e,a){if(this.inputblur(e),null!=a.endpoint)this.autoquerychanged.next({val:e,data:a});else{var n=this.formGroup.controls[e].value;if(""==n||null==n)this.filerfielddata=[];else{var t=a.val.filter(function(e){return e.val.includes(n)});this.filerfielddata=[],this.filerfielddata=t}}},Yi.prototype.reloadautocomplete=function(e){this.currentautocomplete=e.name,this.filerfielddata=[]},Yi.prototype.autocompleteresetmatchip=function(){},Yi.prototype.removechipsingle=function(e,a){this.autocompletefiledvalue[e.name]=null,this.formGroup.controls[e.name].patchValue(""),this.inputblur(e.name),this.onFormFieldChange.emit({val:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,autocompletedata:e,autocompletefiledvalue:this.autocompletefiledvalue,removedDataSet:a})},Yi.prototype.removechipmultiple=function(e,a,n){console.log("val for multiple",a),this.autocompletefiledvalue[e.name].splice(a,1),0==this.autocompletefiledvalue[e.name].length&&(this.autocompletefiledvalue[e.name]=null),this.formGroup.controls[e.name].patchValue(""),this.inputblur(e.name),this.onFormFieldChange.emit({val:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,autocompletedata:e,autocompletefiledvalue:this.autocompletefiledvalue,removedDataSet:n,removedIndex:a})},Yi.prototype.setautocompletevalue=function(e,a){null==a.multiple||"undefined"==typeof a.multiple?null!=e&&null!=e.key&&(this.autocompletefiledvalue[a.name]=e.key):(null==this.autocompletefiledvalue[a.name]&&(this.autocompletefiledvalue[a.name]=[]),this.autocompletefiledvalue[a.name].push(e.key)),null==this.formGroup.controls[a.name]&&(this.formGroup.controls[a.name].patchValue(""),this.inputblur(a.name)),this.reloadautocomplete(a.name),this.formGroup.controls[a.name].patchValue(""),this.onFormFieldChange.emit({field:a,fieldval:this.formGroup.controls[a.name].value,fromval:this.formGroup.value,autocompletedata:e,autocompletefiledvalue:this.autocompletefiledvalue})},Yi.prototype.managefromcontrol=function(e,a){if("remove"==a&&null!=e.name)for(var n in this.formdataval.fields)this.formdataval.fields[n].name==e.name&&(this.formdataval.fields.splice(parseInt(n),1),this.formGroup.removeControl(e.name));if("remove"==a&&null==e.name&&1<e.length)for(var n in this.formdataval.fields)for(var t in e)this.formdataval.fields[n].name==e[t]&&(this.formdataval.fields.splice(parseInt(n),1),this.formGroup.removeControl(e[t]));if("add"==a)if(null!=e.after)for(var n in this.formdataval.fields)this.formdataval.fields[n].name==e.after&&(this.formdataval.fields.splice(parseInt(n)+1,0,e),this.createForm(1));else if("object"==typeof e)for(var i in e)for(var n in this.formdataval.fields)null!=e[i]&&null!=e[i].name&&this.formdataval.fields[n].name==e[i].after&&(this.formdataval.fields.splice(parseInt(n)+1,0,e[i]),this.createForm(1))},Yi.prototype.resetformdata=function(){this.formGroup.reset(),this.filearray=[],this.autocompletefiledvalue=[],this.currentautocomplete=""},Yi.prototype.timepickerchange=function(e){console.log("PPPP",e)},Yi.prototype.checkchange=function(e,a){if(console.log("timepicker",e,"  ",a),null!=this.formGroup.controls[e.name]&&this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value}),null!=e.dependent&&0<e.dependent.length){var n=0;for(var t in e.dependent)if(e.dependent[t].condval.toString()==this.formGroup.controls[e.name].value.toString())n++,this.formdataval.fields.splice(parseInt(a+parseInt(n)),0,e.dependent[t].field),this.createForm(1);else for(var i in this.formdataval.fields)this.formdataval.fields[i].name==e.dependent[t].field.name&&(this.formdataval.fields.splice(parseInt(i),1),this.formGroup.removeControl(e.dependent[t].field.name))}},Yi.prototype.createForm=function(e){var c=this;function a(e){if(null==m.formGroup.controls[m.formdataval.fields[e]]){var a=[],n=[];if(null!=m.formdataval.fields[e].value?(a.push(m.formdataval.fields[e].value),"numberformat"==m.formdataval.fields[e].type&&(m.phonenumberValue=m.formdataval.fields[e].value)):a.push(""),"file"==m.formdataval.fields[e].type)if(m.filearray[m.formdataval.fields[e].name]=m.formdataval.fields[e].value,null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple){for(var t in m.formdataval.fields[e].loadfile=1,m.filearray[m.formdataval.fields[e].name])null!=m.filearray[m.formdataval.fields[e].name][t]&&(m.filearray[m.formdataval.fields[e].name][t].uploaded=1,m.filearray[m.formdataval.fields[e].name][t].loadfile=1,null!=m.formdataval.fields[e].aspectratio&&null!=m.formdataval.fields[e].imagecroppedratiolabel&&""!=m.formdataval.fields[e].aspectratio&&0<m.formdataval.fields[e].aspectratio.length&&(m.filearray[m.formdataval.fields[e].name][t].aspectratio=m.formdataval.fields[e].aspectratio,m.filearray[m.formdataval.fields[e].name][t].imagecroppedratiolabel=m.formdataval.fields[e].imagecroppedratiolabel));null!=m.filearray[m.formdataval.fields[e].name]&&(m.filecount[m.formdataval.fields[e].name]=m.filearray[m.formdataval.fields[e].name].length)}else null!=m.filearray[m.formdataval.fields[e].name]&&(m.filearray[m.formdataval.fields[e].name].uploaded=1,m.formdataval.fields[e].loadfile=1,m.filearray[m.formdataval.fields[e].name].loadfile=1);if("checkbox"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple)if(null==m.formdataval.fields[e].value)a.push([]);else if(null!=m.formdataval.fields[e].val){var i=[];for(var l in m.formdataval.fields[e].val)null!=m.formdataval.fields[e].value&&m.formdataval.fields[e].value.includes(m.formdataval.fields[e].val[l].key)?i.push(!0):i.push(!1);a.push(i)}if(null!=m.formdataval.fields[e].validations&&0<m.formdataval.fields[e].validations.length)for(var o in m.formdataval.fields[e].validations)null==m.formdataval.fields[e].validations[o].message&&(m.formdataval.fields[e].validations[o].message="Not Valid !!"),"required"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.required),"match"==m.formdataval.fields[e].validations[o].rule&&m.formGroup.setValidators(m.checkPasswords),"autorequired"==m.formdataval.fields[e].validations[o].rule&&m.formGroup.setValidators(m.autorequired),"pattern"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.pattern(m.formdataval.fields[e].validations[o].value)),"maxLength"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.maxLength(m.formdataval.fields[e].validations[o].value)),"min"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.min(m.formdataval.fields[e].validations[o].value)),"max"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.max(m.formdataval.fields[e].validations[o].value)),"minLength"==m.formdataval.fields[e].validations[o].rule&&n.push(forms.Validators.minLength(m.formdataval.fields[e].validations[o].value));if("image"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].value&&setTimeout(function(){document.querySelector(".imgwrap_"+c.formdataval.fields[e].name+"_"+c.formdataval.fields[e].value).classList.add("imagechoiceactive")},4e3),"checkbox"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple){var r=!1;for(var s in m.formdataval.fields[e].val)r=!(null==m.formdataval.fields[e].value||!m.formdataval.fields[e].value.includes(m.formdataval.fields[e].val[s].key)),m.formGroup.addControl(m.formdataval.fields[e].name+"__"+s,new forms.FormControl(r,n));m.formGroup.addControl(m.formdataval.fields[e].name,new forms.FormControl({value:m.formdataval.fields[e].value,disabled:m.formdataval.fields[e].disabled},n))}else m.formGroup.addControl(m.formdataval.fields[e].name,new forms.FormControl({value:a[0],disabled:m.formdataval.fields[e].disabled},n));if("autocomplete"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple)for(var d in m.formdataval.fields[e].val)null!=m.formdataval.fields[e].value&&"object"==typeof m.formdataval.fields[e].value&&-1!=m.formdataval.fields[e].value.indexOf(m.formdataval.fields[e].val[d].key)&&m.setautocompletevalue(m.formdataval.fields[e].val[d],m.formdataval.fields[e]);"autocomplete"!=m.formdataval.fields[e].type||null!=m.formdataval.fields[e].multiple&&0!=m.formdataval.fields[e].multiple||null!=m.formdataval.fields[e].value&&m.setautocompletevalue(m.formdataval.fields[e].val[0],m.formdataval.fields[e])}}void 0===e&&(e=0),0==e&&(this.formGroup=this.formBuilder.group({}));var m=this;for(var n in this.formdataval.fields)a(n);setTimeout(function(){c.showform=!0,null==c.formdataval.submitactive&&(c.formdataval.submitactive=!0)},10)},Yi.prototype.setChangeValidate=function(){var a=this;this.formGroup.get("validate").valueChanges.subscribe(function(e){"1"==e?(a.formGroup.get("name").setValidators([forms.Validators.required,forms.Validators.minLength(3)]),a.titleAlert="You need to specify at least 3 characters"):a.formGroup.get("name").setValidators(forms.Validators.required),a.formGroup.get("name").updateValueAndValidity()})},Yi.prototype.setphonenumberValidate=function(e){e.target.value.length<14?this.numberFormatFlag=!0:this.numberFormatFlag=!1},Yi.prototype.chooseimg=function(e,a){document.querySelectorAll(".imgwrapper").forEach(function(e){e.classList.remove("imagechoiceactive")}),document.querySelector(".imgwrap_"+a.name+"_"+e.key).classList.add("imagechoiceactive"),this.formGroup.controls[a.name].patchValue(e.key)},Yi.prototype.checkPasswords=function(e){var a=e.controls.password.value,n=e.controls.confirmpassword.value;return null==n||""==n?(e.controls.confirmpassword.setErrors({required:!0}),{required:!0}):a!=n?(e.controls.confirmpassword.setErrors({match:!0}),{match:!0}):void 0},Yi.prototype.checkPassword=function(e){var a=e.value;return!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/.test(a)&&a?{requirements:!0}:null},Yi.prototype.autorequired=function(e){for(var a in e)if("autocomplete"==e[a].type&&null!=e[a].validations&&null!=e[a].validations[0]&&"autorequired"==e[a].validations[0].rule&&null==this.autocompletefiledvalue[e[a].name])return this.formGroup.controls[e.name].setErrors({autorequired:!0}),{autorequired:!0}},Yi.prototype.checkInUseEmail=function(n){var t=["tony@gmail.com"];return new rxjs.Observable(function(a){setTimeout(function(){var e=-1!==t.indexOf(n.value)?{alreadyInUse:!0}:null;a.next(e),a.complete()},4e3)})},Yi.prototype.getError=function(e){return this.formGroup.get("email").hasError("required")?"Field is required":this.formGroup.get("email").hasError("pattern")?"Not a valid emailaddress":this.formGroup.get("email").hasError("alreadyInUse")?"This emailaddress is already in use":""},Yi.prototype.getErrorPassword=function(){return this.formGroup.get("password").hasError("required")?"Field is required (at least eight characters, one uppercase letter and one number)":this.formGroup.get("password").hasError("requirements")?"Password needs to be at least eight characters, one uppercase letter and one number":""},Yi.prototype.onSubmit=function(e){var n=this;console.log("x",this.formGroup.value),this.post=e;var a={};for(var t in this.formGroup.controls){this.formGroup.controls[t].markAsTouched();var i=t.split("__");for(var l in this.formdataval.fields){if("file"==this.formdataval.fields[l].type&&null==this.formdataval.fields[l].multiple&&null!=this.filearray[this.formdataval.fields[l].name]){if(null!=this.filearray[this.formdataval.fields[l].name]&&null!=this.filearray[this.formdataval.fields[l].name].uploaded&&1==this.filearray[this.formdataval.fields[l].name].uploaded&&1==this.filearray[this.formdataval.fields[l].name].loadfile){var o={};if(("image/png"==this.filearray[this.formdataval.fields[l].name].type||"image/jpg"==this.filearray[this.formdataval.fields[l].name].type||"image/jpeg"==this.filearray[this.formdataval.fields[l].name].type)&&null!=this.formdataval.fields[l].aspectratio&&0<this.formdataval.fields[l].aspectratio.length){for(var r in o.aspectratio=this.formdataval.fields[l].aspectratio,this.formdataval.fields[l].croppedimagearray)delete this.formdataval.fields[l].croppedimagearray[r].file,delete this.formdataval.fields[l].croppedimagearray[r].base64;o.croppedimagearray=this.formdataval.fields[l].croppedimagearray}o.fileservername=this.filearray[this.formdataval.fields[l].name].fileservername,o.name=this.filearray[this.formdataval.fields[l].name].name,o.size=this.filearray[this.formdataval.fields[l].name].size,o.type=this.filearray[this.formdataval.fields[l].name].type,o.path=this.formdataval.fields[l].path,o.bucket=this.formdataval.fields[l].bucket,o.baseurl=this.formdataval.fields[l].baseurl,o.imagefields=this.formdataval.fields[l].imagefields,this.formGroup.controls[this.formdataval.fields[l].name].patchValue(o)}null!=this.filearray[this.formdataval.fields[l].name]&&0==this.filearray[this.formdataval.fields[l].name].loadfile&&(o={},this.formGroup.controls[this.formdataval.fields[l].name].patchValue(o))}if("file"==this.formdataval.fields[l].type&&null!=this.formdataval.fields[l].multiple&&1==this.formdataval.fields[l].multiple){var s=[];for(var d in this.filearray[this.formdataval.fields[l].name]){if(null!=this.filearray[this.formdataval.fields[l].name][d]&&1==this.filearray[this.formdataval.fields[l].name][d].uploaded){if(o={},("image/png"==this.filearray[this.formdataval.fields[l].name][d].type||"image/jpg"==this.filearray[this.formdataval.fields[l].name][d].type||"image/jpeg"==this.filearray[this.formdataval.fields[l].name][d].type)&&null!=this.filearray[this.formdataval.fields[l].name][d].aspectratio&&0<this.filearray[this.formdataval.fields[l].name][d].aspectratio.length){for(var r in o.aspectratio=this.filearray[this.formdataval.fields[l].name][d].aspectratio,o.croppedimagearray=this.filearray[this.formdataval.fields[l].name][d].croppedimagearray,this.filearray[this.formdataval.fields[l].name][d].croppedimagearray)delete this.filearray[this.formdataval.fields[l].name][d].croppedimagearray[r].base64,delete this.filearray[this.formdataval.fields[l].name][d].croppedimagearray[r].file;o.croppedimagearray=this.filearray[this.formdataval.fields[l].name][d].croppedimagearray}o.fileservername=this.filearray[this.formdataval.fields[l].name][d].fileservername,o.name=this.filearray[this.formdataval.fields[l].name][d].name,o.size=this.filearray[this.formdataval.fields[l].name][d].size,o.type=this.filearray[this.formdataval.fields[l].name][d].type,o.path=this.formdataval.fields[l].path,o.bucket=this.formdataval.fields[l].bucket,o.baseurl=this.formdataval.fields[l].baseurl,null!=this.formdataval.fields[l].imagefields&&0<this.formdataval.fields[l].imagefields.length&&null!=this.filearray[this.formdataval.fields[l].name][d].flds&&0<this.filearray[this.formdataval.fields[l].name][d].flds.length&&(o.imgfields=this.filearray[this.formdataval.fields[l].name][d].flds,o.flds=this.filearray[this.formdataval.fields[l].name][d].flds),s.push(o)}this.formGroup.controls[this.formdataval.fields[l].name].patchValue(s)}}if("autocomplete"==this.formdataval.fields[l].type&&(null!=this.autocompletefiledvalue&&null!=this.autocompletefiledvalue[this.formdataval.fields[l].name]&&this.formGroup.controls[this.formdataval.fields[l].name].patchValue(this.autocompletefiledvalue[this.formdataval.fields[l].name]),null!=this.autocompletefiledvalue&&null!=this.autocompletefiledvalue[this.formdataval.fields[l].name]&&this.formdataval.fields[l].validations,t==this.formdataval.fields[l].name&&null==a[t]&&(a[t]=this.autocompletefiledvalue[this.formdataval.fields[l].name])),1<i.length&&i[0]==this.formdataval.fields[l].name&&this.formdataval.fields[l].name!=t&&"checkbox"==this.formdataval.fields[l].type&&null!=this.formdataval.fields[l].multiple){if(console.log("aaaaff...",this.formGroup.controls[t].value,this.formdataval.fields[l].name),1==this.formGroup.controls[t].value)for(var c in this.formdataval.fields[l].val)this.formdataval.fields[l].val[c].key==i[1]&&(null==a[this.formdataval.fields[l].name]&&(a[this.formdataval.fields[l].name]=[]),a[this.formdataval.fields[l].name].push(i[1]));else for(var c in this.formdataval.fields[l].val)this.formdataval.fields[l].val[c].key==i[1]&&null==a[this.formdataval.fields[l].name]&&(a[this.formdataval.fields[l].name]=[]);this.formGroup.controls[this.formdataval.fields[l].name].patchValue(a[this.formdataval.fields[l].name])}t==this.formdataval.fields[l].name&&null==a[t]&&(a[t]=this.formGroup.controls[t].value)}}if(this.findInvalidControls(),this.formGroup.valid){this.loading=!0;var m=this.formdataval.apiUrl+this.formdataval.endpoint,f={};f.data=this.formGroup.value,null!=this.formdataval.secret&&null!=this.formdataval.jwttoken&&(f.secret=this.formdataval.secret,f.jwttoken=this.formdataval.jwttoken),null!=this.formdataval.endpoint&&""!=this.formdataval.endpoint?this._apiService.postSearch(m,this.formdataval.jwttoken,f).subscribe(function(e){var a;"success"==(a=e).status&&(n.onFormFieldChange.emit({field:"fromsubmit",fieldval:a.status,fromval:a}),n.formGroup.reset(),n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:n.formdataval.successmessage}}),n.formDirective.resetForm(),n.autocompletefiledvalue=[],n.filearray=[],null!=n.formdataval.redirectpath&&""!=n.formdataval.redirectpath&&"/"!=n.formdataval.redirectpath?n.router.navigate([n.formdataval.redirectpath]):n.loading=!1),"error"==a.status&&(n.onFormFieldChange.emit({field:"fromsubmit",fieldval:a.status,fromval:a}),n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:a}),n.loading=!1)},function(e){n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),n.onFormFieldChange.emit({field:"fromsubmitservererror",fieldval:"servererror",fromval:n.formGroup.value}),n.loading=!1}):(this.loading=!1,this.onFormFieldChange.emit({field:"fromsubmit",fieldval:"success",formdataval:this.formdataval,source:f,loading:this.loading,fromval:this.formGroup.value}))}else{for(var l in this.formdataval.fields)if(null!=this.autocompletefiledvalue&&null!=this.autocompletefiledvalue[this.formdataval.fields[l].name]){var u=!1;this.formGroup.controls[this.formdataval.fields[l].name].valid&&(u=!0),this.formGroup.controls[this.formdataval.fields[l].name].patchValue(""),1==u&&this.formGroup.controls[this.formdataval.fields[l].name].markAsUntouched()}this.onFormFieldChange.emit({field:"fromsubmiterror",fieldval:"validationerror",fromval:this.formGroup.value,loading:this.loading}),this.findInvalidControls(),this.scrollToFirstInvalidControl()}},Yi.prototype.findInvalidControls=function(){var e=[],a=this.formGroup.controls;for(var n in a)a[n].invalid&&e.push(n);return console.log("findInvalidControls",e),e},Yi.prototype.scrollToFirstInvalidControl=function(){var e=this.elementRef.nativeElement.querySelector("form .ng-invalid");window.scroll({top:this.getTopOffset(e),left:0,behavior:"smooth"})},Yi.prototype.getTopOffset=function(e){return null==e?0:e.getBoundingClientRect().top+window.scrollY-50},Yi.prototype.fileChangeEvent=function(e){this.imageChangedEvent=e},Yi.prototype.singleimageCropped=function(e,a,n,t){this.formdataval.fields[n].croppedImage[t]=e.base64,this.formdataval.fields[n].croppedimagearray[t]=e},Yi.prototype.multipleimageCropped=function(e,a,n,t,i,l){for(var o in l[i].croppedImage[t]=e.base64,l[i].croppedimagearray[t]=e,l[i].aspectratio)l[i].aspectratio[o]=Number(l[i].aspectratio[o])},Yi.prototype.imageLoaded=function(){},Yi.prototype.cropperReady=function(){},Yi.prototype.loadImageFailed=function(){},Yi.prototype.opensingleimagecrop=function(a){a.croppedimagearray=[],a.croppedImage=[];var e="https://"+a.value.bucket+".s3.amazonaws.com/"+a.value.path+a.value.fileservername;this.getImagetoDataURL(e,function(e){a.imageUrl=e,a.value=null})},Yi.prototype.opensingleimagecropformultiple=function(a){a.croppedimagearray=[],a.croppedImage=[];var e="https://"+a.bucket+".s3.amazonaws.com/"+a.path+a.fileservername;this.getImagetoDataURL(e,function(e){a.imageUrl=e})},Yi.prototype.getImagetoDataURL=function(e,a){var n=new XMLHttpRequest;n.onload=function(){var e=new FileReader;e.onloadend=function(){a(e.result)},e.readAsDataURL(n.response)},n.open("GET",e),n.responseType="blob",n.send()},Yi.decorators=[{type:i0.Component,args:[{selector:"lib-showform",template:'\x3c!--<mat-toolbar color="primary">\n  <span class="fill-remaining-space">My Reactive Form with Material</span>\n</mat-toolbar>--\x3e\n\n\n\n\n\n<section *ngIf="loading == true" class="example-section">\n    <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n    </mat-progress-bar>\n</section>\n<div class="container libformclass" *ngIf="showform; else forminfo" novalidate>\n\n    <form [formGroup]="formGroup" (ngSubmit)="onSubmit(formGroup.value)" class="form">\n\n        <ng-container *ngIf="formdataval.fields!=null && formdataval.fields.length>0">\n            <ng-container *ngFor="let grp of formdataval.groups ; let grpindex=index;">\n                \x3c!-- <h1>{{grp}} --//-- {{grpindex}}</h1> --\x3e\n                <div class="form-group {{grp}}">\n\n                    <ng-container *ngFor="let fields of formdataval.fields ; let ival=index;">\n                        <ng-container *ngIf="grp==fields.group">\n\n\n                            <div class="form_field_wrapper form_field_wrapper{{fields.name}}">\n                                <mat-card class="form_header_{{fields.name}}" *ngIf="fields.heading!=null && formGroup.controls[fields.name]!=null " [innerHTML]="fields.heading">\n                                </mat-card>\n                                <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'select\'  )" class="form-element form_field_{{fields.name}}">\n                                    \x3c!-- for select--\x3e\n                                    \x3c!-- <div>ff</div> --\x3e\n                                    <mat-label> Select {{fields.label}} </mat-label>\n                                    <mat-select (blur)="inputblur(fields.name)" (closed)="inputblur(fields.name)" (selectionChange)="checkchange(fields,ival)" [formControlName]="fields.name" [multiple]="fields.multiple?true:false">\n                                        <mat-option *ngFor="let data of fields.val" [value]="data.val"> {{data.name}}\n                                        </mat-option>\n                                    </mat-select>\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n\n                                </mat-form-field>\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'image\'  )" class="form-element form_field_{{fields.name}}">\n                                    <div>\n                                        <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                                        </mat-label>\n                                    </div>\n\n                                    <div>\n                                        <ng-container *ngFor="let imgvals of fields.val">\n                                            <span class="imgwrapper imgwrap_{{fields.name}}_{{imgvals.key}}">\n                                                <img (click)="chooseimg(imgvals,fields)" src="{{imgvals.image}}">\n                                            </span>\n                                        </ng-container>\n                                    </div>\n\n\n\n                                    <input (blur)="inputblur(fields.name)" type="hidden" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                                    <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                        <ng-container *ngFor="let valdidations of fields.validations">\n                                            <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                        </ng-container>\n                                    </mat-error>\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n                                </div>\n\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'checkbox\' && fields.multiple==null )" class="form-element form_field_{{fields.name}}">\n                                    \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                                    <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                                    </mat-label>\n                                    <mat-checkbox *ngIf="fields.multiple ==null && !fields.multiple" class=" example-margin" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" [formControlName]="fields.name" [labelPosition]="fields.labelPosition">\n                                        {{fields.label}}\n                                    </mat-checkbox>\n\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n                                </div>\n                                <div *ngIf="fields.name!=null && (fields.type==\'checkbox\' ) && fields.multiple !=null && fields.multiple==true " class="form-element form_field_{{fields.name}}">\n                                    \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                                    <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                                    </mat-label>\n\n                                    <ng-container *ngIf="fields.multiple !=null && fields.multiple">\n                                        <ng-container *ngFor="let vals of fields.val , let vi=index;">\n                                            <mat-checkbox class="example-radio-button" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" formControlName="{{fields.name}}__{{vi}}" [value]="vals.key">\n                                                {{vals.val}}\n                                            </mat-checkbox>\n                                            \x3c!-- <span></span> --\x3e\n\n                                        </ng-container>\n\n                                        <input (blur)="inputblur(fields.name)" type="hidden" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                                        <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n\n                                    </ng-container>\n\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    \x3c!-- <ng-container\n                            *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n\n                        </ng-container> --\x3e\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n\n                                </div>\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'radio\' )" class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n\n                                    <mat-radio-group aria-labelledby="example-radio-group-label" class="example-radio-group form_field_{{fields.name}}" [formControlName]="fields.name">\n                                        <mat-radio-button class=" example-radio-button" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" *ngFor="let vals of fields.val" [value]="vals.key">\n                                            {{vals.val}}\n                                        </mat-radio-button>\n                                    </mat-radio-group>\n\n                                    \x3c!--<ng-container *ngFor="let vals of fields.val">\n             <mat-checkbox class="form_field_{{fields.name}} example-radio-button" (blur)="inputblur(fields.name)"   [formControlName]="fields.name" [value]="vals.key">{{vals.val}}</mat-checkbox>\n\n         </ng-container>--\x3e\n\n\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n\n                                </div>\n\n                                <div>\n                                    <ng-container *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'numberformat\'">\n                                        <div class="add_form">\n                                            <div class="mat-form-field-wrapper">\n                                                <div class="phonenumber mat-form-field">\n                                                    <input appPhoneMask (blur)="inputblur(fields.name)" type="text" required minlength="14" [placeholder]="fields.label" (change)="checkchange(fields,ival)" [formControlName]="fields.name" [(ngModel)]="phonenumberValue">\n                                                    <label class="matlabel" [for]="fields.name">{{fields.label}}</label>\n                                                    <ng-container *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n\n                                                        <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                                            <mat-error>\n                                                                <ng-container *ngFor="let valdidations of fields.validations">\n                                                                    <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                                                </ng-container>\n                                                            </mat-error>\n                                                        </ng-container>\n                                                    </ng-container>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    </ng-container>\n\n                                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'email\' || fields.type==\'number\' || fields.type==\'text\' || fields.type == \'password\')" class="form-element form_field_{{fields.name}}">\n                                        <mat-label [innerHTML]="fields.label"></mat-label>\n\n\n                                        <input matInput (blur)="inputblur(fields.name)" [type]="fields.type" [placeholder]="fields.label" (change)="checkchange(fields,ival)" [formControlName]="fields.name">\n\n                                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                        <ng-container *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                            <mat-error>\n                                                <ng-container *ngFor="let valdidations of fields.validations">\n                                                    <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                                </ng-container>\n                                            </mat-error>\n                                        </ng-container>\n\n                                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                        </ng-container>\n\n                                    </mat-form-field>\n\n\n                                    <div class="passbuttoncls" *ngIf="formGroup.controls[fields.name] != null && (fields.type == \'password\'||fields.type == \'text\' ) && \n                        fields.passwordflag == true ">\n                                        <button mat-raised-button color="accent" type="button" (click)="GeneratePassword(fields)" class="GeneratePasswordcls" matTooltip="Generate Password">\n                                            Generate Password</button> &nbsp;\n\n                                        <button mat-raised-button color="accent" type="button" (click)="copyGeneratePassword(fields)" class="GeneratePasswordcls" matTooltip="Copy Password">\n                                            Copy Password</button> &nbsp;\n\n                                        <span *ngIf="isPasswordVisible == true" class="material-icons" (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Show Password">\n                                            remove_red_eye\n                                        </span>\n\n                                        <span *ngIf="isPasswordVisible == false" class="material-icons" (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Hide Password">\n                                            visibility_off\n                                        </span>\n                                    </div>\n\n                                    <div class="passbuttoncls" *ngIf="formGroup.controls[fields.name] != null && customlistenbuttons?.flag == true">\n\n\n                                        <div *ngFor="let item of customlistenbuttons.buttons">\n\n                                            <div *ngIf="fields.type == item.type && fields?.custombuttonflag == true">\n                                                <span>\n                                                    <button mat-raised-button color="accent" type="button"\n                                                        (click)="CustomFlagFields(fields,item)"\n                                                        class="CustomFlagFieldscls">\n                                                        {{item?.labeladd}}<span class="material-icons">\n                                                            add\n                                                        </span></button> &nbsp;\n\n                                                <button mat-raised-button color="accent" type="button" (click)="CustomFlagFieldsRemove(fields,item)" class="CustomFlagFieldscls">\n                                                        {{item?.labelremove}}<span class="material-icons">\n                                                            remove\n                                                        </span></button>\n                                                </span>\n                                            </div>\n                                        </div>\n\n                                    </div>\n\n                                    <div *ngIf=" fields?.customheadingflag != null &&  fields?.customheadingflag == true">\n                                        <div *ngIf="fields?.customheadingtitle != null">\n                                            <mat-card class="customheadingtitlecls">\n                                                {{fields?.customheadingtitle}}</mat-card>\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                                <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'textarea\' " class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n                                    <textarea matInput placeholder="Comment" (blur)="inputblur(fields.name)" [rows]="fields.rows?fields.rows:6" [cols]="fields.cols?fields.cols:50" [formControlName]="fields.name" (change)="inputblur(fields.name)">\n                        </textarea>\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n                                </mat-form-field>\n\n                                \x3c!-- timepicker type field in form start here --\x3e\n                                <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'timepicker\'" class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n\n\n                                    <input matInput [ngxTimepicker]="picker" [format]="fields.format" (blur)="inputblur(fields.name)" [formControlName]="fields.name" (timeChanged)="timepickerchange($event)">\n                                    <ngx-material-timepicker #picker></ngx-material-timepicker>\n\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n                                </mat-form-field>\n                                \x3c!-- timepicker type field in form end here --\x3e\n\n                                <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'date\' " class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n\n                                    <input matInput [matDatepicker]="picker1" [formControlName]="fields.name" [min]="fields.minDate" [max]="fields.maxDate" (focus)="picker1.open()">\n                                    <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                                    <mat-datepicker #picker1></mat-datepicker>\n                                    \x3c!-- <textarea matInput \n     placeholder="Comment" \n     [formControlName]="fields.name" \n     (change)="inputblur(fields.name)">\n  </textarea> --\x3e\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n\n                                </mat-form-field>\n                                <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'autocomplete\' " class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n                                    \x3c!-- {{fields.val.length}}\n --\x3e\n\n\n\n                                    \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-valid --\x3e\n                                    \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-invalid --\x3e\n\n                                    <input matInput (blur)="inputblur(fields.name)" (click)="reloadautocomplete(fields)" (keyup)=filterautocomplete(fields.name,fields) [formControlName]="fields.name" placeholder="{{fields.label}}" [matAutocomplete]="auto">\n\n                                    \x3c!-- <mat-autocomplete #auto="matAutocomplete" *ngIf="currentautocomplete==fields.name || currentautocomplete==\'\' "> --\x3e\n                                    <mat-autocomplete #auto="matAutocomplete">\n                                        <ng-container *ngIf="filerfielddata!=null && filerfielddata.length>0 ">\n                                            <mat-option *ngFor="let vals of filerfielddata " [value]="vals.key" (click)="setautocompletevalue(vals,fields)">\n                                                \x3c!-- <img class="example-option-img" aria-hidden [src]="state.flag" height="25"> --\x3e\n                                                <span>{{vals.val}}</span>\n                                                \x3c!-- <small>Population: {{state.population}}</small> --\x3e\n                                            </mat-option>\n                                        </ng-container>\n\n\n                                    </mat-autocomplete>\n                                    \x3c!-- to check selected auto val ..  --\x3e\n                                    \x3c!-- <span> auto data\n                            <ng-container\n                                *ngIf="autocompletefiledvalue!=null && autocompletefiledvalue[fields.name]!=null">\n                                {{autocompletefiledvalue[fields.name] | json}}\n                            </ng-container>\n\n                        </span> --\x3e\n\n\n                                    <mat-progress-bar *ngIf="fields.showautoprogressbar!=null && fields.showautoprogressbar==true" class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                    </mat-progress-bar>\n\n\n\n\n                                    <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple==null" aria-label="{{fields.name}} data">\n                                        <ng-container *ngFor="let vals of fields.val ">\n                                            <ng-container *ngIf="vals.key==autocompletefiledvalue[fields.name]">\n                                                <mat-chip [removable]=true>{{vals.val}}\n                                                    <mat-icon matChipRemove (click)="removechipsingle(fields,vals)">\n                                                        cancel\n                                                    </mat-icon>\n                                                </mat-chip>\n                                            </ng-container>\n\n                                        </ng-container>\n\n                                    </mat-chip-list>\n\n\n                                    <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple!=null" aria-label="{{fields.name}} data">\n                                        <ng-container *ngFor="let vals of fields.val ">\n                                            <ng-container *ngFor="let avals of autocompletefiledvalue[fields.name] ; let ib=index ">\n                                                <ng-container *ngIf="vals.key==avals">\n                                                    <mat-chip [removable]=true>{{vals.val}}\n                                                        <mat-icon matChipRemove (click)="removechipmultiple(fields,ib,vals)">\n                                                            cancel\n                                                        </mat-icon>\n                                                    </mat-chip>\n                                                </ng-container>\n                                            </ng-container>\n\n                                        </ng-container>\n\n                                    </mat-chip-list>\n\n                                    <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                    <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                    <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                        <mat-error>\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </ng-container>\n\n                                    <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                        <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                    </ng-container>\n\n\n                                </mat-form-field>\n\n                                \x3c!-- [config]="{uiColor: \'#99000\'}" \n\n[readonly]="false"\n                (change)="onChange($event)"\n                (editorChange)="onEditorChange($event)" \n                (ready)="onReady($event)"\n                (focus)="onFocus($event)"\n                (blur)="onBlur($event)"\n                (contentDom)="onContentDom($event)"\n                (fileUploadRequest)="onFileUploadRequest($event)"\n                (fileUploadResponse)="onFileUploadResponse($event)"\n                (paste)="onPaste($event)"\n                (drop)="onDrop($event)"\n                debounce="500"\n\n                 [ngModelOptions]="{standalone: true}\n\n\n                   <ckeditor\n                [(ngModel)]="ckeditorContent"\n                [ngModelOptions]="{standalone: true}"\n                \n                \n                >\n              </ckeditor>\n--\x3e\n\n\n\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'editor\' )" class="form-element form_field_{{fields.name}}">\n                                    \x3c!-- <input  (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}"> --\x3e\n\n                                    <div *ngIf="fields.ckeConfig != null && fields.ckeConfig != \'\'">\n                                        <mat-label [innerHTML]="fields.label"></mat-label>\n                                        \x3c!-- <p>test</p> --\x3e\n                                        <ckeditor [config]="{ toolbar: [ [ \'Bold\',\'Italic\',\'Source\',\'Cut\',\'Copy\',\'Paste\',\'Undo\',\'Redo\',\'Outdent\',\'Indent\',\'-\',\'Font\',\'Size\',\'Underline\',\'Text Color\',\'Styles\',\'Format\',\'RemoveFormat\',\'Image\',\'Strike\' ,\'Link\',\'NumberedList\',\'BulletedList\',\'Scayt\',\'SpecialChar\'] ] ,allowedContent:true}"\n                                            (blur)="inputblur(fields.name)" [config]="fields.ckeConfig" [formControlName]="fields.name"></ckeditor>\n                                        <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </div>\n\n                                    <div *ngIf="fields.ckeConfig == null || fields.ckeConfig == \'\'">\n                                        <mat-label [innerHTML]="fields.label"></mat-label>\n                                        \x3c!-- <p>test1</p> --\x3e\n\n                                        <ckeditor [config]="{ toolbar: [ [ \'Bold\',\'Italic\',\'Source\',\'Cut\',\'Copy\',\'Paste\',\'Undo\',\'Redo\',\'Outdent\',\'Indent\',\'-\',\'Font\',\'Size\',\'Underline\',\'Text Color\',\'Styles\',\'Format\',\'RemoveFormat\',\'Image\',\'Strike\' ,\'Link\',\'NumberedList\',\'BulletedList\',\'Scayt\',\'SpecialChar\'] ],allowedContent:true}"\n                                            (blur)="inputblur(fields.name)" [formControlName]="fields.name"></ckeditor>\n                                        <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                            <ng-container *ngFor="let valdidations of fields.validations">\n                                                <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                            </ng-container>\n                                        </mat-error>\n                                    </div>\n\n\n\n                                </div>\n\n\n\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'externaldata\' )" class="form-element form_field_{{fields.name}}">\n\n                                    <span class="externalDataFunctioncls">\n                                        <button type="button" mat-raised-button color="primary"\n                                            (click)="externalDataFunction(fields,ival)"\n                                            matTooltip="{{fields.label}}">{{fields.label}}</button>\n                                    </span>\n                                    <br>\n\n                                    <ng-container *ngIf="fields.value != null && fields.value.length >0">\n                                        \x3c!-- {{fields.value | json}} --\x3e\n\n                                        <div *ngFor="let item of fields.value;let i = index">\n                                            <div class="externalcardcls">\n                                                <mat-card>\n\n                                                    <span class="keycls">\n                                                        {{item.label}} :\n                                                    </span>\n\n                                                    <span class="valcls" *ngIf="item.imgflag == null">\n                                                        {{item.val}}\n                                                    </span>\n\n                                                    <span class="imgcls" *ngIf="item.imgflag != null && item.imgflag == true">\n                                                        <img [src]="item.val">\n                                                    </span>\n\n                                                    <span class="external_buttoncls">\n\n\n                                                        <span style="cursor: pointer;"\n                                                            (click)="externalDataEditFunction(\'edit\',fields,ival,i)"\n                                                            class="material-icons">\n                                                            create\n                                                        </span>\n\n                                                    <span style="cursor: pointer;" (click)="externalDataEditFunction(\'remove\',fields,ival,i)" class="material-icons">\n                                                            clear\n                                                        </span>\n\n                                                    </span>\n\n                                                </mat-card>\n                                            </div>\n                                        </div>\n\n                                    </ng-container>\n                                    \x3c!-- <ng-container *ngIf="externalDataVal != null && externalDataVal.length >0">\n\n                            <ng-container *ngFor="let item of externalDataVal">\n                                <div *ngIf="fields.name == item.name && item.value != null && item.value.length >0">\n\n                                    {{item | json}}\n\n                                    {{fields.value | json}}\n\n                                </div>\n                            </ng-container>\n\n                        </ng-container> --\x3e\n\n                                </div>\n\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'hidden\' )" class="form-element form_field_{{fields.name}}">\n                                    <input (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                                    <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                        <ng-container *ngFor="let valdidations of fields.validations">\n                                            <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                        </ng-container>\n                                    </mat-error>\n                                </div>\n\n                                <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'file\' )" class="form-element form_field_{{fields.name}}">\n                                    <mat-label [innerHTML]="fields.label"></mat-label>\n                                    <div class="aligner" (load)="triggerevents(fields)">\n                                        <div class="drop" (change)="fileChangeEvent($event)" [attr.fileid]="fields.name" id="drop{{fields.name}}" (click)="onchoosefiles($event,fields.name,fields.multiple)">\n                                            Browse or Drop Files Here\n                                            \x3c!-- Or <br><input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n                                            <ng-container *ngIf="fields.multiple !=null && fields.multiple==true">\n                                                <input type="file" multiple id="filechoosermultiple{{fields.name}}" style="display:none" (change)="handleDrop($event)">\n                                            </ng-container>\n\n                                            <ng-container *ngIf="fields.multiple == null ">\n                                                <input type="file" id="filechoosersingle{{fields.name}}" style="display:none" multiple (change)="handleDrop($event)">\n                                            </ng-container>\n                                        </div>\n\n                                        \x3c!-- <input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n                                        \x3c!-- <span>{{fields | json}}</span> --\x3e\n\n                                        <div class="filesid" id="list{{fields.name}}">\n                                            <h1 *ngIf="filearray[fields.name]!=null ">Files:</h1>\n                                            \x3c!-- <div></div> --\x3e\n                                            <ng-container *ngIf="filearray[fields.name] !=null  && fields.multiple==null && fields.loadfile != null && fields.loadfile == 1">\n                                                <div class="filecontainerdiv">\n                                                    <span *ngIf="filearray[fields.name].uploaded==1" class="material-icons fileuploadcompleteicon ">\n                                                        cloud_done\n                                                    </span>\n\n\n                                                    <div class="imagedivcls" *ngIf="filearray[fields.name].type == \'image/jpeg\' || filearray[fields.name].type == \'image/png\' || filearray[fields.name].type == \'image/jpg\'">\n\n                                                        <div class="divimagecardcls">\n                                                            <mat-card class="example-card imagecardcls" *ngIf="fields.imageUrl != null && fields.imageUrl != \'\'">\n                                                                <img mat-card-image [src]="fields.imageUrl">\n                                                            </mat-card>\n                                                        </div>\n\n\n                                                        <div class="divimagecardcls" *ngIf="fields.value != null && fields.value != \'\' && fields.value.fileservername != null">\n\n                                                            <mat-card class="example-card imagecardcls">\n\n                                                                <span class="material-icons cropcls" *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0" (click)="opensingleimagecrop(fields)">\n                                                                    crop\n                                                                </span>\n\n                                                                <img mat-card-image src="https://{{fields.value.bucket}}.s3.amazonaws.com/{{fields.value.path}}{{fields.value.fileservername}}">\n                                                            </mat-card>\n                                                        </div>\n\n\n                                                        <div class="cropimagesdiv" *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0 && fields.imageUrl != null && fields.imageUrl != \'\'">\n                                                            <h2> Croped Images :</h2>\n\n                                                            <ng-container *ngFor="let c of fields.aspectratio;let ci=index" class="image-cropper-cls">\n                                                                <br />\n                                                                <span>Croped Image (Asepect Ratio) :\n                                                                    {{fields.imagecroppedratiolabel[ci]}} </span><br>\n\n                                                                <image-cropper [imageBase64]="fields.imageUrl" [maintainAspectRatio]="true" [aspectRatio]="c" (imageCropped)="singleimageCropped($event,fields,ival,ci)" (imageLoaded)="imageLoaded()" (cropperReady)="cropperReady()" (loadImageFailed)="loadImageFailed()"\n                                                                    [imageQuality]="100" [resizeToHeight]="300">\n                                                                </image-cropper>\n\n                                                            </ng-container>\n                                                        </div>\n                                                    </div>\n                                                    <div class="filesdivcls">\n                                                        <span class="material-icons" *ngIf="filearray[fields.name].type == \'application/pdf\'">\n                                                            picture_as_pdf\n                                                        </span>\n\n                                                        <span class="material-icons" *ngIf="filearray[fields.name].type == \'video/mp4\'">\n                                                            movie_filter\n                                                        </span>\n\n                                                        <span class="material-icons" *ngIf="filearray[fields.name].type == \'text/csv\' || filearray[fields.name].type == \'text/plain\'">\n                                                            description\n                                                        </span>\n\n                                                        <span class="uploadedfilename uploadedfilename_{{filearray[fields.name]}}">{{filearray[fields.name].name}}</span>\n                                                        <br />\n                                                        <span class="uploadedfiletype uploadedfiletype_{{filearray[fields.name]}}">{{filearray[fields.name].type}}</span>\n                                                    </div>\n\n\n                                                    <div class="filefieldsmaincls">\n                                                        <ng-container class="descdiv" *ngIf=" filearray[fields.name] !=null && fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0 ">\n                                                            <div class="filefieldscls">\n                                                                <div class="filefields" *ngFor="let item of fields.imagefields;let i =index;trackBy: trackByFn">\n\n                                                                    <mat-form-field class="example-full-width" *ngIf="item.type == \'text\'">\n                                                                        <input matInput type="text" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" name="{{item.name}}" matInput placeholder="{{item.label}}">\n                                                                    </mat-form-field>\n\n                                                                    <mat-form-field class="example-full-width" *ngIf="item.type == \'textarea\'">\n                                                                        <textarea matInput name="{{item.name}}" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" placeholder="{{item.label}}" [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                                    </mat-form-field>\n\n                                                                    <mat-form-field class="example-full-width" *ngIf="item.type == \'number\'">\n                                                                        <input type="number" matInput name="{{item.name}}" [ngModelOptions]="{standalone: true}" [(ngModel)]="fields.imagefields[i].value" matInput placeholder="{{item.label}}">\n                                                                    </mat-form-field>\n\n                                                                    <div *ngIf="item.type == \'checkbox\'">\n                                                                        <mat-checkbox name="{{item.name}}" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" matInput>\n                                                                        </mat-checkbox>\n                                                                        &nbsp; {{item.label}}\n                                                                    </div>\n                                                                </div>\n\n                                                            </div>\n                                                        </ng-container>\n                                                    </div>\n\n\n\n                                                    <div class="actionbtndiv">\n                                                        <mat-chip class="fileuploadbutton" style="cursor: pointer;" *ngIf="filearray[fields.name].uploaded==null " mat-raised-button (click)="uploadfile(fields)">Upload\n                                                        </mat-chip>\n\n                                                        <mat-chip class="deletesinglefilecls" style="cursor: pointer;" *ngIf="fields.loaded != null && fields.loaded==0" mat-raised-button (click)="deletesinglefile(fields,filearray[fields.name].type)">\n                                                            Delete\n                                                        </mat-chip>\n\n                                                        <mat-chip class="filedeletebutton" style="cursor: pointer;" *ngIf="filearray[fields.name].uploaded != null && filearray[fields.name].uploaded==1" mat-raised-button (click)="deletefile(fields)">Delete\n                                                        </mat-chip>\n                                                    </div>\n\n                                                    \x3c!-- <mat-chip>Papadum</mat-chip> --\x3e\n\n                                                    <section *ngIf="filearray[fields.name].uploaded==2 " class="example-section uploadprogress">\n                                                        <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                                        </mat-progress-bar>\n                                                    </section>\n                                                </div>\n                                            </ng-container>\n\n\n                                            \x3c!-- for multiple file uploads  --\x3e\n                                            <ng-container *ngIf="filearray[fields.name]!=null && fields.multiple !=null  && fields.multiple==true">\n                                                <ng-container *ngFor="let files of filearray[fields.name]; let fi=index;trackBy: trackByFnMulti">\n                                                    <div class="filecontainerdiv">\n\n                                                        \x3c!-- {{files | json}} ++ --\x3e\n\n                                                        <div *ngIf="files.loadfile != null && files.loadfile==1" class="filesdivcls">\n\n                                                            \x3c!-- {{files.loadfile}}+++++++++++== --\x3e\n\n                                                            <span *ngIf="files.uploaded==1" class="material-icons fileuploadcompleteicon">\n                                                                cloud_done\n                                                            </span>\n\n                                                            <div class="divimagecardcls" *ngIf="files.type == \'image/jpeg\' || files.type == \'image/png\' || files.type == \'image/jpg\'">\n\n\n                                                                <mat-card class="example-card imagecardcls" *ngIf="files.imageUrl != null && files.imageUrl != \'\'">\n                                                                    <img mat-card-image [src]="files.imageUrl">\n                                                                </mat-card>\n\n                                                                <mat-card class="example-card imagecardcls" *ngIf="files.imageUrl == null">\n\n                                                                    <span class="material-icons cropcls" *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0" (click)="opensingleimagecropformultiple(files)">\n                                                                        crop\n                                                                    </span>\n\n\n                                                                    <img mat-card-image src="https://{{files.bucket}}.s3.amazonaws.com/{{files.path}}{{files.fileservername}}">\n                                                                </mat-card>\n\n                                                                <div class="cropimagesdiv" *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0 && files.imageUrl != null && files.imageUrl != \'\'">\n                                                                    <h2> Croped Images :</h2>\n\n                                                                    <ng-container *ngFor="let c of files.aspectratio;let ci=index">\n                                                                        <br />\n                                                                        <span>Croped Image (Asepect Ratio) :\n                                                                            {{files.imagecroppedratiolabel[ci]}}\n                                                                        </span><br>\n\n                                                                        <image-cropper [imageBase64]="files.imageUrl" [maintainAspectRatio]="true" [aspectRatio]="c" [resizeToWidth]="128" (imageCropped)="multipleimageCropped($event,files,ival,ci,fi,filearray[fields.name])" (imageLoaded)="imageLoaded()" (cropperReady)="cropperReady()"\n                                                                            (loadImageFailed)="loadImageFailed()" [imageQuality]="100" [resizeToHeight]="300">\n                                                                        </image-cropper>\n\n                                                                        \x3c!-- <mat-card class="example-card imagecardcls"\n                                                                *ngIf="files.croppedImage[ci] != null">\n                                                                <span>Croped Image Output : </span><br>\n                                                                <img class="croppedImagecls"\n                                                                    [src]="files.croppedImage[ci]" />\n                                                            </mat-card> --\x3e\n\n                                                                    </ng-container>\n                                                                </div>\n\n\n                                                            </div>\n\n                                                            <span class="material-icons" *ngIf="files.type == \'application/pdf\'">\n                                                                picture_as_pdf\n                                                            </span>\n\n                                                            <span class="material-icons" *ngIf="files.type == \'video/mp4\'">\n                                                                movie_filter\n                                                            </span>\n\n                                                            <span class="material-icons" *ngIf="files.type == \'text/csv\' || files.type == \'text/plain\'">\n                                                                description\n                                                            </span>\n\n                                                            <div class="filenamecls">\n                                                                <span class="fileuploadednameclass">\n                                                                    {{files.name}}</span>\n                                                                <br />\n                                                                <span class="fileuploadedtypeclass">\n                                                                    {{files.type}}</span>\n                                                            </div>\n\n\n                                                            <br>\n                                                            \x3c!-- files ++++ 22 => {{files.imagefields | json}}    --\x3e\n                                                            \x3c!-- multipleImgFormData --\x3e\n                                                            <div class="filefieldsmaincls">\n                                                                <ng-container class="descdiv" *ngIf="fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0">\n\n                                                                    \x3c!-- fields {{fields | json}}ss --\x3e\n\n                                                                    <div class="filefieldscls" *ngFor="let val of fields.imagefields;let ind=index;trackBy: trackByFnMultiple ">\n\n                                                                        <br>\n\n                                                                        <div *ngIf="val.type == \'text\'" class="filefields">\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                                \x3c!-- <span>if imgfields ==</span> --\x3e\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <input matInput type="text" (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                                </mat-form-field>\n                                                                            </div>\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                                \x3c!-- <span>if imgfields ++ </span> --\x3e\n\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <input matInput type="text" (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        value={{filearray[fields.name][fi].imgfields[ind].value}} matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                                </mat-form-field>\n                                                                            </div>\n\n                                                                        </div>\n\n                                                                        \x3c!-- [(ngModel)]="filearray[fields.name][fi].imagefields[ind].value" --\x3e\n\n                                                                        <div *ngIf="val.type == \'textarea\'">\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <textarea matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                                                </mat-form-field>\n                                                                            </div>\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <textarea matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" value={{filearray[fields.name][fi].imgfields[ind].value}} [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                                                </mat-form-field>\n                                                                            </div>\n\n\n                                                                        </div>\n\n                                                                        <div *ngIf="val.type == \'number\'">\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <input type="number" matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                                </mat-form-field>\n                                                                            </div>\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                                <mat-form-field class="example-full-width">\n                                                                                    <input type="number" matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                        matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" value={{filearray[fields.name][fi].imgfields[ind].value}}>\n                                                                                </mat-form-field>\n                                                                            </div>\n\n                                                                        </div>\n\n\n\n                                                                        <div *ngIf="val.type == \'checkbox\'">\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                                <mat-checkbox name="{{filearray[fields.name][fi].imagefields[ind].name}}" matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" matInput (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)">\n                                                                                </mat-checkbox> &nbsp; {{val.label}}\n                                                                            </div>\n\n                                                                            <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                                \x3c!-- chk = >{{filearray[fields.name][fi].imgfields[ind].value}} --\x3e\n                                                                                <mat-checkbox name="{{filearray[fields.name][fi].imagefields[ind].name}}" matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" matInput (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)"\n                                                                                    [checked]="filearray[fields.name][fi].imgfields[ind].value">\n                                                                                </mat-checkbox> &nbsp; {{val.label}}\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n\n                                                                    \x3c!-- </div> --\x3e\n                                                                </ng-container>\n                                                            </div>\n\n\n\n                                                            <div class="actionbtndiv">\n\n                                                                <mat-chip class="fileuploadbutton" *ngIf="files.uploaded==null " style="cursor: pointer;" mat-raised-button (click)="uploadfilemultiple(fields,files,fi)">\n                                                                    Upload\n                                                                </mat-chip>\n\n                                                                <mat-chip class="deletesinglefilecls" style="cursor: pointer;" *ngIf="files.loaded != null && files.loaded==0" mat-raised-button (click)="deletesinglefilefrommultiple(fields,files,fi)">\n                                                                    Delete\n                                                                </mat-chip>\n\n                                                                <mat-chip class="filedeletebutton" *ngIf="files.uploaded==1" style="cursor: pointer;" mat-raised-button (click)="deletefilemultiple(fields,files,fi)">\n                                                                    Delete </mat-chip>\n                                                            </div>\n\n                                                            <section *ngIf="files.uploaded==2 " class="example-section">\n                                                                <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                                                </mat-progress-bar>\n                                                            </section>\n                                                        </div>\n                                                    </div>\n                                                    <br />\n                                                </ng-container>\n                                                <div class="actionbtndiv2">\n                                                    <mat-chip class="uploadallfile" *ngIf="(filecount[fields.name] !=null && filecount[fields.name] !=filearray[fields.name].length ) || filecount[fields.name]==null" mat-raised-button (click)="uploadall(fields)">Upload All\n                                                    </mat-chip>\n                                                    <mat-chip class="deleteallfile" mat-raised-button (click)="deletefilemultipleall(fields)">\n                                                        Delete All\n                                                    </mat-chip>\n                                                </div>\n\n                                            </ng-container>\n\n\n\n                                        </div>\n                                    </div>\n\n                                    <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                        <ng-container *ngFor="let valdidations of fields.validations">\n                                            <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                        </ng-container>\n                                    </mat-error>\n                                </div>\n\n\n                                <section *ngIf="fieldloading == fields.name " class="example-section">\n                                    <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                    </mat-progress-bar>\n                                </section>\n                            </div>\n                        </ng-container>\n\n\n\n                    </ng-container>\n                </div>\n\n            </ng-container>\n\n            \x3c!-- fields with no group  --\x3e\n\n            <ng-container *ngFor="let fields of formdataval.fields ; let ival=index;">\n                <ng-container *ngIf="fields.group== null ">\n\n\n                    <div class="form_field_wrapper form_field_wrapper{{fields.name}}">\n                        <mat-card class="form_header_{{fields.name}}" *ngIf="fields.heading!=null && formGroup.controls[fields.name]!=null " [innerHTML]="fields.heading">\n                        </mat-card>\n                        <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'select\'  )" class="form-element form_field_{{fields.name}}">\n                            \x3c!-- for select--\x3e\n                            \x3c!-- <div>ff</div> --\x3e\n                            <mat-label> Select {{fields.label}} </mat-label>\n                            <mat-select (blur)="inputblur(fields.name)" (closed)="inputblur(fields.name)" (selectionChange)="checkchange(fields,ival)" [formControlName]="fields.name" [multiple]="fields.multiple?true:false">\n                                <mat-option *ngFor="let data of fields.val" [value]="data.val"> {{data.name}}\n                                </mat-option>\n                            </mat-select>\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n\n                        </mat-form-field>\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'image\'  )" class="form-element form_field_{{fields.name}}">\n                            <div>\n                                <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                                </mat-label>\n                            </div>\n\n                            <div>\n                                <ng-container *ngFor="let imgvals of fields.val">\n                                    <span class="imgwrapper imgwrap_{{fields.name}}_{{imgvals.key}}">\n                                        <img (click)="chooseimg(imgvals,fields)" src="{{imgvals.image}}">\n                                    </span>\n                                </ng-container>\n                            </div>\n\n\n\n                            <input (blur)="inputblur(fields.name)" type="hidden" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                            <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n                        </div>\n\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'checkbox\' && fields.multiple==null )" class="form-element form_field_{{fields.name}}">\n                            \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                            <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                            </mat-label>\n                            <mat-checkbox *ngIf="fields.multiple ==null && !fields.multiple" class=" example-margin" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" [formControlName]="fields.name" [labelPosition]="fields.labelPosition">\n                                {{fields.label}}\n                            </mat-checkbox>\n\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n                        </div>\n                        <div *ngIf="fields.name!=null && (fields.type==\'checkbox\' ) && fields.multiple !=null && fields.multiple==true " class="form-element form_field_{{fields.name}}">\n                            \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                            <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                            </mat-label>\n\n                            <ng-container *ngIf="fields.multiple !=null && fields.multiple">\n                                <ng-container *ngFor="let vals of fields.val , let vi=index;">\n                                    <mat-checkbox class="example-radio-button" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" formControlName="{{fields.name}}__{{vi}}" [value]="vals.key">{{vals.val}}\n                                    </mat-checkbox>\n                                    \x3c!-- <span></span> --\x3e\n\n                                </ng-container>\n\n                                <input (blur)="inputblur(fields.name)" type="hidden" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                                <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n\n                            </ng-container>\n\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            \x3c!-- <ng-container\n                    *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                    <mat-error>\n                        <ng-container *ngFor="let valdidations of fields.validations">\n                            <span\n                                *ngIf="formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                        </ng-container>\n                    </mat-error>\n\n                </ng-container> --\x3e\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n\n                        </div>\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'radio\' )" class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n\n                            <mat-radio-group aria-labelledby="example-radio-group-label" class="example-radio-group form_field_{{fields.name}}" [formControlName]="fields.name">\n                                <mat-radio-button class=" example-radio-button" (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)" *ngFor="let vals of fields.val" [value]="vals.key">\n                                    {{vals.val}}\n                                </mat-radio-button>\n                            </mat-radio-group>\n\n                            \x3c!--<ng-container *ngFor="let vals of fields.val">\n     <mat-checkbox class="form_field_{{fields.name}} example-radio-button" (blur)="inputblur(fields.name)"   [formControlName]="fields.name" [value]="vals.key">{{vals.val}}</mat-checkbox>\n\n </ng-container>--\x3e\n\n\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n\n                        </div>\n\n                        <div>\n                            <ng-container *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'numberformat\'">\n                                <div class="add_form">\n                                    <div class="mat-form-field-wrapper">\n                                        <div class="phonenumber mat-form-field">\n                                            <input appPhoneMask (blur)="inputblur(fields.name)" type="text" required minlength="14" [placeholder]="fields.label" (change)="checkchange(fields,ival)" [formControlName]="fields.name" [(ngModel)]="phonenumberValue">\n                                            <label class="matlabel" [for]="fields.name">{{fields.label}}</label>\n                                            <ng-container *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n\n                                                <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                                    <mat-error>\n                                                        <ng-container *ngFor="let valdidations of fields.validations">\n                                                            <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                                        </ng-container>\n                                                    </mat-error>\n                                                </ng-container>\n                                            </ng-container>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </ng-container>\n\n                            <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'email\' || fields.type==\'number\' || fields.type==\'text\' || fields.type == \'password\')" class="form-element form_field_{{fields.name}}">\n                                <mat-label [innerHTML]="fields.label"></mat-label>\n\n\n                                <input matInput (blur)="inputblur(fields.name)" [type]="fields.type" [placeholder]="fields.label" (change)="checkchange(fields,ival)" [formControlName]="fields.name">\n\n                                <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                                <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                                <ng-container *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                    <mat-error>\n                                        <ng-container *ngFor="let valdidations of fields.validations">\n                                            <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                        </ng-container>\n                                    </mat-error>\n                                </ng-container>\n\n                                <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                    <mat-hint align="start">{{fields.hint}}</mat-hint>\n                                </ng-container>\n\n                            </mat-form-field>\n\n\n                            <div class="passbuttoncls" *ngIf="formGroup.controls[fields.name] != null && (fields.type == \'password\'||fields.type == \'text\' ) && \n                fields.passwordflag == true ">\n                                <button mat-raised-button color="accent" type="button" (click)="GeneratePassword(fields)" class="GeneratePasswordcls" matTooltip="Generate Password">\n                                    Generate Password</button> &nbsp;\n\n                                <button mat-raised-button color="accent" type="button" (click)="copyGeneratePassword(fields)" class="GeneratePasswordcls" matTooltip="Copy Password">\n                                    Copy Password</button> &nbsp;\n\n                                <span *ngIf="isPasswordVisible == true" class="material-icons" (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Show Password">\n                                    remove_red_eye\n                                </span>\n\n                                <span *ngIf="isPasswordVisible == false" class="material-icons" (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Hide Password">\n                                    visibility_off\n                                </span>\n                            </div>\n\n                            <div class="passbuttoncls" *ngIf="formGroup.controls[fields.name] != null && customlistenbuttons?.flag == true">\n\n\n                                <div *ngFor="let item of customlistenbuttons.buttons">\n\n                                    <div *ngIf="fields.type == item.type && fields?.custombuttonflag == true">\n                                        <span>\n                                            <button mat-raised-button color="accent" type="button"\n                                                (click)="CustomFlagFields(fields,item)" class="CustomFlagFieldscls">\n                                                {{item?.labeladd}}<span class="material-icons">\n                                                    add\n                                                </span></button> &nbsp;\n\n                                        <button mat-raised-button color="accent" type="button" (click)="CustomFlagFieldsRemove(fields,item)" class="CustomFlagFieldscls">\n                                                {{item?.labelremove}}<span class="material-icons">\n                                                    remove\n                                                </span></button>\n                                        </span>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                            <div *ngIf=" fields?.customheadingflag != null &&  fields?.customheadingflag == true">\n                                <div *ngIf="fields?.customheadingtitle != null">\n                                    <mat-card class="customheadingtitlecls">\n                                        {{fields?.customheadingtitle}}</mat-card>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'textarea\' " class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n                            <textarea matInput placeholder="Comment" (blur)="inputblur(fields.name)" [rows]="fields.rows?fields.rows:6" [cols]="fields.cols?fields.cols:50" [formControlName]="fields.name" (change)="inputblur(fields.name)">\n                </textarea>\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n                        </mat-form-field>\n\n                        \x3c!-- timepicker type field in form start here --\x3e\n                        <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'timepicker\'" class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n\n\n                            <input matInput [ngxTimepicker]="picker" [format]="fields.format" (blur)="inputblur(fields.name)" [formControlName]="fields.name" (timeChanged)="timepickerchange($event)">\n                            <ngx-material-timepicker #picker></ngx-material-timepicker>\n\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n                        </mat-form-field>\n                        \x3c!-- timepicker type field in form end here --\x3e\n\n                        <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'date\' " class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n\n                            <input matInput [matDatepicker]="picker1" [formControlName]="fields.name" [min]="fields.minDate" [max]="fields.maxDate" (focus)="picker1.open()">\n                            <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            \x3c!-- <textarea matInput \nplaceholder="Comment" \n[formControlName]="fields.name" \n(change)="inputblur(fields.name)">\n</textarea> --\x3e\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n\n                        </mat-form-field>\n                        <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'autocomplete\' " class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n                            \x3c!-- {{fields.val.length}}\n--\x3e\n\n\n\n                            \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-valid --\x3e\n                            \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-invalid --\x3e\n\n                            <input matInput (blur)="inputblur(fields.name)" (click)="reloadautocomplete(fields)" (keyup)=filterautocomplete(fields.name,fields) [formControlName]="fields.name" placeholder="{{fields.label}}" [matAutocomplete]="auto">\n\n                            \x3c!-- <mat-autocomplete #auto="matAutocomplete" *ngIf="currentautocomplete==fields.name || currentautocomplete==\'\' "> --\x3e\n                            <mat-autocomplete #auto="matAutocomplete">\n                                <ng-container *ngIf="filerfielddata!=null && filerfielddata.length>0 ">\n                                    <mat-option *ngFor="let vals of filerfielddata " [value]="vals.key" (click)="setautocompletevalue(vals,fields)">\n                                        \x3c!-- <img class="example-option-img" aria-hidden [src]="state.flag" height="25"> --\x3e\n                                        <span>{{vals.val}}</span>\n                                        \x3c!-- <small>Population: {{state.population}}</small> --\x3e\n                                    </mat-option>\n                                </ng-container>\n\n\n                            </mat-autocomplete>\n                            \x3c!-- to check selected auto val ..  --\x3e\n                            \x3c!-- <span> auto data\n                    <ng-container\n                        *ngIf="autocompletefiledvalue!=null && autocompletefiledvalue[fields.name]!=null">\n                        {{autocompletefiledvalue[fields.name] | json}}\n                    </ng-container>\n\n                </span> --\x3e\n\n\n                            <mat-progress-bar *ngIf="fields.showautoprogressbar!=null && fields.showautoprogressbar==true" class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                            </mat-progress-bar>\n\n\n\n\n                            <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple==null" aria-label="{{fields.name}} data">\n                                <ng-container *ngFor="let vals of fields.val ">\n                                    <ng-container *ngIf="vals.key==autocompletefiledvalue[fields.name]">\n                                        <mat-chip [removable]=true>{{vals.val}}\n                                            <mat-icon matChipRemove (click)="removechipsingle(fields,vals)">cancel\n                                            </mat-icon>\n                                        </mat-chip>\n                                    </ng-container>\n\n                                </ng-container>\n\n                            </mat-chip-list>\n\n\n                            <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple!=null" aria-label="{{fields.name}} data">\n                                <ng-container *ngFor="let vals of fields.val ">\n                                    <ng-container *ngFor="let avals of autocompletefiledvalue[fields.name] ; let ib=index ">\n                                        <ng-container *ngIf="vals.key==avals">\n                                            <mat-chip [removable]=true>{{vals.val}}\n                                                <mat-icon matChipRemove (click)="removechipmultiple(fields,ib,vals)">\n                                                    cancel\n                                                </mat-icon>\n                                            </mat-chip>\n                                        </ng-container>\n                                    </ng-container>\n\n                                </ng-container>\n\n                            </mat-chip-list>\n\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                            <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                                <mat-error>\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </ng-container>\n\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\n                            </ng-container>\n\n\n                        </mat-form-field>\n\n                        \x3c!-- [config]="{uiColor: \'#99000\'}" \n\n[readonly]="false"\n        (change)="onChange($event)"\n        (editorChange)="onEditorChange($event)" \n        (ready)="onReady($event)"\n        (focus)="onFocus($event)"\n        (blur)="onBlur($event)"\n        (contentDom)="onContentDom($event)"\n        (fileUploadRequest)="onFileUploadRequest($event)"\n        (fileUploadResponse)="onFileUploadResponse($event)"\n        (paste)="onPaste($event)"\n        (drop)="onDrop($event)"\n        debounce="500"\n\n         [ngModelOptions]="{standalone: true}\n\n\n           <ckeditor\n        [(ngModel)]="ckeditorContent"\n        [ngModelOptions]="{standalone: true}"\n        \n        \n        >\n      </ckeditor>\n--\x3e\n\n\n\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'editor\' )" class="form-element form_field_{{fields.name}}">\n                            \x3c!-- <input  (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}"> --\x3e\n\n                            <div *ngIf="fields.ckeConfig != null && fields.ckeConfig != \'\'">\n                                <mat-label [innerHTML]="fields.label"></mat-label>\n                                \x3c!-- <p>test</p> --\x3e\n                                <ckeditor [config]="{ toolbar: [ [ \'Bold\',\'Italic\',\'Source\',\'Cut\',\'Copy\',\'Paste\',\'Undo\',\'Redo\',\'Outdent\',\'Indent\',\'-\',\'Font\',\'Size\',\'Underline\',\'Text Color\',\'Styles\',\'Format\',\'RemoveFormat\',\'Image\',\'Strike\' ,\'Link\',\'NumberedList\',\'BulletedList\',\'Scayt\',\'SpecialChar\'] ] ,allowedContent:true}"\n                                    (blur)="inputblur(fields.name)" [config]="fields.ckeConfig" [formControlName]="fields.name"></ckeditor>\n                                <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </div>\n\n                            <div *ngIf="fields.ckeConfig == null || fields.ckeConfig == \'\'">\n                                <mat-label [innerHTML]="fields.label"></mat-label>\n                                \x3c!-- <p>test1</p> --\x3e\n\n                                <ckeditor [config]="{ toolbar: [ [ \'Bold\',\'Italic\',\'Source\',\'Cut\',\'Copy\',\'Paste\',\'Undo\',\'Redo\',\'Outdent\',\'Indent\',\'-\',\'Font\',\'Size\',\'Underline\',\'Text Color\',\'Styles\',\'Format\',\'RemoveFormat\',\'Image\',\'Strike\' ,\'Link\',\'NumberedList\',\'BulletedList\',\'Scayt\',\'SpecialChar\'] ],allowedContent:true}"\n                                    (blur)="inputblur(fields.name)" [formControlName]="fields.name"></ckeditor>\n                                <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                    <ng-container *ngFor="let valdidations of fields.validations">\n                                        <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                    </ng-container>\n                                </mat-error>\n                            </div>\n\n\n\n                        </div>\n\n\n\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'externaldata\' )" class="form-element form_field_{{fields.name}}">\n\n                            <span class="externalDataFunctioncls">\n                                <button type="button" mat-raised-button color="primary"\n                                    (click)="externalDataFunction(fields,ival)"\n                                    matTooltip="{{fields.label}}">{{fields.label}}</button>\n                            </span>\n                            <br>\n\n                            <ng-container *ngIf="fields.value != null && fields.value.length >0">\n                                \x3c!-- {{fields.value | json}} --\x3e\n\n                                <div *ngFor="let item of fields.value;let i = index">\n                                    <div class="externalcardcls">\n                                        <mat-card>\n\n                                            <span class="keycls">\n                                                {{item.label}} :\n                                            </span>\n\n                                            <span class="valcls" *ngIf="item.imgflag == null">\n                                                {{item.val}}\n                                            </span>\n\n                                            <span class="imgcls" *ngIf="item.imgflag != null && item.imgflag == true">\n                                                <img [src]="item.val">\n                                            </span>\n\n                                            <span class="external_buttoncls">\n\n\n                                                <span style="cursor: pointer;"\n                                                    (click)="externalDataEditFunction(\'edit\',fields,ival,i)"\n                                                    class="material-icons">\n                                                    create\n                                                </span>\n\n                                            <span style="cursor: pointer;" (click)="externalDataEditFunction(\'remove\',fields,ival,i)" class="material-icons">\n                                                    clear\n                                                </span>\n\n                                            </span>\n\n                                        </mat-card>\n                                    </div>\n                                </div>\n\n                            </ng-container>\n                            \x3c!-- <ng-container *ngIf="externalDataVal != null && externalDataVal.length >0">\n\n                    <ng-container *ngFor="let item of externalDataVal">\n                        <div *ngIf="fields.name == item.name && item.value != null && item.value.length >0">\n\n                            {{item | json}}\n\n                            {{fields.value | json}}\n\n                        </div>\n                    </ng-container>\n\n                </ng-container> --\x3e\n\n                        </div>\n\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'hidden\' )" class="form-element form_field_{{fields.name}}">\n                            <input (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}">\n                            <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </div>\n\n                        <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'file\' )" class="form-element form_field_{{fields.name}}">\n                            <mat-label [innerHTML]="fields.label"></mat-label>\n                            <div class="aligner" (load)="triggerevents(fields)">\n                                <div class="drop" (change)="fileChangeEvent($event)" [attr.fileid]="fields.name" id="drop{{fields.name}}" (click)="onchoosefiles($event,fields.name,fields.multiple)">\n                                    Browse or Drop Files Here\n                                    \x3c!-- Or <br><input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n                                    <ng-container *ngIf="fields.multiple !=null && fields.multiple==true">\n                                        <input type="file" multiple id="filechoosermultiple{{fields.name}}" style="display:none" (change)="handleDrop($event)">\n                                    </ng-container>\n\n                                    <ng-container *ngIf="fields.multiple == null ">\n                                        <input type="file" id="filechoosersingle{{fields.name}}" style="display:none" multiple (change)="handleDrop($event)">\n                                    </ng-container>\n                                </div>\n\n                                \x3c!-- <input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n                                \x3c!-- <span>{{fields | json}}</span> --\x3e\n\n                                <div class="filesid" id="list{{fields.name}}">\n                                    <h1 *ngIf="filearray[fields.name]!=null ">Files:</h1>\n                                    \x3c!-- <div></div> --\x3e\n                                    <ng-container *ngIf="filearray[fields.name] !=null  && fields.multiple==null && fields.loadfile != null && fields.loadfile == 1">\n                                        <div class="filecontainerdiv">\n                                            <span *ngIf="filearray[fields.name].uploaded==1" class="material-icons fileuploadcompleteicon ">\n                                                cloud_done\n                                            </span>\n\n\n                                            <div class="imagedivcls" *ngIf="filearray[fields.name].type == \'image/jpeg\' || filearray[fields.name].type == \'image/png\' || filearray[fields.name].type == \'image/jpg\'">\n\n                                                <div class="divimagecardcls">\n                                                    <mat-card class="example-card imagecardcls" *ngIf="fields.imageUrl != null && fields.imageUrl != \'\'">\n                                                        <img mat-card-image [src]="fields.imageUrl">\n                                                    </mat-card>\n                                                </div>\n\n\n                                                <div class="divimagecardcls" *ngIf="fields.value != null && fields.value != \'\' && fields.value.fileservername != null">\n\n                                                    <mat-card class="example-card imagecardcls">\n\n                                                        <span class="material-icons cropcls" *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0" (click)="opensingleimagecrop(fields)">\n                                                            crop\n                                                        </span>\n\n                                                        <img mat-card-image src="https://{{fields.value.bucket}}.s3.amazonaws.com/{{fields.value.path}}{{fields.value.fileservername}}">\n                                                    </mat-card>\n                                                </div>\n\n\n                                                <div class="cropimagesdiv" *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0 && fields.imageUrl != null && fields.imageUrl != \'\'">\n                                                    <h2> Croped Images :</h2>\n\n                                                    <ng-container *ngFor="let c of fields.aspectratio;let ci=index" class="image-cropper-cls">\n                                                        <br />\n                                                        <span>Croped Image (Asepect Ratio) :\n                                                            {{fields.imagecroppedratiolabel[ci]}} </span><br>\n\n                                                        <image-cropper [imageBase64]="fields.imageUrl" [maintainAspectRatio]="true" [aspectRatio]="c" (imageCropped)="singleimageCropped($event,fields,ival,ci)" (imageLoaded)="imageLoaded()" (cropperReady)="cropperReady()" (loadImageFailed)="loadImageFailed()"\n                                                            [imageQuality]="100" [resizeToHeight]="300">\n                                                        </image-cropper>\n\n                                                    </ng-container>\n                                                </div>\n                                            </div>\n                                            <div class="filesdivcls">\n                                                <span class="material-icons" *ngIf="filearray[fields.name].type == \'application/pdf\'">\n                                                    picture_as_pdf\n                                                </span>\n\n                                                <span class="material-icons" *ngIf="filearray[fields.name].type == \'video/mp4\'">\n                                                    movie_filter\n                                                </span>\n\n                                                <span class="material-icons" *ngIf="filearray[fields.name].type == \'text/csv\' || filearray[fields.name].type == \'text/plain\'">\n                                                    description\n                                                </span>\n\n                                                <span class="uploadedfilename uploadedfilename_{{filearray[fields.name]}}">{{filearray[fields.name].name}}</span>\n                                                <br />\n                                                <span class="uploadedfiletype uploadedfiletype_{{filearray[fields.name]}}">{{filearray[fields.name].type}}</span>\n                                            </div>\n\n\n                                            <div class="filefieldsmaincls">\n                                                <ng-container class="descdiv" *ngIf=" filearray[fields.name] !=null && fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0 ">\n                                                    <div class="filefieldscls">\n                                                        <div class="filefields" *ngFor="let item of fields.imagefields;let i =index;trackBy: trackByFn">\n\n                                                            <mat-form-field class="example-full-width" *ngIf="item.type == \'text\'">\n                                                                <input matInput type="text" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" name="{{item.name}}" matInput placeholder="{{item.label}}">\n                                                            </mat-form-field>\n\n                                                            <mat-form-field class="example-full-width" *ngIf="item.type == \'textarea\'">\n                                                                <textarea matInput name="{{item.name}}" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" placeholder="{{item.label}}" [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                            </mat-form-field>\n\n                                                            <mat-form-field class="example-full-width" *ngIf="item.type == \'number\'">\n                                                                <input type="number" matInput name="{{item.name}}" [ngModelOptions]="{standalone: true}" [(ngModel)]="fields.imagefields[i].value" matInput placeholder="{{item.label}}">\n                                                            </mat-form-field>\n\n                                                            <div *ngIf="item.type == \'checkbox\'">\n                                                                <mat-checkbox name="{{item.name}}" [(ngModel)]="fields.imagefields[i].value" [ngModelOptions]="{standalone: true}" matInput>\n                                                                </mat-checkbox>\n                                                                &nbsp; {{item.label}}\n                                                            </div>\n                                                        </div>\n\n                                                    </div>\n                                                </ng-container>\n                                            </div>\n\n\n\n                                            <div class="actionbtndiv">\n                                                <mat-chip class="fileuploadbutton" style="cursor: pointer;" *ngIf="filearray[fields.name].uploaded==null " mat-raised-button (click)="uploadfile(fields)">Upload</mat-chip>\n\n                                                <mat-chip class="deletesinglefilecls" style="cursor: pointer;" *ngIf="fields.loaded != null && fields.loaded==0" mat-raised-button (click)="deletesinglefile(fields,filearray[fields.name].type)">\n                                                    Delete\n                                                </mat-chip>\n\n                                                <mat-chip class="filedeletebutton" style="cursor: pointer;" *ngIf="filearray[fields.name].uploaded != null && filearray[fields.name].uploaded==1" mat-raised-button (click)="deletefile(fields)">Delete</mat-chip>\n                                            </div>\n\n                                            \x3c!-- <mat-chip>Papadum</mat-chip> --\x3e\n\n                                            <section *ngIf="filearray[fields.name].uploaded==2 " class="example-section uploadprogress">\n                                                <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                                </mat-progress-bar>\n                                            </section>\n                                        </div>\n                                    </ng-container>\n\n\n                                    \x3c!-- for multiple file uploads  --\x3e\n                                    <ng-container *ngIf="filearray[fields.name]!=null && fields.multiple !=null  && fields.multiple==true">\n                                        <ng-container *ngFor="let files of filearray[fields.name]; let fi=index;trackBy: trackByFnMulti">\n                                            <div class="filecontainerdiv">\n\n                                                \x3c!-- {{files | json}} ++ --\x3e\n\n                                                <div *ngIf="files.loadfile != null && files.loadfile==1" class="filesdivcls">\n\n                                                    \x3c!-- {{files.loadfile}}+++++++++++== --\x3e\n\n                                                    <span *ngIf="files.uploaded==1" class="material-icons fileuploadcompleteicon">\n                                                        cloud_done\n                                                    </span>\n\n                                                    <div class="divimagecardcls" *ngIf="files.type == \'image/jpeg\' || files.type == \'image/png\' || files.type == \'image/jpg\'">\n\n\n                                                        <mat-card class="example-card imagecardcls" *ngIf="files.imageUrl != null && files.imageUrl != \'\'">\n                                                            <img mat-card-image [src]="files.imageUrl">\n                                                        </mat-card>\n\n                                                        <mat-card class="example-card imagecardcls" *ngIf="files.imageUrl == null">\n\n                                                            <span class="material-icons cropcls" *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0" (click)="opensingleimagecropformultiple(files)">\n                                                                crop\n                                                            </span>\n\n\n                                                            <img mat-card-image src="https://{{files.bucket}}.s3.amazonaws.com/{{files.path}}{{files.fileservername}}">\n                                                        </mat-card>\n\n                                                        <div class="cropimagesdiv" *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0 && files.imageUrl != null && files.imageUrl != \'\'">\n                                                            <h2> Croped Images :</h2>\n\n                                                            <ng-container *ngFor="let c of files.aspectratio;let ci=index">\n                                                                <br />\n                                                                <span>Croped Image (Asepect Ratio) :\n                                                                    {{files.imagecroppedratiolabel[ci]}} </span><br>\n\n                                                                <image-cropper [imageBase64]="files.imageUrl" [maintainAspectRatio]="true" [aspectRatio]="c" [resizeToWidth]="128" (imageCropped)="multipleimageCropped($event,files,ival,ci,fi,filearray[fields.name])" (imageLoaded)="imageLoaded()" (cropperReady)="cropperReady()"\n                                                                    (loadImageFailed)="loadImageFailed()" [imageQuality]="100" [resizeToHeight]="300">\n                                                                </image-cropper>\n\n                                                                \x3c!-- <mat-card class="example-card imagecardcls"\n                                                        *ngIf="files.croppedImage[ci] != null">\n                                                        <span>Croped Image Output : </span><br>\n                                                        <img class="croppedImagecls"\n                                                            [src]="files.croppedImage[ci]" />\n                                                    </mat-card> --\x3e\n\n                                                            </ng-container>\n                                                        </div>\n\n\n                                                    </div>\n\n                                                    <span class="material-icons" *ngIf="files.type == \'application/pdf\'">\n                                                        picture_as_pdf\n                                                    </span>\n\n                                                    <span class="material-icons" *ngIf="files.type == \'video/mp4\'">\n                                                        movie_filter\n                                                    </span>\n\n                                                    <span class="material-icons" *ngIf="files.type == \'text/csv\' || files.type == \'text/plain\'">\n                                                        description\n                                                    </span>\n\n                                                    <div class="filenamecls">\n                                                        <span class="fileuploadednameclass"> {{files.name}}</span>\n                                                        <br />\n                                                        <span class="fileuploadedtypeclass"> {{files.type}}</span>\n                                                    </div>\n\n\n                                                    <br>\n                                                    \x3c!-- files ++++ 22 => {{files.imagefields | json}}    --\x3e\n                                                    \x3c!-- multipleImgFormData --\x3e\n                                                    <div class="filefieldsmaincls">\n                                                        <ng-container class="descdiv" *ngIf="fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0">\n\n                                                            \x3c!-- fields {{fields | json}}ss --\x3e\n\n                                                            <div class="filefieldscls" *ngFor="let val of fields.imagefields;let ind=index;trackBy: trackByFnMultiple ">\n\n                                                                <br>\n\n                                                                <div *ngIf="val.type == \'text\'" class="filefields">\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                        \x3c!-- <span>if imgfields ==</span> --\x3e\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <input matInput type="text" (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                        </mat-form-field>\n                                                                    </div>\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                        \x3c!-- <span>if imgfields ++ </span> --\x3e\n\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <input matInput type="text" (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                value={{filearray[fields.name][fi].imgfields[ind].value}} matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                        </mat-form-field>\n                                                                    </div>\n\n                                                                </div>\n\n                                                                \x3c!-- [(ngModel)]="filearray[fields.name][fi].imagefields[ind].value" --\x3e\n\n                                                                <div *ngIf="val.type == \'textarea\'">\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <textarea matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                                        </mat-form-field>\n                                                                    </div>\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <textarea matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" value={{filearray[fields.name][fi].imgfields[ind].value}} [rows]=\'3\' [cols]=\'30\'></textarea>\n                                                                        </mat-form-field>\n                                                                    </div>\n\n\n                                                                </div>\n\n                                                                <div *ngIf="val.type == \'number\'">\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <input type="number" matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\n                                                                        </mat-form-field>\n                                                                    </div>\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                        <mat-form-field class="example-full-width">\n                                                                            <input type="number" matInput (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)" name="{{filearray[fields.name][fi].imagefields[ind].name}}"\n                                                                                matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" value={{filearray[fields.name][fi].imgfields[ind].value}}>\n                                                                        </mat-form-field>\n                                                                    </div>\n\n                                                                </div>\n\n\n\n                                                                <div *ngIf="val.type == \'checkbox\'">\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields == null">\n                                                                        <mat-checkbox name="{{filearray[fields.name][fi].imagefields[ind].name}}" matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" matInput (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)">\n                                                                        </mat-checkbox> &nbsp; {{val.label}}\n                                                                    </div>\n\n                                                                    <div *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\n                                                                        \x3c!-- chk = >{{filearray[fields.name][fi].imgfields[ind].value}} --\x3e\n                                                                        <mat-checkbox name="{{filearray[fields.name][fi].imagefields[ind].name}}" matInput placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}" matInput (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)"\n                                                                            [checked]="filearray[fields.name][fi].imgfields[ind].value">\n                                                                        </mat-checkbox> &nbsp; {{val.label}}\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n\n                                                            \x3c!-- </div> --\x3e\n                                                        </ng-container>\n                                                    </div>\n\n\n\n                                                    <div class="actionbtndiv">\n\n                                                        <mat-chip class="fileuploadbutton" *ngIf="files.uploaded==null " style="cursor: pointer;" mat-raised-button (click)="uploadfilemultiple(fields,files,fi)">\n                                                            Upload\n                                                        </mat-chip>\n\n                                                        <mat-chip class="deletesinglefilecls" style="cursor: pointer;" *ngIf="files.loaded != null && files.loaded==0" mat-raised-button (click)="deletesinglefilefrommultiple(fields,files,fi)">\n                                                            Delete\n                                                        </mat-chip>\n\n                                                        <mat-chip class="filedeletebutton" *ngIf="files.uploaded==1" style="cursor: pointer;" mat-raised-button (click)="deletefilemultiple(fields,files,fi)">\n                                                            Delete </mat-chip>\n                                                    </div>\n\n                                                    <section *ngIf="files.uploaded==2 " class="example-section">\n                                                        <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                                                        </mat-progress-bar>\n                                                    </section>\n                                                </div>\n                                            </div>\n                                            <br />\n                                        </ng-container>\n                                        <div class="actionbtndiv2">\n                                            <mat-chip class="uploadallfile" *ngIf="(filecount[fields.name] !=null && filecount[fields.name] !=filearray[fields.name].length ) || filecount[fields.name]==null" mat-raised-button (click)="uploadall(fields)">Upload All</mat-chip>\n                                            <mat-chip class="deleteallfile" mat-raised-button (click)="deletefilemultipleall(fields)">\n                                                Delete All\n                                            </mat-chip>\n                                        </div>\n\n                                    </ng-container>\n\n\n\n                                </div>\n                            </div>\n\n                            <mat-error *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </div>\n\n\n                        <section *ngIf="fieldloading == fields.name " class="example-section">\n                            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                            </mat-progress-bar>\n                        </section>\n                    </div>\n                </ng-container>\n\n\n\n            </ng-container>\n\n\n\n        </ng-container>\n\n\n\n        \x3c!-- <div class="aligner">\n            <div id="drop">Drop files here.</div>\n            <div id="list">\n              <h1>Uploaded Files:</h1>\n            </div>\n          </div> --\x3e\n\n        \x3c!-- <label for="singleFile">Upload file</label>\n<input id="singleFile" type="file" [fileUploadInputFor]= "fileUploadQueue"/>\n<br>\n\n<mat-file-upload-queue #fileUploadQueue\n    [fileAlias]="\'file\'"\n    [httpUrl]="\'https://tge24bc2ne.execute-api.us-east-1.amazonaws.com/dev\'">\n\n    <mat-file-upload [file]="file" [id]="i" *ngFor="let file of fileUploadQueue.files; let i = index"></mat-file-upload>\n</mat-file-upload-queue> --\x3e\n\n\n        \x3c!--<mat-form-field class="form-element">\n      <input matInput placeholder="Emailaddress" formControlName="email">\n      <mat-error *ngIf="!formGroup.controls[\'email\'].valid && formGroup.controls[\'email\'].touched">\n        {{ getErrorEmail() }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <input matInput placeholder="Name" formControlName="name">\n      <mat-error *ngIf="!name.valid && name.touched">\n        {{ titleAlert }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <textarea matInput placeholder="Description" matTextareaAutosize matAutosizeMinRows="2" matAutosizeMaxRows="5" formControlName="description"></textarea>\n      <mat-error *ngIf="!formGroup.controls[\'description\'].valid && formGroup.controls[\'description\'].touched">\n        Required field, must be between 5 and 10 characters.\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <input matInput placeholder="Password" formControlName="password">\n      <mat-hint>Choose a password of at least eight characters, one uppercase letter and one number</mat-hint>\n      <mat-error *ngIf="!formGroup.controls[\'password\'].valid && formGroup.controls[\'password\'].touched">\n        {{ getErrorPassword() }}\n      </mat-error>\n    </mat-form-field>\n\n    <div class="form-element">\n      <mat-checkbox formControlName="validate" value="1">Name min. 3 characters</mat-checkbox>\n    </div>--\x3e\n\n        <div class="form-element submitbtnsection">\n            <button mat-raised-button color="primary" type="submit" class="button" [disabled]="!formdataval.submitactive">{{formdataval.submittext}}</button>\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidecancel" type="button" class="button" (click)="navtocancel()">{{formdataval.canceltext}}</button>\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidereset" type="reset" (click)="resetformdata()" class="button">{{formdataval.resettext}}</button>\n\n            <div class="custombuttonscls" *ngIf="formdataval.custombuttons != null && formdataval?.custombuttons.length > 0">\n                <div *ngFor="let val of formdataval?.custombuttons">\n                    <button mat-raised-button color="primary" *ngIf="val?.name !=null && val?.name !=\'\'" type="button" (click)="getFormVal(val)" class="button" matTooltip="{{val?.tooltip}}">{{val?.label}}</button>\n                </div>\n            </div>\n        </div>\n\n\n    </form>\n</div>\n\n<ng-template #forminfo>\n    <div class="container">\n        {{ post | json }}\n    </div>\n</ng-template>',styles:[".drop{height:200px;width:200px;border-radius:100px;color:#fff;background-color:#baf;font-size:20px;display:flex;align-items:center}.aligner{height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column}.customheadingtitlecls{background-color:#7fffd4;font-size:x-large;text-align:center}.matimg-cls{height:112px;width:295px}.imgcls img{height:100px;width:100px}.external_buttoncls{float:right}.cropimagesdiv,.croppedImagecls,.imagecardcls{width:300px}.descdiv{margin:5px 0}.cropcls{cursor:pointer;position:absolute;right:10px;top:19px;background:#fffffff2;border-radius:3px;padding:2px}.hidecls{display:none}"]}]}],Yi.ctorParameters=function(){return[{type:forms.FormBuilder},{type:ApiService},{type:snackBar.MatSnackBar},{type:router.Router},{type:i0.ElementRef}]},Yi.propDecorators={formDirective:[{type:i0.ViewChild,args:[forms.FormGroupDirective]}],formdata:[{type:i0.Input}],formfieldrefreshdata:[{type:i0.Input}],formfieldrefresh:[{type:i0.Input}],custombuttons:[{type:i0.Input}],externaldatavalue:[{type:i0.Input}],onFormFieldChange:[{type:i0.Output}],timeChanged:[{type:i0.Output}]},Yi);function Yi(e,a,n,t,i){var o=this;this.formBuilder=e,this._apiService=a,this._snackBar=n,this.router=t,this.elementRef=i,this.formatFlag=!1,this.autosearchpostflag=!1,this.dateflag=!1,this.PasswordVal="",this.externalDataVal=[],this.customlistenbuttons={},this.subscriptions=[],this.subscriptioncount=0,this.autoquerychanged=new rxjs.Subject,this.filechoosersingleTypeFlag=!1,this.filechoosermultipleTypeFlag=!1,this.titleAlert="This field is required",this.post="",this.showform=!1,this.loading=!1,this.formfieldrefreshval=!1,this.formdataval={},this.formfieldrefreshdataval={},this.filerfielddata=[],this.autocompletefiledvalue=[],this.filearray=[],this.filecount=[],this.currentautocomplete="",this.fieldloading="",this.isPasswordVisible=!0,this.singleImgFormData=[],this.imgValue="",this.numberFormatFlag=!1,this.phonenumberValue="",this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.onFormFieldChange=new i0.EventEmitter,this.timeChanged=new i0.EventEmitter,this.imageChangedEvent="",this.croppedImage="",this.subscriptions[this.subscriptioncount++]=this.autoquerychanged.pipe(operators.debounceTime(1500)).subscribe(function(e){o.autosearchpostflag=!0;var a=e.data,n=e.val;console.log("this.formdataval.fields",o.formdataval.fields,"this.formdataval.groups",o.formdataval.groups),o.filerfielddata=[],a.showautoprogressbar=!0;var t=o.formdataval.apiUrl+a.endpoint,i={formvalue:o.formGroup.value},l={};l[a.search_field]=o.formGroup.controls[n].value,i.searchcondition=l,o._apiService.postSearch(t,o.formdataval.jwttoken,i).subscribe(function(e){a.showautoprogressbar=!1,"success"==e.status&&(0==e.res.length&&o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No Records Found!!"}}),0!=e.res.length&&(o.filerfielddata=[],o.filerfielddata=e.res,null==a.val&&(a.val=[]),a.val=a.val.concat(e.res),a.val=o.unique(a.val,"key")))})})}var DemoMaterialModule=(Gn.decorators=[{type:i0.NgModule,args:[{exports:[a11y.A11yModule,stepper.CdkStepperModule,table.CdkTableModule,tree.CdkTreeModule,dragDrop.DragDropModule,material.MatAutocompleteModule,material.MatBadgeModule,material.MatBottomSheetModule,material.MatButtonModule,material.MatButtonToggleModule,material.MatCardModule,material.MatCheckboxModule,material.MatChipsModule,material.MatStepperModule,material.MatDatepickerModule,material.MatDialogModule,material.MatDividerModule,material.MatExpansionModule,material.MatGridListModule,material.MatIconModule,material.MatInputModule,material.MatListModule,material.MatMenuModule,material.MatNativeDateModule,material.MatPaginatorModule,material.MatProgressBarModule,material.MatProgressSpinnerModule,material.MatRadioModule,material.MatRippleModule,material.MatSelectModule,material.MatSidenavModule,material.MatSliderModule,material.MatSlideToggleModule,material.MatSnackBarModule,material.MatSortModule,material.MatTableModule,material.MatTabsModule,material.MatToolbarModule,material.MatTooltipModule,material.MatTreeModule,portal.PortalModule,scrolling.ScrollingModule]}]}],Gn);function Gn(){}var YoutubeplayerComponent=(Object.defineProperty(Hn.prototype,"videoid",{set:function(e){this.id=e||"<no name set>",this.id=this.sanitizer.bypassSecurityTrustResourceUrl("https://www.youtube.com/embed/"+e+"?autoplay=1")},enumerable:!0,configurable:!0}),Hn.prototype.ngOnInit=function(){},Hn.decorators=[{type:i0.Component,args:[{selector:"lib-youtubeplayer",template:'\n<iframe width="560" height="300" [src]="id" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>',styles:[""]}]}],Hn.ctorParameters=function(){return[{type:platformBrowser.DomSanitizer}]},Hn.propDecorators={videoid:[{type:i0.Input}]},Hn);function Hn(e){this.sanitizer=e}var CustomdataPipe=(Kn.prototype.transform=function(e,a,n){return"dollar"!=a.match(/dollar/g)&&"currency"!=a.match(/currency/g)?n:"$"+n},Kn.decorators=[{type:i0.Pipe,args:[{name:"CustomPipe"}]}],Kn);function Kn(){}var PhoneFormatingDirective=(Pn.prototype.onModelChange=function(e){this.onInputChange(e,!1)},Pn.prototype.keydownBackspace=function(e){this.onInputChange(e.target.value,!0)},Pn.prototype.onInputChange=function(e,a){if(null!=e&&void 0!==e){var n=e.replace(/\D/g,"");a&&n.length<=6&&(n=n.substring(0,n.length-1)),n=0===n.length?e.replace(/\D/g,""):n.length<=3?n.replace(/^(\d{0,3})/,"($1)"):n.length<=6?n.replace(/^(\d{0,3})(\d{0,3})/,"($1) $2"):n.length<=10?n.replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/,"($1) $2-$3"):(n=n.substring(0,10)).replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/,"($1) $2-$3"),this.ngControl.valueAccessor.writeValue(n)}},Pn.decorators=[{type:i0.Directive,args:[{selector:"[formControlName][appPhoneMask]"}]}],Pn.ctorParameters=function(){return[{type:forms.NgControl}]},Pn.propDecorators={onModelChange:[{type:i0.HostListener,args:["ngModelChange",["$event"]]}],keydownBackspace:[{type:i0.HostListener,args:["keydown.backspace",["$event"]]}]},Pn);function Pn(e){this.ngControl=e}function __values(e){var a="function"==typeof Symbol&&e[Symbol.iterator],n=0;return a?a.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}var LanguageTransletPipe=(Zn.prototype.transform=function(e){var a,n;try{for(var t=__values(this.languageDataSet),i=t.next();!i.done;i=t.next()){var l=i.value;if(l.en==e)return l[this.convertToLanguageCode]}}catch(o){a={error:o}}finally{try{i&&!i.done&&(n=t["return"])&&n.call(t)}finally{if(a)throw a.error}}return e},Zn.decorators=[{type:i0.Pipe,args:[{name:"languageTranslet"}]}],Zn.ctorParameters=function(){return[{type:ObservableserviceService},{type:ApiService}]},Zn);function Zn(e,a){var n=this;this.observableService=e,this.apiService=a,this.languageDataSet=[],this.convertToLanguageCode="",this.apiUrl="",this.dataSet=[];this.observableService.getmultilingualData().subscribe(function(e){n.languageDataSet=e}),this.observableService.getconvertToLanguage().subscribe(function(e){n.convertToLanguageCode=e}),this.observableService.getapiUrl().subscribe(function(e){n.apiUrl=e})}var ListingModule=(qo.decorators=[{type:i0.NgModule,args:[{declarations:[ListingComponent,Confirmdialog,BottomSheet,YoutubeplayerComponent,VideoPlayer,ImageView,SnackbarComponent,ShowformComponent,CustomdataPipe,ModalForButtomSearch,PhoneFormatingDirective,LanguageTransletPipe,DeleteNotesModal],imports:[common.CommonModule,DemoMaterialModule,forms.FormsModule,forms.ReactiveFormsModule,router.RouterModule,ngxMoment.MomentModule,ng2Ckeditor.CKEditorModule,ngxImageCropper.ImageCropperModule,ngxMaterialTimepicker.NgxMaterialTimepickerModule],schemas:[i0.CUSTOM_ELEMENTS_SCHEMA],exports:[ListingComponent,ShowformComponent],providers:[ApiService,ObservableserviceService],entryComponents:[Confirmdialog,BottomSheet,VideoPlayer,ImageView,SnackbarComponent,ModalForButtomSearch,DeleteNotesModal]}]}],qo);function qo(){}exports.ListingService=ListingService,exports.ListingComponent=ListingComponent,exports.Confirmdialog=Confirmdialog,exports.DeleteNotesModal=DeleteNotesModal,exports.BottomSheet=BottomSheet,exports.ModalForButtomSearch=ModalForButtomSearch,exports.VideoPlayer=VideoPlayer,exports.ImageView=ImageView,exports.SnackbarComponent=SnackbarComponent,exports.ShowformComponent=ShowformComponent,exports.ListingModule=ListingModule,exports.ɵa=ApiService,exports.ɵd=CustomdataPipe,exports.ɵe=PhoneFormatingDirective,exports.ɵg=DemoMaterialModule,exports.ɵf=LanguageTransletPipe,exports.ɵb=ObservableserviceService,exports.ɵc=YoutubeplayerComponent,Object.defineProperty(exports,"__esModule",{value:!0})});
//# sourceMappingURL=listing-angular7.umd.min.js.map