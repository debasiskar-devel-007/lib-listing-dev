!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/cdk/collections"),require("ngx-uploader"),require("ngx-cookie-service"),require("rxjs/operators"),require("@angular/common/http"),require("@angular/animations"),require("moment"),require("rxjs"),require("@angular/material/snack-bar"),require("@angular/cdk/a11y"),require("@angular/cdk/drag-drop"),require("@angular/cdk/portal"),require("@angular/cdk/scrolling"),require("@angular/cdk/stepper"),require("@angular/cdk/table"),require("@angular/cdk/tree"),require("@angular/material"),require("@angular/common"),require("ngx-moment"),require("@angular/router"),require("@angular/platform-browser"),require("ng2-ckeditor"),require("ngx-image-cropper"),require("@angular/core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("listing-angular7",["exports","@angular/cdk/collections","ngx-uploader","ngx-cookie-service","rxjs/operators","@angular/common/http","@angular/animations","moment","rxjs","@angular/material/snack-bar","@angular/cdk/a11y","@angular/cdk/drag-drop","@angular/cdk/portal","@angular/cdk/scrolling","@angular/cdk/stepper","@angular/cdk/table","@angular/cdk/tree","@angular/material","@angular/common","ngx-moment","@angular/router","@angular/platform-browser","ng2-ckeditor","ngx-image-cropper","@angular/core","@angular/forms"],t):t(e["listing-angular7"]={},e.ng.cdk.collections,e.ngxUploader,e.ngxCookieService,e.rxjs.operators,e.ng.common.http,e.ng.animations,e.momentImported,e.rxjs,e.ng.material["snack-bar"],e.ng.cdk.a11y,e.ng.cdk["drag-drop"],e.ng.cdk.portal,e.ng.cdk.scrolling,e.ng.cdk.stepper,e.ng.cdk.table,e.ng.cdk.tree,e.ng.material,e.ng.common,e.ngxMoment,e.ng.router,e.ng.platformBrowser,e.ng2Ckeditor,e.ngxImageCropper,e.ng.core,e.ng.forms)}(this,function(exports,collections,ngxUploader,ngxCookieService,operators,http,animations,momentImported,rxjs,snackBar,a11y,dragDrop,portal,scrolling,stepper,table,tree,material,common,ngxMoment,router,platformBrowser,ng2Ckeditor,ngxImageCropper,i0,forms){"use strict";var ListingService=(d.decorators=[{type:i0.Injectable,args:[{providedIn:"root"}]}],d.ctorParameters=function(){return[]},d.ngInjectableDef=i0.defineInjectable({factory:function(){return new d},token:d,providedIn:"root"}),d);function d(){}var ApiService=(f.prototype.onUploadOutput=function(t,e,a,n){if("allAddedToQueue"===t.type){var r={type:"uploadAll",url:"http://developmentapi.audiodeadline.com:7031/uploads",method:"POST",data:{path:n}};this.uploadInput.emit(r)}else if("addedToQueue"===t.type&&"undefined"!=typeof t.file)""!=t.file.response&&(this.files=[],this.files.push(t.file),console.log("this.files*********"),console.log(this.files),this.lengthis=this.files.length,this.percentageis=this.files[0].progress.data.percentage);else if("uploading"===t.type&&"undefined"!=typeof t.file){var i=this.files.findIndex(function(e){return"undefined"!=typeof t.file&&e.id===t.file.id});this.files[i]=t.file,this.lengthis=this.files.length,null!=this.files[0]&&null!=this.files[0].progress&&(this.percentageis=this.files[0].progress.data.percentage),console.log("this.files=================="),console.log(this.files)}else"removed"===t.type?this.files=this.files.filter(function(e){return e!==t.file}):"dragOver"===t.type?this.dragOver=!0:"dragOut"===t.type?this.dragOver=!1:"drop"===t.type&&(this.dragOver=!1);if(console.log("files"),console.log(this.files),null!=this.files[0]&&null!=this.files[0].progress&&(null==this.progress[e]&&(this.progress[e]=0),this.inprogress=!0,console.log("file upload progressing"),console.log(this.files[0].progress.data.percentage),this.progress[e]=this.files[0].progress.data.percentage,100==this.progress[e]&&(this.progress[e]=null,this.inprogress=null),console.log("this.uploadtype in api service"),console.log(a)),"single"==a&&(null==this.fileservername[e]&&(this.fileservername[e]=[]),this.fileservername[e]=[],null!=this.files[0].response&&this.fileservername[e].push(this.files[0].response)),"multiple"==a&&(console.log("this.files[0].response"),console.log(this.files.length),console.log(this.files),null==this.fileservername[e]&&(this.fileservername[e]=[]),1==this.files.length&&(this.files[0]&&null!=this.files[0].response&&null==this.files[0].response.error_code&&(this.fileservername[e].push(this.files[0].response),this.files=[],this.uploaderror=""),null!=this.files[0]&&null!=this.files[0].response&&null!=this.files[0].response.error_code&&(this.uploaderror="error occured on uploading !!!")),1<this.files.length)){for(var l in console.log("sdfdsf==== in multiple length "),this.files)null!=this.files[l].response&&null==this.files[l].response.error_code&&this.fileservername[e].push(this.files[l].response);this.files=[]}console.log("this.fileservername"),console.log(this.fileservername),console.log(this.uploaderror)},f.prototype.isTokenExpired=function(){},f.prototype.getclientip=function(){return console.log("endpoint"),this._http.get("http://ipinfo.io/?format=json&token=9797c42b93078a").pipe(operators.map(function(e){return e}))},f.prototype.getEndpoint=function(e){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(t),console.log(""),this._http.post(""+e.source,{},t).pipe(operators.map(function(e){return e}))},f.prototype.getData=function(e){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(t),console.log(""),this._http.post("datalist",e,t).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postData=function(e,t){var a={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:t.token})};return console.log(""),console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(a),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postDatawithoutToken=function(e,t){var a={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return console.log(""),console.log("endpoint"),console.log(e),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postlogin=function(e,t){var a={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return console.log(""),console.log("endpoint"),console.log(e),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch=function(e,t,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:t})};return a.secret=this.secretkey,a.token=t,this._http.post(e,a,n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch1=function(e,t){return new http.HttpHeaders({"Content-Type":"application/json",Authorization:t.token}),console.log("------ "),console.log("link"),console.log(e),this._http.post(e,t).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.putData=function(e,t,a){var n={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log(""),console.log("endpoint"),console.log(e),this._http.put(this.getEndpointUrl(e)+"/"+a,JSON.stringify(t),n).pipe(operators.map(function(e){return e}))},f.prototype.deteOneData=function(e,t,a,n){var r,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a})};return(r={source:n,id:t._id}).secret=this.secretkey,r.token=a,this._http.post(e,r,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatus=function(e,t,a,n){var r,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a})};return(r={source:n,data:t}).secret=this.secretkey,r.token=a,this._http.post(e,r,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.deteManyData=function(e,t,a,n){var r,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a})};return(r={source:n,ids:t}).secret=this.secretkey,r.token=a,this._http.post(e+"many",r,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatusmany=function(e,t,a,n,r){var i,l={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(i={source:r,data:{ids:t,val:a}}).secret=this.secretkey,i.token=n,this._http.post(e+"many",i,l).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.getEndpointUrl=function(e){return""+e},f.decorators=[{type:i0.Injectable}],f.ctorParameters=function(){return[{type:http.HttpClient},{type:http.HttpClient},{type:ngxCookieService.CookieService}]},f.propDecorators={uploaderInput:[{type:i0.ViewChild,args:["fileInput1"]}]},f);function f(e,t,a){this._http=e,this._authHttp=t,this.cookieService=a,this.domain_for_fileupload_val="http://developmentapi.audiodeadline.com:7031/uploadsuploads",this.progress=[],this.uploaderror="",this.secretkey="na",this.fileservername=[],this.options={concurrency:10,maxUploads:10},this.files=[],this.uploadInput=new i0.EventEmitter,this.humanizeBytes=ngxUploader.humanizeBytes,this.cookieService.check("secret")&&(this.secretkey=this.cookieService.get("secret"))}var moment=momentImported,ListingComponent=function(){function ListingComponent(e,t,a,n,r,i,l,o,s,d,c){var m=this;this._apiService=e,this.dialog=t,this.bottomSheet=a,this.fb=n,this.router=r,this.resolver=i,this.container=l,this._http=o,this.sanitizer=s,this._snackBar=d,this._elementRef=c,this.myControl=new forms.FormControl,this.rescount=0,this.columns=[],this.autosearchinput=[],this.currentautosearcharr=[],this.olddata=[],this.tsearch=[],this.tableflag=0,this.autosearch=[],this.libdataval={},this.limitcondval={},this.result={},this.sortdataval={},this.sh=!1,this.art=!1,this.aud2=!1,this.aud=!1,this.updatetableval=!1,this.loaderrow=null,this.customButtonFlagVal={},this.allSearchCond=[],this.searchbuttonval=[],this.searchBarFlag=!1,this.searchBarToolTip="Open Search Bar",this.searchBarFlagVal=!1,this.recordFoundFlag=!1,this.recordFoundData="",this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.previewFlug=!1,this.selectsearch=[],this.initiateSearch=!1,this.onLiblistingChange=new i0.EventEmitter,this.onLiblistingButtonChange=new i0.EventEmitter,this.searchstrsarr=[],this.oldlimitrange=[],this.displayedColumns=[],this.datacolumns=[],this.displayedColumnsheader=[],this.formarray=[],this.dateSearch_condition={},this.selectSearch_condition={},this.autoSearch_condition={},this.textSearch_condition={},this.loading=!1,this.preresult={},this.buttonSearchData=[],this.dataSource=new material.MatTableDataSource,this.modelChanged=new rxjs.Subject,this.modelChangedserver=new rxjs.Subject,this.pagechanged=new rxjs.Subject,this.subscriptions=[],this.subscriptioncount=0,this.tableFooterColumns=[],this.testvalue="s1",this.pages=[],this.stateGroups=this.searchListval,this.router.events.subscribe(function(e){switch(!0){case e instanceof router.NavigationStart:m.loading=!0;break;case e instanceof router.NavigationEnd:case e instanceof router.NavigationCancel:case e instanceof router.NavigationError:m.loading=!1}}),this.subscriptions[this.subscriptioncount++]=this.modelChanged.pipe(operators.debounceTime(500)).subscribe(function(){m.filterautoval(m.currentautocompleteitem)}),this.subscriptions[this.subscriptioncount++]=this.modelChangedserver.pipe(operators.debounceTime(500)).subscribe(function(){if(null!=m.autosearchinput[m.currentautocompleteitem.field]&&""!=m.autosearchinput[m.currentautocompleteitem.field]){var e,t=m.apiurlval+""+m.currentautocompleteitem.serversearchdata.endpoint;e={search_str:m.autosearchinput[m.currentautocompleteitem.field],sort:{field:m.sortdataval.field,type:m.sortdataval.type}},m.date_search_source_countval=0,m.loading=!0,m.subscriptions[m.subscriptioncount++]=m._apiService.postSearch(t,m.jwttokenval,e).subscribe(function(e){var t;m.loading=!1,null!=(t=e)&&null!=t.results&&null!=t.results.res&&(m.rescount=t.results.res.length),null!=t.res&&0<t.res.length?(m.currentautosearcharr=t.res,m._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New Search of data loaded "}})):(m.currentautosearcharr=[],m._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No such search record found !!"}})),m.loading=!1})}})}return Object.defineProperty(ListingComponent.prototype,"search_settings",{set:function(e){this.search_settingsval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"click_to_add_ananother_page",{set:function(e){this.click_to_add_ananother_pageval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"limitcond",{set:function(e){this.limitcondval=e,this.oldlimitrange.push(e)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source_count",{set:function(e){this.date_search_source_countval=e,0==this.date_search_source_countval&&(this.limitcondval.pagecount=1)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"grab_link",{set:function(e){this.grab_linkval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"custombutton",{set:function(e){this.custombuttonval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source",{set:function(e){this.date_search_sourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sortdata",{set:function(e){this.sortdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_endpoint",{set:function(e){this.date_search_endpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"url",{set:function(e){this.urlval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchendpoint",{set:function(e){this.searchendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"pdf_link",{set:function(e){this.pdf_link_val=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchList",{set:function(e){this.searchListval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"libdata",{set:function(e){var t=this;this.libdataval=[],this.libdataval=e,console.log("libdataval",this.libdataval),"undefined"!=typeof this.libdataval.pages&&null!=this.libdataval.pages&&(this.pages=this.libdataval.pages),null!=e.searchBarFlagVal&&""!=e.searchBarFlagVal?setTimeout(function(){t.searchBarFlagVal=e.searchBarFlagVal},1e3):this.searchBarFlag=!0,null!=e.recordfoundflag&&""!=e.recordfoundflag&&null!=e.recordfounddata?setTimeout(function(){t.recordFoundFlag=e.recordfoundflag,t.recordFoundData=e.recordfounddata},1e3):this.recordFoundFlag=!1},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datasource",{set:function(e){this.datasourceval=[],this.datasourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datacollection",{set:function(e){this.datacollectionval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"skip",{set:function(e){this.skipval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_datatype",{set:function(e){this.detail_datatypeval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_skip_array",{set:function(e){this.detail_skip_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sourcedata",{set:function(e){this.sourcedataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"modify_header_array",{set:function(e){this.modify_header_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"deleteendpoint",{set:function(e){this.deleteendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updateendpoint",{set:function(e){this.updateendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"apiurl",{set:function(e){this.apiurlval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updatetable",{set:function(e){this.updatetableval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"jwttoken",{set:function(e){this.jwttokenval=null!=e?e:""},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"statusarr",{set:function(e){this.statusarrval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"emailarray",{set:function(e){this.emailarrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"editroute",{set:function(e){this.editrouteval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"preview_artistxp",{set:function(e){this.previewFlug=!0},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"customlistenbutton",{set:function(e){this.customButtonFlagVal=e},enumerable:!0,configurable:!0}),ListingComponent.prototype.ngOnChanges=function(e){for(var t in e)"updatetable"==t&&null!=e[t].previousValue&&(this.selection.clear(),this.allSearch())},ListingComponent.prototype.inputblur=function(e){this.myForm.controls[e].markAsUntouched()},ListingComponent.prototype.ngOnInit=function(){var _this=this;this.stateGroup=this.myControl.valueChanges.pipe(operators.startWith(""),operators.map(function(e){return _this._filter(e)})),this.x=this.datasourceval;var x=this.x;this.datasourceval&&(this.rescount=this.datasourceval.length);var temp=[],keys=x[0];temp=Object.keys(keys);for(var coldef_list=[],header_list=[],i=0;i<temp.length;i++)coldef_list.push(temp[i].replace(/\s/g,"_")),header_list.push(temp[i]);this.columns=[];for(var _loop_1=function(i){var ff="row."+coldef_list[i],tt={columnDef:""+coldef_list[i],header:""+header_list[i],tooltip:""+header_list[i],cell:function(row){return eval(ff)},objlength:header_list.length};for(var b in this_1.modify_header_arrayval)b==tt.header&&(tt.header=this_1.modify_header_arrayval[b]);if(null!=this_1.libdataval.header_tooltip_array&&"undefined"!=typeof this_1.libdataval.header_tooltip_array)for(var b in this_1.libdataval.header_tooltip_array)b==tt.tooltip&&(tt.tooltip=this_1.libdataval.header_tooltip_array[b]);-1==this_1.skipval.indexOf(tt.columnDef)&&this_1.columns.push(tt)},this_1=this,i=0;i<coldef_list.length;i++)_loop_1(i);var displayedcols=[];this.tableflag=1,setTimeout(function(){_this.tableflag=0},100),displayedcols=this.columns.map(function(e){return e.columnDef}),null!=this.libdataval.footersettings?this.tableFooterColumns=this.libdataval.footersettings.map(function(e){return e.key}):this.tableFooterColumns=[];var customcols=[];if(null!=this.libdataval&&null!=this.libdataval.tableheaders&&(customcols=this.libdataval.tableheaders),null!=customcols&&0<customcols.length){var ccolval="";for(var v in customcols)if(0==displayedcols.includes(customcols[v])){for(var b in this.modify_header_arrayval)b==customcols[v]&&(ccolval=this.modify_header_arrayval[b]);this.columns.push({columnDef:customcols[v],header:ccolval,cell:"NA"})}displayedcols=customcols}null!=this.libdataval.hideaction&&0!=this.libdataval.hideaction||(displayedcols.push(null==this.libdataval.actioncolname?"Actions":this.libdataval.actioncolname),this.columns.push({columnDef:null==this.libdataval.actioncolname?"Actions":this.libdataval.actioncolname,header:"Actions",cell:"NA"})),null!=this.libdataval.hidecounter&&0!=this.libdataval.hidecounter||(displayedcols.unshift("#"),this.columns.push({columnDef:"#",header:"#",cell:"NA"})),this.displayedColumns=[],this.displayedColumns=displayedcols,1!=this.libdataval.hidemultipleselectbutton&&(this.displayedColumns.unshift("select"),this.columns.push({columnDef:"select",header:"select",cell:"NA"}));var tempcolarr=[],tempcolarr2=[];for(var n in this.columns.reverse(),this.columns)-1==tempcolarr.indexOf(this.columns[n].columnDef)&&tempcolarr2.push(this.columns[n]),tempcolarr.push(this.columns[n].columnDef);this.columns=tempcolarr2,this.displayedColumns=Array.from(new Set(this.displayedColumns));for(var data_list=[],i=0;i<this.x.length;i++)data_list.push(this.createData(x[i]));this.olddata=data_list,this.dataSource=new material.MatTableDataSource([]),this.dataSource=new material.MatTableDataSource(data_list),this.selection=new collections.SelectionModel(!0,[]),this.expandedElement=this.dataSource,setTimeout(function(){if(null!=_this.search_settingsval.selectsearch)for(var e in _this.search_settingsval.selectsearch)null!=_this.search_settingsval.selectsearch[e].value&&""!=_this.search_settingsval.selectsearch[e].value&&(_this.selectsearch[_this.search_settingsval.selectsearch[e].field]=_this.search_settingsval.selectsearch[e].value,_this.initiateSearch=!0,_this.selectSearch_condition[_this.search_settingsval.selectsearch[e].field]=_this.search_settingsval.selectsearch[e].value);if(null!=_this.search_settingsval.textsearch)for(var e in _this.search_settingsval.textsearch)null!=_this.search_settingsval.textsearch[e].value&&""!=_this.search_settingsval.textsearch[e].value&&(_this.tsearch[_this.search_settingsval.textsearch[e].field]=_this.search_settingsval.textsearch[e].value,_this.initiateSearch=!0);if(null!=_this.search_settingsval.search)for(var t in _this.search_settingsval.search)if(null!=_this.search_settingsval.search[t].value&&""!=_this.search_settingsval.search[t].value&&0<_this.search_settingsval.search[t].value.length)for(var a in _this.initiateSearch=!0,null==_this.autosearch[_this.search_settingsval.search[t].field]&&(_this.autosearch[_this.search_settingsval.search[t].field]=[]),_this.search_settingsval.search[t].value)_this.autosearch[_this.search_settingsval.search[t].field].push({val:_this.search_settingsval.search[t].value[a].val,name:_this.search_settingsval.search[t].value[a].name});if(null!=_this.search_settingsval.datesearch&&null!=_this.search_settingsval.datesearch[0].value&&""!=_this.search_settingsval.datesearch[0].value&&(_this.initiateSearch=!0,_this.search_settingsval.datesearch[0].value.$lte=_this.search_settingsval.datesearch[0].value.$lte-86399e3,_this.start_date=moment(new Date(_this.search_settingsval.datesearch[0].value.$gte)).format("YYYY-MM-DD").toString(),_this.end_date=moment(new Date(_this.search_settingsval.datesearch[0].value.$lte)).format("YYYY-MM-DD").toString(),_this.search_settingsval.datesearch[0].value.$lte=_this.search_settingsval.datesearch[0].value.$lte+86399e3,_this.dateSearch_condition[_this.search_settingsval.datesearch[0].field]=_this.search_settingsval.datesearch[0].value),null!=_this.search_settingsval.buttonsearch)for(var n in _this.search_settingsval.buttonsearch){var r;r=parseInt(n),null!=_this.search_settingsval.buttonsearch[n].values&&""!=_this.search_settingsval.buttonsearch[n].values&&(_this.initiateSearch=!0,_this.buttonSearchData.push({field:_this.search_settingsval.buttonsearch[n].field,key:r,value:_this.search_settingsval.buttonsearch[n].values}))}1==_this.initiateSearch&&_this.allSearch()},1e3)},ListingComponent.prototype.CustomButtonListen=function(e){this.onLiblistingButtonChange.emit({action:"customlistenbutton",limitdata:this.limitcondval,sortdata:this.sortdataval,selecteddata:this.selection.selected,searchdata:this.search_settingsval,buttondata:e,allSearchCond:this.allSearchCond,autoSearchVal:this.autosearch,buttonSearchData:this.buttonSearchData})},ListingComponent.prototype.img_modal_view=function(e){this.dialog.open(ImageView,{panelClass:["custom-modalbox","custom-modalbox-image-preview"],height:"auto",data:{alldata:e}})},ListingComponent.prototype.ngAfterContentInit=function(){},ListingComponent.prototype.ngAfterViewInit=function(){var a=this;setTimeout(function(){if(null!=a.libdataval&&null!=a.libdataval.cssoverridesoncelltorow)for(var e in a.libdataval.cssoverridesoncelltorow){var t=a.upTo(a._elementRef.nativeElement.querySelector("."+a.libdataval.cssoverridesoncelltorow[e].key),"tr");null!=t&&t.classList.add(a.libdataval.cssoverridesoncelltorow[e].val)}},2e3)},ListingComponent.prototype.SearchBarToggle=function(e){switch(this.onLiblistingButtonChange.emit({action:"searchbar",flag:e}),e){case!0:this.searchBarFlag=!1,this.searchBarToolTip="Open Search Bar";break;case!1:this.searchBarFlag=!0,this.searchBarToolTip="Close Search Bar"}},ListingComponent.prototype.upTo=function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if((e=e.parentNode).tagName&&e.tagName.toLowerCase()==t)return e;return null},ListingComponent.prototype.ngAfterContentChecked=function(){},ListingComponent.prototype.ngOnDestroy=function(){this.subscriptions.forEach(function(e){return e.unsubscribe()})},ListingComponent.prototype.clickmultipleselectoption=function(e){this.onLiblistingChange.emit({action:"multipleselectoptionclick",limitdata:this.limitcondval,sortdata:this.sortdataval,selecteddata:this.selection.selected,btndata:e})},ListingComponent.prototype.onSubmit=function(){var e;this.errormg="";this.myForm.value;for(e in this.myForm.controls)this.myForm.controls[e].markAsTouched()},ListingComponent.prototype.dateSearch=function(e,t){this.searchstrsarr.push({val:this.tsearch[e],label:t.label,key:e});this.apiurlval,this.datacollectionval,this.apiurlval,this.datacollectionval;var a,n={};if(a={},this.limitcondval.pagecount=1,this.limitcondval.skip=0,null==moment(this.end_date).unix()||null==moment(this.start_date).unix())console.log("error");else{for(var r in this.dateSearch_condition={},this.dateSearch_condition=a,null!=this.end_date&&null!=this.start_date&&(a[e]={$gte:new Date(this.start_date).getTime(),$lte:new Date(this.end_date).getTime()+86399e3}),null==this.start_date||null!=this.end_date&&0!=this.end_date.length||(a[e]={$gte:new Date(this.start_date).getTime()}),null==this.end_date||null!=this.start_date&&0!=this.start_date.length||(a[e]={$lte:new Date(this.end_date).getTime()+86399e3}),this.tsearch)null!=this.tsearch[r]&&""!=this.tsearch[r]&&(n[r]={$regex:this.tsearch[r].toString().toLowerCase()});var i={};for(var l in this.autosearch)for(var o in this.autosearch[l]){var s={};s[l]=this.autosearch[l][o].val.toString().toLowerCase(),null==i.$or&&(i.$or=[]),i.$or.push(s)}var d=Object.assign({},n,this.dateSearch_condition,i,this.selectSearch_condition,this.libdataval.basecondition);({condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:d})}},ListingComponent.prototype.selectSearch=function(e,t,a){this.searchstrsarr[t.field]={val:a.name,label:t.label,key:t.field};null!=this.tsearch&&null!=this.tsearch[e]&&this.tsearch[e].toString().toLowerCase();this.apiurlval,this.date_search_endpointval;({})[t.field]=e,this.selectSearch_condition[t.field]=e;var n=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);this.date_search_sourceval},ListingComponent.prototype.paging=function(e,t){var a=this;null==this.limitcondval.pagecount&&(this.limitcondval.pagecount=1),null==this.limitcondval.limit&&(this.limitcondval.limit=10),null!=this.limitcondval.limit&&100<this.limitcondval.limit&&("selectpaging"!=t&&(this.limitcondval.limit=100),this._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"You can see maximum 100 records at once !"}}));var n=Number(this.date_search_source_countval/this.limitcondval.limit);if(n=~~n,1==e&&(this.limitcondval.skip=this.limitcondval.pagecount*this.limitcondval.limit,this.limitcondval.pagecount++),!(-1==e&&this.limitcondval.skip<this.limitcondval.limit)){-1==e&&this.limitcondval.skip>=this.limitcondval.limit&&(this.limitcondval.skip=(this.limitcondval.pagecount-2)*this.limitcondval.limit,this.limitcondval.pagecount--),1<e&&(1==this.limitcondval.pagecount?this.limitcondval.skip=0:this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit),this.limitcondval.pagecount>n+1&&(this.limitcondval.pagecount=n+1,this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit);var r={};for(var i in this.tsearch)null!=this.tsearch[i].toString().toLowerCase()&&""!=this.tsearch[i].toString().toLowerCase()&&(r[i]={$regex:this.tsearch[i].toString().toLowerCase()});var l={};for(var o in this.autosearch)for(var s in this.autosearch[o]){var d={};d[o]=this.autosearch[o][s].val.toString().toLowerCase(),null==l.$or&&(l.$or=[]),l.$or.push(d)}var c=Object.assign({},r,this.dateSearch_condition,l,this.selectSearch_condition,this.libdataval.basecondition),m={condition:{limit:this.limitcondval.limit,skip:this.limitcondval.skip},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:c},u=this.apiurlval+""+this.datacollectionval;this.loading=!0,this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(u,this.jwttokenval,m).subscribe(function(e){a.result=e,null!=a.result.results.res&&0<a.result.results.res.length?(a.onLiblistingChange.emit({action:"paging",limitdata:a.limitcondval,searchcondition:c,sortdata:a.sortdataval,results:a.result.results.res}),a.dataSource=new material.MatTableDataSource(a.result.results.res),a._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New range of data loaded"}})):a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No Data Found in this range !!"}}),a.loading=!1}),this.selection.clear()}},ListingComponent.prototype.addautosearchdata=function(e){},ListingComponent.prototype.remove=function(e,t,a){null!=this.autosearch[a]&&this.autosearch[a].splice(t,1)},ListingComponent.prototype.autocompletechangedetected=function(e){this.currentautocompleteitem=e,this.currentautosearcharr=[],null==this.currentautocompleteitem.serversearchdata?this.modelChanged.next():this.modelChangedserver.next()},ListingComponent.prototype.filterautoval=function(e){var t=this.autosearchinput[e.field];if(this.currentautosearcharr=[],null!=this.autosearchinput[e.field]&&""!=this.autosearchinput[e.field]){var a=e.values.filter(function(e){return e.name.toString().toLowerCase().includes(t.toLowerCase())});this.currentautosearcharr=a}},ListingComponent.prototype.resetautocomp=function(e){document.querySelector("#autocompletesearch"+e.field).value=""},ListingComponent.prototype.autosearchfunction=function(e,t,a){this.searchstrsarr.push({val:this.autosearchinput[e],label:a.label,key:e}),null==this.autosearch[e]&&(this.autosearch[e]=[]),this.autosearch[e].push(t),this.autosearchinput[e]=null,this.currentautosearcharr=[],document.querySelector("#autocompletesearch"+e).value=""},ListingComponent.prototype.textsearchfunction=function(e,t){if(""==this.tsearch[e]){this.searchstrsarr.indexOf(this.searchstrsarr[e]);delete this.searchstrsarr[e]}else this.searchstrsarr[e]={val:this.tsearch[e],label:t.label,key:e};this.apiurlval,this.date_search_endpointval;var a={},n="";null!=this.tsearch&&null!=this.tsearch[e]&&(n=this.tsearch[e].toString().toLowerCase()),null!=this.tsearch[e]&&1<this.tsearch[e].length&&{$or:[this.tsearch[e].toString().toLowerCase(),this.tsearch[e].toUpperCase()]}&&(a[e+"_regex"]=n),this.textSearch_condition={},this.textSearch_condition=a;var r=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);this.date_search_sourceval},ListingComponent.prototype.refreshdata=function(){this.autosearch=[],this.tsearch=[],this.selectsearch=[],this.start_date=null,this.limitcondval.skip=0,this.end_date=null,this.selectSearch_condition={},this.dateSearch_condition={},this.allSearch(),this.selection.clear(),this.allSearchCond=[],this.buttonSearchData=[]},ListingComponent.prototype.refreshalldata=function(e){if(this.dataSource=new material.MatTableDataSource(this.olddata),this.selection=new collections.SelectionModel(!0,[]),null!=e.filteredData&&e.filteredData.length<this.olddata.length)this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","refreshdata"],data:{message:"Refresh successfully!!",isconfirmation:!1}});else this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","refreshdata"],data:{message:" Updated!!",isconfirmation:!1}})},ListingComponent.prototype._filter=function(e){var t=e.toString().toLowerCase();return this.searchListval.filter(function(e){return e.toString().toLowerCase().includes(t)})},ListingComponent.prototype.getstatus=function(e){for(var t in this.statusarrval)if(this.statusarrval[t].val==e)return this.statusarrval[t].name;return"N/A"},ListingComponent.prototype.pdfFlag=function(e){null!=e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!1),null!=e.shatterblok_agreement_date&&null!=e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!0),null==e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!1,this.aud=!1)},ListingComponent.prototype.grapurl=function(e){null!=e&&(this.art=!0,this.aud2=!0),null==e&&(this.art=!1,this.aud2=!1)},ListingComponent.prototype.copyText=function(e,t){var a=t+""+e,n=document.createElement("textarea");n.style.position="fixed",n.style.left="0",n.style.top="0",n.style.opacity="0",n.value=a,document.body.appendChild(n),n.focus(),n.select(),document.execCommand("copy"),document.body.removeChild(n),this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Copied Successfully !! "}})},ListingComponent.prototype.openinternallink=function(e){this.router.navigate([e.route])},ListingComponent.prototype.openinternallinkwithparam=function(e,t){var a=[];for(var n in a.push(e.route),e.param)a.push(t[e.param[n]]);this.router.navigate(a)},ListingComponent.prototype.opencustombuttonactionlocaldata=function(e,t){var a=[];for(var n in null!=e.refreshdata&&1==e.refreshdata&&this.allSearch(),e.datafields){var r=[];if(r.push(e.datafields[n]),"image"!=e.datafields[n]&&"video"!=e.datafields[n]&&(null!=t[e.datafields[n]]&&"object"!=typeof t[e.datafields[n]]&&null!=t[e.datafields[n]]&&t[e.datafields[n]].toString().includes("iframe")?r.push(this.sanitizer.bypassSecurityTrustHtml(t[e.datafields[n]])):r.push(t[e.datafields[n]])),"image"==e.datafields[n]&&r.push("<img mat-card-image src="+t[e.datafields[n]]+" > <br/>"),"video"==e.datafields[n])if(null!=t[e.datafields[n]]&&""!=t[e.datafields[n]]){var i="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+t[e.datafields[n]]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";i=this.sanitizer.bypassSecurityTrustHtml(i),r.push(i)}else r.push("N/A");a.push(r)}var l=a;if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var o=[];for(var s in l){for(var d in this.libdataval.detailview_override)this.libdataval.detailview_override[d].key==l[s][0]&&(o[s]=[this.libdataval.detailview_override[d].val,l[s][1],l[s][0]]);null==o[s]&&(o[s]=l[s])}l=o}null!=e.refreshdata&&1==e.refreshdata&&this.allSearch(),l.message=e.headermessage;this.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox-apidata","modal-localdata"],data:{isconfirmation:!1,data:l}})},ListingComponent.prototype.opencustombuttonactionapidata=function(u,e){var f=this;this.loading=!0;var t=this.apiurlval+u.endpoint,a={};if(a[u.param]=e._id,null!=u.otherparam)for(var n in u.otherparam)a[u.otherparam[n]]=e[u.otherparam[n]];this.loaderrow=e._id,this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(t,this.jwttokenval,a).subscribe(function(e){var t;if("success"==(t=e).status){f._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:t.msg}});var a={};f.loaderrow=null,f.loading=!1,a=null!=t.res[0]?t.res[0]:t.res;var n={};if(null!=u.datafields){for(var r in u.datafields)n[u.datafields[r]]=a[u.datafields[r]];a=n}var i=[];for(var l in a){var o=[];if(o.push(l),"image"!=l&&"video"!=l&&(null!=a[l]&&"object"!=typeof a[l]&&a[l].toString().includes("iframe")?o.push(f.sanitizer.bypassSecurityTrustHtml(a[l])):o.push(a[l])),"image"==l&&o.push("<img mat-card-image src="+a[l]+" > <br/>"),"video"==l){var s="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+a[l]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";s=f.sanitizer.bypassSecurityTrustHtml(s),o.push(s)}i.push(o)}if(null!=f.libdataval.detailview_override&&0<f.libdataval.detailview_override.length){var d=[];for(var c in i){for(var m in f.libdataval.detailview_override)f.libdataval.detailview_override[m].key==i[c][0]&&(d[c]=[f.libdataval.detailview_override[m].val,i[c][1],i[c][0]]);null==d[c]&&(d[c]=i[c])}i=d}null!=u.refreshdata&&1==u.refreshdata&&f.allSearch(),i.message=u.headermessage;f.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox","api-data"],data:{isconfirmation:!1,data:i}})}"error"==t.status&&f._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){f._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),f.loading=!1})},ListingComponent.prototype.openextlinkwithparam=function(e,t){var a="",n="";if(n=e.link,null==e.paramtype)for(var r in e.param)a=e.param[r].q+"="+encodeURI(t[e.param[r].key]),0==parseInt(r)&&(n=n+"?"+a),0!=parseInt(r)&&(n=n+"&"+a);if(null!=e.paramtype&&"angular"==e.paramtype)for(var r in e.param)n=n+"/"+encodeURI(t[e.param[r]]);setTimeout(function(){},10),window.open(n,"_blank")},ListingComponent.prototype.clickurl=function(e,t){var a=t+""+e._id+this.pdf_link_val;window.open(a,"_blank")},ListingComponent.prototype.checkedlist=function(){var e=this;setTimeout(function(){e.selection.selected.map(function(e){return e._id});e.onLiblistingChange.emit({action:"multipleselectionchange",limitdata:e.limitcondval,sortdata:e.sortdataval,selecteddata:e.selection.selected})},100)},ListingComponent.prototype.isAllSelected=function(){if(null!=this.selection&&this.selection.select)return this.selection.selected.length===this.dataSource.data.length},ListingComponent.prototype.masterToggle=function(){var t=this;this.isAllSelected()?this.selection.clear():this.dataSource.data.forEach(function(e){return t.selection.select(e)}),this.checkedlist()},ListingComponent.prototype.checkboxLabel=function(e){return e?(this.selection.isSelected(e)?"deselect":"select")+" row "+(e.position+1):(this.isAllSelected()?"select":"deselect")+" all"},ListingComponent.prototype.createData=function(t){var a={};return Object.keys(t).forEach(function(e){a[e.replace(/\s/g,"_")]=t[e]}),a},ListingComponent.prototype.applyFilter=function(e){this.dataSource.filter=e.trim().toString().toLowerCase(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()},ListingComponent.prototype.styleCell=function(e,t){return{}},ListingComponent.prototype.fetchvideo=function(e){this.dialog.open(VideoPlayer,{panelClass:["custom-modalbox-videoplayer-preview","video-modal"],height:"auto",data:{previewData:e}})},ListingComponent.prototype.opennotes=function(a){var n=this;this.loading=!0,this.loaderrow=a._id,this._apiService.postSearch(this.apiurlval+this.libdataval.notes.listendpoint,this.jwttokenval,{id:a._id}).subscribe(function(e){var t;t=e,n.loading=!1,n.loaderrow=null,n.dialog.open(Confirmdialog,{height:"auto",panelClass:["custom-modalbox","notes-modal"],data:{isconfirmation:!1,notes:!0,apiurl:n.apiurlval,notedata:n.libdataval.notes,rowdata:a,jwttokenval:n.jwttokenval,listdata:t.res,_snackBar:n._snackBar}}).afterClosed().subscribe(function(e){n.allSearch()})})},ListingComponent.prototype.viewdata=function(e){var t;console.log("data1 ++++++++",e),t=e;var a=[],n={};for(var r in null!=this.libdataval.preview_header&&null!=this.libdataval.preview_header.header&&""!=this.libdataval.preview_header.header&&(console.log("== ++++++++",this.libdataval.preview_header),n=this.libdataval.preview_header),t)if(t.hasOwnProperty(r)&&("boolean"==typeof t[r]&&(1==t[r]&&(t[r]="Yes"),0==t[r]&&(t[r]="No")),"image"==r&&(t[r+":"]="<img mat-card-image src="+t[r]+"><br/>"),t[r],"object"==typeof t[r])){var i=[];for(var l in t[r])for(var o in this.detail_datatypeval)if(this.detail_datatypeval[o].key==r&&"image"==this.detail_datatypeval[o].value&&i.push("<img mat-card-image src="+t[r][l]+"><br/>"),this.detail_datatypeval[o].key==r&&"image"!=this.detail_datatypeval[o].value&&i.push("<span>"+t[r][l]+"</span><br/>"),this.detail_datatypeval[o].key!=r&&"object"==typeof t[r][l])for(var s in t[r][l])i.push("<span>"+s+" : "+t[r][l][s]+"</span><br/>");t[r+":"]=i}for(var d in t)null!=t[d]&&""!=t[d]&&(a[d]=t[d]);for(var c in this.detail_skip_arrayval)delete a[this.detail_skip_arrayval[c]];var m=Object.entries(a);if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var u=[];for(var f in m){for(var p in this.libdataval.detailview_override)this.libdataval.detailview_override[p].key==m[f][0]&&(u[f]=[this.libdataval.detailview_override[p].val,m[f][1],m[f][0]]);null==u[f]&&(u[f]=m[f])}m=u}this.dialog.open(Confirmdialog,{height:"auto",autoFocus:!1,maxHeight:"1000vh",panelClass:["custom-modalbox","detail-view"],data:{isconfirmation:!1,data:m,headerData:n}})},ListingComponent.prototype.managestatus=function(n){var r=this,e=this.bottomSheet.open(BottomSheet,{panelClass:["custom-bottomsheet","parent-bottom-class"],data:{items:this.statusarrval}});this.subscriptions[this.subscriptioncount++]=e.afterDismissed().subscribe(function(e){null!=e&&(n.status=e.val,n.id=n._id,r.subscriptions[r.subscriptioncount++]=r._apiService.togglestatus(r.apiurlval+r.libdataval.updateendpoint,n,r.jwttokenval,r.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){for(var a in r.olddata)r.olddata[a]._id==n._id&&(r.olddata[a].status=n.status);r.dataSource=new material.MatTableDataSource(r.olddata),r.selection=new collections.SelectionModel(!0,[]),r.dataSource.paginator=r.paginator,r.dataSource.sort=r.sort,r.onLiblistingChange.emit({action:"statusupdate",limitdata:r.limitcondval,sortdata:r.sortdataval});r.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","manage-status"],data:{message:"Status updated successfully!!",isconfirmation:!1}})}"error"==t.status&&r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.custombuttonlistner=function(e,t){this.onLiblistingChange.emit({action:"custombuttonclick",limitdata:this.limitcondval,sortdata:this.sortdataval,custombuttonclick:{data:e,btninfo:t}})},ListingComponent.prototype.custombuttonfunc=function(e){var t=this.custombuttonval.url;for(var a in this.custombuttonval.fields)t=t+"/"+e[this.custombuttonval.fields[a]];t=this.sanitizer.bypassSecurityTrustResourceUrl(t);this.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-data-modal",data:{isconfirmation:!1,data:[{data:e,customdata:t}]}})},ListingComponent.prototype.managestatusmultiple=function(){var e,n=this,r=[];for(e in this.selection.selected)r.push(this.selection.selected[e]._id);var t=this.bottomSheet.open(BottomSheet,{data:{items:this.statusarrval}});this.subscriptions[this.subscriptioncount++]=t.afterDismissed().subscribe(function(e){if(null!=e){var a=e.val;n.subscriptions[n.subscriptioncount++]=n._apiService.togglestatusmany(n.apiurlval+n.libdataval.updateendpointmany,r,e.val,n.jwttokenval,n.sourcedataval).subscribe(function(e){if("success"==e.status){for(var t in n.olddata)-1<r.indexOf(n.olddata[t]._id)&&(n.olddata[t].status=a);n.dataSource=new material.MatTableDataSource(n.olddata),n.selection=new collections.SelectionModel(!0,[]),n.dataSource.paginator=n.paginator,n.dataSource.sort=n.sort,n.onLiblistingChange.emit({action:"multiplestatusupdate",limitdata:n.limitcondval,sortdata:n.sortdataval});n.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","toogle-many"],data:{message:"Status updated successfully!!",isconfirmation:!1}})}},function(e){n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})})}})},ListingComponent.prototype.deletemultiple=function(){var e,r=this,t=this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-multiple"],data:{message:"Are you sure you want to delete these records? This process can not be undone.",type:"confirm"}}),i=[];for(e in this.selection.selected)i.push(this.selection.selected[e]._id);t.afterClosed().subscribe(function(e){"yes"==e&&(r.subscriptions[r.subscriptioncount++]=r._apiService.deteManyData(r.apiurlval+r.libdataval.deleteendpointmany,i,r.jwttokenval,r.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){var a=function(t){r.olddata=r.olddata.filter(function(e){return e._id!=i[t]})};for(var n in i)a(n);r.dataSource=new material.MatTableDataSource(r.olddata),r.selection=new collections.SelectionModel(!0,[]),r.dataSource.paginator=r.paginator,r.dataSource.sort=r.sort,r.allSearch(),r.onLiblistingChange.emit({action:"multipledelete",limitdata:r.limitcondval,sortdata:r.sortdataval});r.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-multiple"],data:{message:"Record(s)  deleted successfully !!",isconfirmation:!1}})}"error"==t.status&&r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.deletedata=function(a){var n=this;this.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-single"],height:"auto",data:{message:"Are you sure you want to delete this record? This process can not be undone.",type:"confirm"}}).afterClosed().subscribe(function(e){"yes"==e&&(n.subscriptions[n.subscriptioncount++]=n._apiService.deteOneData(n.apiurlval+n.deleteendpointval,a,n.jwttokenval,n.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){n.olddata=n.olddata.filter(function(e){return e._id!=a._id}),n.dataSource=new material.MatTableDataSource(n.olddata),n.selection=new collections.SelectionModel(!0,[]),n.dataSource.paginator=n.paginator,n.dataSource.sort=n.sort,n.allSearch(),n.onLiblistingChange.emit({action:"delete",limitdata:n.limitcondval,sortdata:n.sortdataval});n.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-single"],data:{message:"Record  deleted successfully !!",isconfirmation:!1}})}"error"==t.status&&n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.editdata=function(e){this.router.navigate([this.editrouteval,e._id])},ListingComponent.prototype.sorttable=function(e,t){this.sortdataval.field=e,this.sortdataval.type=t,this.allSearch()},ListingComponent.prototype.allSearch=function(){var e,a=this,t=this.apiurlval+""+this.datacollectionval,n=this.apiurlval+""+this.datacollectionval+"-count",r={};for(var i in this.tsearch)null!=this.tsearch[i]&&""!=this.tsearch[i].toString().toLowerCase()&&(r[i]={$regex:this.tsearch[i].toString().toLowerCase()});var l={};for(var o in this.autosearch){var s={};for(var d in this.autosearch[o]){var c={};c[o]=this.autosearch[o][d].val.toString().toLowerCase(),null==s.$or&&(s.$or=[]),s.$or.push(c)}null==l.$and&&(l.$and=[]),l.$and.push(s);null==Object.keys(l).length||"undefined"==typeof Object.keys(l).length?0:Object.keys(l).length}var m={};for(var u in this.buttonSearchData)for(var f in this.buttonSearchData[u].value){var p={};p[this.buttonSearchData[u].field]=this.buttonSearchData[u].value[f].val.toString().toLowerCase(),null==m.$or&&(m.$or=[]),m.$or.push(p)}this.limitcondval.pagecount=1,this.limitcondval.skip=0,this.oldlimitrange=this.limitcondval;var h;h=Object.assign({},r,this.dateSearch_condition,l,m,this.selectSearch_condition,this.libdataval.basecondition),this.allSearchCond=h,e={condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:h},Object.keys(h).length<0?this._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"No Search criteria selected !! "}}):(this.date_search_source_countval=0,this.loading=!0,this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(t,this.jwttokenval,e).subscribe(function(e){var t;null!=(t=e).results.res&&0<t.results.res.length?(a.onLiblistingChange.emit({action:"search",limitdata:a.limitcondval,searchcondition:h,sortdata:a.sortdataval,res:t.results.res.length,allSearchCond:a.allSearchCond,autoSearchVal:a.autosearch,searchdata:a.search_settingsval,selecteddata:a.selection.selected}),a.dataSource=new material.MatTableDataSource(t.results.res),a._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New Search of data loaded"}})):(a.onLiblistingChange.emit({action:"search",limitdata:a.limitcondval,searchcondition:h,sortdata:a.sortdataval,res:t.results.res.length,allSearchCond:a.allSearchCond,autoSearchVal:a.autosearch,searchdata:a.search_settingsval,selecteddata:a.selection.selected,flag:"no_record"}),a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No such search record found !!"}})),a.loading=!1}),this.subscriptions[this.subscriptioncount++]=this._apiService.postSearch(n,this.jwttokenval,e).subscribe(function(e){var t;t=e,a.date_search_source_countval=t.count,0==t.count?a.tableflag=1:a.tableflag=0}),this.initiateSearch=!1)},ListingComponent.prototype.gettypeof=function(e){return typeof e},ListingComponent.prototype.openBottomSheetForSearch=function(e,r){var i=this,l=1,t=this.dialog.open(ModalForButtomSearch,{panelClass:"button-search-modal",data:{items:e}});t.disableClose=!0,t.afterClosed().subscribe(function(e){if(null!=e&&"yes"==e.flag){l=1;var t=0;if(0<i.buttonSearchData.length){for(var a in t=1,i.buttonSearchData){if(i.buttonSearchData[a].field==e.items.field){for(var n in l=2,t=1,e.selectedData)i.buttonSearchData[a].value.push(e.selectedData[n]);return void(1==t&&i.allSearch())}l=0}0==l&&(i.buttonSearchData.push({value:e.selectedData,key:r,field:e.items.field}),t=1)}else i.buttonSearchData.push({value:e.selectedData,key:r,field:e.items.field}),t=1;1==t&&i.allSearch()}})},ListingComponent.prototype.clearButtonSearchChips=function(e,t,a,n){for(var r in this.buttonSearchData[t].value.splice(n,1),this.search_settingsval.buttonsearch)this.search_settingsval.buttonsearch[r].field==e.field&&this.search_settingsval.buttonsearch[r].value.push(a)},ListingComponent.prototype.artistxpPreview=function(e){var a=this,t={source:"blockchainuser_view",condition:{posts_id_object:e._id},token:this.jwttokenval};this.subscriptions[this.subscriptioncount++]=this._apiService.postData("http://developmentapi.audiodeadline.com:3090/datalist",t).subscribe(function(e){var t=e;a.dialog.open(Confirmdialog,{panelClass:["custom-modalbox","delete-axp"],height:"auto",data:{preview:!0,previewData:t}})})},ListingComponent.decorators=[{type:i0.Component,args:[{selector:"lib-listing",template:'<div class="container">\r\n    \x3c!-- <div>{{testvalue|customdata:"Mr.":"the great"}}</div> --\x3e\r\n    <mat-card>\r\n\r\n        <div class="searchiconcls" *ngIf="searchBarFlagVal == true">\r\n            <span class="material-icons iconcls" matTooltip="{{searchBarToolTip}}"\r\n                (click)="SearchBarToggle(searchBarFlag)">\r\n                search\r\n            </span>\r\n        </div>\r\n\r\n\r\n\r\n        <div class="togglesearchcls" *ngIf="searchBarFlag == true">\r\n\r\n            <mat-toolbar-row class="searchbar listmaindivbody" *ngIf="rescount>0">\r\n\r\n\r\n                <ng-container class="inputfilterForloop"\r\n                    *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\r\n                    <ng-container *ngFor="let item of search_settingsval.textsearch">\r\n                        <mat-form-field class="searchdiv pad-gap">\r\n\r\n                            <input class="filterForText" matInput (change)="textsearchfunction(item.field,item)"\r\n                                (keyup)="textsearchfunction(item.field,item)" [(ngModel)]=\'tsearch[item.field]\'\r\n                                placeholder="{{item.label}}">\r\n                            <span class="filterForTexticon" matPrefix><i class="material-icons searchicon">\r\n                                    search\r\n                                </i> &nbsp;</span>\r\n                        </mat-form-field>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n                <ng-container class="inputfilterForAuto"\r\n                    *ngIf="search_settingsval !=null && search_settingsval.search != null ">\r\n                    <mat-form-field class="filterForAuto searchdiv" *ngFor="let item of search_settingsval.search">\r\n\r\n\r\n                        <mat-chip-list #chipList aria-label="Fruit selection">\r\n                            <mat-chip *ngFor="let v of autosearch[item.field]; let i=index;" [selectable]="true"\r\n                                [removable]="true" (removed)="remove(v,i,item.field)">\r\n                                {{v.name}}\r\n                                <mat-icon matChipRemove>cancel</mat-icon>\r\n                            </mat-chip>\r\n                            <input id="autocompletesearch{{item.field}}" placeholder="{{item.label}} "\r\n                                [matAutocomplete]="auto" [matChipInputFor]="chipList"\r\n                                [(ngModel)]="autosearchinput[item.field]" (blur)="resetautocomp(item)"\r\n                                (keyup)="autocompletechangedetected(item);">\r\n                        </mat-chip-list>\r\n\r\n                        \x3c!--[matChipInputSeparatorKeyCodes]="[ENTER, COMMA]"--\x3e\r\n                        \x3c!--(matChipInputTokenEnd)="addautosearchdata($event)"--\x3e\r\n\r\n\r\n                        \x3c!--<input class="filterForAutoInput"  type="text" placeholder="{{item.label}}" matInput [(ngModel)]="autosearch[item.field]" [matAutocomplete]="auto">--\x3e\r\n                        <mat-autocomplete #auto="matAutocomplete">\r\n                            \x3c!--<mat-option *ngFor="let option of item.values | async" [value]="option[item.field]" (click)="autosearchfunction(item.field)">\r\n                                {{option[item.field]}}\r\n                            </mat-option>--\x3e\r\n\r\n                            <mat-option *ngFor="let statusval of currentautosearcharr" [value]="statusval.val"\r\n                                (click)="autosearchfunction(item.field,statusval,item)">\r\n                                {{statusval.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n\r\n\r\n\r\n                \x3c!--      <span *ngIf="search_settingsval !=null && search_settingsval != null ">\r\n    \r\n          <mat-form-field *ngFor="let item of search_settingsval.search">\r\n            <mat-label>{{item.label}}</mat-label>\r\n            <mat-select>\r\n              <mat-option *ngFor="let status of preresult" [value]="status" (click)="autosearchfunction(status.email)">\r\n                {{status.email}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n    \r\n          </span>--\x3e\r\n                \x3c!--  <ng-container  *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\r\n    &lt;!&ndash;        <span *ngFor="let status of this.search_settingsval.textsearch">&ndash;&gt;\r\n    &lt;!&ndash;        <mat-form-field *ngFor="let statusval of status.value">&ndash;&gt;\r\n            <mat-form-field *ngFor="let status of this.search_settingsval.textsearch">\r\n                  <input matInput (keyup)="applyFilter1($event.target.value, status)" placeholder="{{status.label}}">\r\n            </mat-form-field>\r\n    &lt;!&ndash;              </span>&ndash;&gt;\r\n          </ng-container>--\x3e\r\n\r\n\r\n                <ng-container class="filterForTexticon"\r\n                    *ngIf="search_settingsval !=null && search_settingsval.selectsearch != null ">\r\n                    \x3c!-- <span>dddddd</span> --\x3e\r\n                    <mat-form-field class="searchdiv" *ngFor="let status of search_settingsval.selectsearch">\r\n                        <mat-label>{{status.label}}</mat-label>\r\n                        \x3c!-- <mat-select [(ngModel)]="selectsearch[status.field]" [(value)]="selectsearch[status.field]"> --\x3e\r\n                        <mat-select [(ngModel)]="selectsearch[status.field]" [(value)]="status.value"\r\n                            [(ngModel)]=\'tsearch[status.field]\'>\r\n                            <mat-option *ngFor="let statusval of status.values" [value]="statusval.val"\r\n                                (click)="selectSearch(statusval.val, status,statusval)">\r\n                                {{statusval.name}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n\r\n\r\n                <ng-container *ngIf=" search_settingsval != null && search_settingsval.datesearch != null ">\r\n                    \x3c!-- <span>D search !!</span> --\x3e\r\n                    <ng-container class="filterFordatesearch" *ngFor="let status of this.search_settingsval.datesearch">\r\n\r\n                        <mat-form-field class="filterFordatesearchformfield searchdiv">\r\n                            <input class="filterFordatesearchinput" matInput [matDatepicker]="picker" autocomplete="off"\r\n                                placeholder="{{status.startdatelabel}}" [(ngModel)]="start_date"\r\n                                (dateChange)="dateSearch(status.field,status)">\r\n                            <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field class="filterFordatesearchend">\r\n                            <input class="filterFordatesearchinput" matInput [matDatepicker]="picker1"\r\n                                autocomplete="off" placeholder="{{status.enddatelabel}}" [(ngModel)]="end_date"\r\n                                (dateChange)="dateSearch(status.field,status)">\r\n                            <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                        </mat-form-field>\r\n\r\n                        \x3c!-- <span class="search_class">\r\n                            <button mat-raised-button color="primary" class="add_button"\r\n                                (click)="dateSearch(status.field)">{{status.submit}}</button>\r\n                        </span> --\x3e\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n\r\n                \x3c!-- <br><br> <br><br> --\x3e\r\n\r\n                <div class="searchbtncls">\r\n                    \x3c!-- use for refresh all data --\x3e\r\n                    <span class="search_class">\r\n                        <ng-container class="refresh">\r\n                            <i (click)="refreshdata()" class="material-icons cursor" matTooltip="refresh">\r\n                                autorenew\r\n                            </i>\r\n                        </ng-container>\r\n                        \x3c!-- *ngIf="date_search_endpointval ==null || date_search_sourceval == null || search_settingsval.datesearch == null " --\x3e\r\n                        <ng-container class="refresh">\r\n                            <button mat-raised-button color="primary" class="add_button" (click)="allSearch()"\r\n                                matTooltip="search">Search</button>\r\n                        </ng-container>\r\n\r\n                        <br>\r\n                    </span>\r\n                </div>\r\n\r\n\r\n                \x3c!--custom buttons --\x3e\r\n                <div class="CustomButtonListen_div">\r\n                    <ng-container *ngIf="customButtonFlagVal?.flag == true  && customButtonFlagVal?.tooltipflag != true"\r\n                        class="filterForTexticon">\r\n                        <ng-container *ngFor="let bt of customButtonFlagVal.buttons;let i = index"\r\n                            class="add_custom_button">\r\n                            <button mat-raised-button color="primary" type="button" color="primary" class="add_button"\r\n                                (click)="CustomButtonListen(bt)">\r\n                                {{bt.label}}</button> &nbsp;\r\n                        </ng-container>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf="customButtonFlagVal?.flag == true && customButtonFlagVal?.tooltipflag == true"\r\n                        class="filterForTexticon">\r\n                        <ng-container *ngFor="let bt of customButtonFlagVal.buttons;let i = index"\r\n                            class="add_custom_button">\r\n                            <button matTooltip="{{bt.tooltip}}" mat-raised-button color="primary" type="button"\r\n                                color="primary" class="add_button" (click)="CustomButtonListen(bt)">\r\n                                {{bt.label}}</button> &nbsp;\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                \x3c!-- for button search  --\x3e\r\n                <div class="buttonsearch_div">\r\n                    <ng-container class="filterForTexticon"\r\n                        *ngIf=" search_settingsval != null && search_settingsval.buttonsearch != null ">\r\n                        <ng-container *ngFor="let button of search_settingsval.buttonsearch;let i= index">\r\n\r\n                            <button mat-raised-button color="primary" class="add_button search_btn_class{{i}}"\r\n                                (click)="openBottomSheetForSearch(button,i)">{{button.label}}\r\n                            </button>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n\r\n                \x3c!-- *ngIf=" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || buttonSearchData[i].value != null " --\x3e\r\n\r\n\r\n                \x3c!-- buttonvSearch Data div --\x3e\r\n                <div class="buttonSearchDatacls_div">\r\n                    <ng-container class="buttonSearchDatacls"\r\n                        *ngIf="buttonSearchData != null && buttonSearchData.length >0">\r\n                        \x3c!-- <span>{{buttonSearchData | json}}</span> --\x3e\r\n                        <div *ngFor="let bs of buttonSearchData;let i =index">\r\n                            <div *ngIf="bs.field == search_settingsval.buttonsearch[bs.key].field">\r\n\r\n                                <h3 class="search_settingsval_bs_cls"\r\n                                    *ngIf=" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || (bs.field == search_settingsval.buttonsearch[bs.key].field && bs.value.length > 0)">\r\n                                    {{search_settingsval.buttonsearch[bs.key].label}} :</h3>\r\n\r\n                                <mat-chip-list class="example-chip" cdkDropList cdkDropListOrientation="horizontal">\r\n                                    <mat-chip class="example-box" cdkDrag *ngFor="let item of bs.value;let j = index">\r\n                                        {{item.name}}\r\n                                        <mat-icon style="cursor: pointer;" matChipRemove\r\n                                            (click)="clearButtonSearchChips(bs,i,item,j)">cancel</mat-icon>\r\n                                    </mat-chip>\r\n                                </mat-chip-list>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n                <br />\r\n\r\n                <span *ngIf="click_to_add_ananother_pageval !=null">\r\n                    <button mat-raised-button color="primary" class="add_button"\r\n                        [routerLink]="click_to_add_ananother_pageval">Add</button>\r\n                </span>\r\n            </mat-toolbar-row>\r\n        </div>\r\n\r\n        <div class="recordflagcls" *ngIf="recordFoundFlag == true && libdataval.recordfounddata != null">\r\n            <div class="recorddatacls" [innerHTML]="libdataval?.recordfounddata"></div>\r\n        </div>\r\n\r\n\r\n\r\n        <ng-container\r\n            *ngIf="selection.selected !=null && selection.selected.length!=null && selection.selected.length>0">\r\n            <span class="multipledeleteandupdatebuttan">\r\n\r\n                <button *ngIf="libdataval.hidedeletemany==null || libdataval.hidedeletemany==false" mat-raised-button\r\n                    (click)="deletemultiple()"> Delete </button>\r\n                <button *ngIf="libdataval.hideupdatemany==null || libdataval.hideupdatemany==false" mat-raised-button\r\n                    (click)="managestatusmultiple()"> Update Status </button>\r\n                <ng-container\r\n                    *ngIf="libdataval!=null && libdataval.customselectbuttons!=null && libdataval.customselectbuttons.length>0">\r\n                    \x3c!-- has hhh  --\x3e\r\n                    <ng-container *ngFor="let cbtns of libdataval.customselectbuttons">\r\n\r\n                        <button class="customselbtn" mat-raised-button (click)="clickmultipleselectoption(cbtns)">\r\n                            {{cbtns.label}} </button>\r\n                    </ng-container>\r\n\r\n                </ng-container>\r\n\r\n            </span>\r\n        </ng-container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <section *ngIf="loading == true" class="example-section">\r\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\r\n                [bufferValue]="bufferValue">\r\n            </mat-progress-bar>\r\n            <br />\r\n            <br />\r\n        </section>\r\n\r\n\r\n        <ng-container *ngIf="tableflag==0">\r\n            <section class="lib-pager-class">\r\n                <mat-label>\r\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\r\n\r\n                    <ng-container\r\n                        *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) || date_search_source_countval==0">\r\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\r\n                    </ng-container>\r\n                    <ng-container\r\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\r\n                        {{date_search_source_countval}}\r\n                    </ng-container>\r\n\r\n\r\n\r\n                    of\r\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\r\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\r\n\r\n                </mat-label>\r\n                <span class="pageformfield">\r\n                    <mat-form-field>\r\n                        <mat-label>Page Size</mat-label>\r\n                        <input matInput [(ngModel)]="limitcondval.limit" type="number" max="100" (keyup)="paging(10,\'\')">\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Page No</mat-label>\r\n                        <input matInput [(ngModel)]="limitcondval.pagecount" type="number" (keyup)="paging(10,\'\')">\r\n                    </mat-form-field>\r\n                </span>\r\n                <span>\r\n\r\n\r\n                    <span class="material-icons cursor" (click)="paging(-1,\'\')">\r\n                        skip_previous\r\n                    </span>\r\n\r\n                    <span class="material-icons cursor" (click)="paging(1,\'\')">\r\n                        skip_next\r\n                    </span>\r\n                </span>\r\n\r\n                \x3c!-- for pagination in drop down format--\x3e\r\n                <div class="selectpaginationCls" *ngIf="libdataval.selectPagingflag">\r\n                    <mat-label>Show Records per Page</mat-label>\r\n                    <mat-select (selectionChange)="paging($event.value,\'selectpaging\')" [(ngModel)]="limitcondval.limit">\r\n                        <mat-option *ngFor="let no of pages" [value]="no.val">\r\n                            {{no.name}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </div>\r\n                \r\n            </section>\r\n        </ng-container>\r\n        \x3c!-- <div>{{rescount}} d lemgth </div> --\x3e\r\n\r\n        <div class="tablewrapper" *ngIf="tableflag==0">\r\n\r\n            <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\r\n\r\n                \x3c!-- <ng-container matColumnDef="select" *ngIf="tableflag==0">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <mat-checkbox (change)="$event ? masterToggle() : null" [checked]="selection.hasValue() && isAllSelected()" [indeterminate]="selection.hasValue() && !isAllSelected()">\r\n                        </mat-checkbox>\r\n                    </th>\r\n                    <td mat-cell *matCellDef="let row" data-label="select">\r\n                        <mat-checkbox (click)="$event.stopPropagation()" (change)="$event ? selection.toggle(row) : null" [checked]="selection.isSelected(row)">\r\n                        </mat-checkbox>\r\n                    </td>\r\n                </ng-container> --\x3e\r\n                \x3c!-- <ng-container matColumnDef="#">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        #\r\n                    </th>\r\n                    <td mat-cell *matCellDef="let element; let i = index">{{limitcondval.skip+(i+1)}}</td>\r\n                </ng-container> --\x3e\r\n                \x3c!-- footer loop  --\x3e\r\n                <ng-container *ngFor="let footer of libdataval.footersettings">\r\n                    <ng-container matColumnDef="{{footer.key}}">\r\n                        <td mat-footer-cell *matFooterCellDef [attr.colspan]="footer.colspan">\r\n                            <span [innerHtml]="footer.data"></span>\r\n                        </td>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n\r\n                <ng-container *ngFor="let column of columns" [matColumnDef]="column.columnDef">\r\n                    <ng-container *ngIf="column.columnDef== \'select\' ">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <mat-checkbox (change)="$event ? masterToggle() : null"\r\n                                [checked]="selection.hasValue() && isAllSelected()"\r\n                                [indeterminate]="selection.hasValue() && !isAllSelected()">\r\n                            </mat-checkbox>\r\n                        </th>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf="column.columnDef != \'select\' ">\r\n                        <th mat-header-cell *matHeaderCellDef class="th-header-center">\r\n                            <span>\r\n\r\n                                <span *ngIf="libdataval.header_tooltip_array == null">\r\n                                    <span [innerHtml]="column.header"></span>\r\n                                </span>\r\n\r\n                                <span *ngIf="libdataval.header_tooltip_array != null">\r\n                                    <span [innerHtml]="column.header" matTooltip="{{column?.tooltip}}"></span>\r\n                                </span>\r\n\r\n\r\n                                \x3c!-- {{column.header}} --\x3e\r\n                                <span *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'desc\'"\r\n                                    class="material-icons cursor float-right"\r\n                                    (click)="sorttable(column.columnDef,\'asc\')">\r\n                                    arrow_downward\r\n                                </span>\r\n                                <span class="material-icons cursor float-right"\r\n                                    *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'asc\'"\r\n                                    (click)="sorttable(column.columnDef,\'desc\')">arrow_upward\r\n                                </span>\r\n\r\n                                <span class="material-icons cursor"\r\n                                    *ngIf="sortdataval!=null && sortdataval.options !=null && sortdataval.options.indexOf(column.columnDef) >-1  && column.columnDef!=sortdataval.field"\r\n                                    (click)="sorttable(column.columnDef,\'desc\')">\r\n                                    unfold_more\r\n                                </span>\r\n                            </span>\r\n                        </th>\r\n                    </ng-container>\r\n\r\n                    <ng-container\r\n                        *ngIf="column.columnDef!= \'#\' && column.columnDef!= \'Actions\' && column.columnDef!= \'select\'  ">\r\n                        <td mat-cell *matCellDef="let row " [ngStyle]="styleCell(column,row) "\r\n                            data-title="{{column.header.split(\'<br/>\').join(\'\')}}  " class="td-cell-center ">\r\n\r\n                            <span *ngIf="column.columnDef==\'status\' ">{{ getstatus([column.cell(row)]) }}\r\n                                {{pdfFlag(row)}}</span>\r\n                            <span\r\n                                *ngIf="column.columnDef!=\'status\' && column.columnDef!=\'image\' && column.columnDef!=\'video\' ">\r\n\r\n                                <ng-container\r\n                                    *ngIf="column!=null && row[column.columnDef]!=null && !column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetime\') ">\r\n\r\n                                    \x3c!-- <span>=++++{{row[column.columnDef] |json}} = {{column.columnDef}}</span><br> --\x3e\r\n\r\n                                    <span\r\n                                        [innerHTML]="row[column.columnDef] | CustomPipe: column.columnDef:row[column.columnDef]"></span>\r\n\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes( \'date\') && !column.columnDef.includes( \'datetime\') && (row[column.columnDef] !=0 && row[column.columnDef] !=\'na\' && row[column.columnDef]\r\n                        !=\'NA\' ) ">\r\n                                    {{row[column.columnDef] | date}}\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes( \'date\') && column.columnDef.includes( \'datetime\') && (row[column.columnDef] !=0 && row[column.columnDef] !=\'na\' && row[column.columnDef] !=\'NA\'\r\n                        ) ">\r\n                                    {{row[column.columnDef] | date:\'medium\'}}\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf="column!=null && row[column.columnDef]!=null && (column.columnDef.includes( \'date\') || column.columnDef.includes( \'datetime\') )&& (row[column.columnDef]==0 || row[column.columnDef]==\'na\' || row[column.columnDef]==\'NA\'\r\n                        ) ">\r\n                                    NA\r\n                                </ng-container>\r\n                                <ng-container *ngIf="column!=null && row[column.columnDef]==null ">\r\n                                    NA\r\n                                </ng-container>\r\n\r\n                            </span>\r\n                            \x3c!-- for image view  --\x3e\r\n                            <span\r\n                                *ngIf="column.columnDef==\'image\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "\r\n                                (click)="img_modal_view(row[column.columnDef]) "> <span class="module_imgblock ">\r\n                                    <img src="{{row[column.columnDef]}} " alt="{{row[column.columnDef]}} ">\r\n                                </span></span>\r\n                            \x3c!-- for video view --\x3e\r\n                            <span\r\n                                *ngIf="column.columnDef==\'video\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "><span\r\n                                    class="module_videoblock " (click)="fetchvideo(row) ">\r\n                                    <img class="videothumbnailcls"\r\n                                        src=\'https://awsbackend-dev-patient-files-test.s3.amazonaws.com/icon-videoplay.png\'>\r\n                                    <img class="videovicls"\r\n                                        src="https://img.youtube.com/vi/{{row[column.columnDef]}}/sddefault.jpg "\r\n                                        alt="{{row[column.columnDef]}} " (click)="fetchvideo(row) "></span>\r\n                            </span>\r\n\r\n                            <span\r\n                                *ngIf="column.columnDef==\'grab_url && grab_linkval!=null && grab_linkval[0]!=null\' ">{{grapurl(row[this.grab_linkval[0].field_name])}}</span>\r\n\r\n\r\n                            \x3c!--          <span *ngIf="sh==true ">--\x3e\r\n                            <span *ngIf="column.columnDef==\'contractssigned\' && sh==true && urlval !=null "\r\n                                class="cursor ">\r\n                                <i title="{{urlval[0].label}} " (click)="clickurl(row,urlval[0].url) "\r\n                                    class="material-icons ">cloud_download</i>\r\n                            </span>\r\n                            \x3c!--          </span>--\x3e\r\n                            \x3c!--          <span *ngIf="aud==true ">--\x3e\r\n                            <span *ngIf="column.columnDef==\'contractssigned\' && aud==true && urlval !=null ">\r\n                                <i title="{{urlval[1].label}} " (click)="clickurl(row,urlval[1].url) "\r\n                                    class="material-icons ">cloud_download</i>\r\n                            </span>\r\n\r\n                            \x3c!--// for grap url//--\x3e\r\n\r\n                            <span\r\n                                *ngIf=" grab_linkval!=null && column.columnDef==[grab_linkval.colom_name[0].col_name] "\r\n                                class="cursor ">\r\n                                <ng-container *ngFor="let item of grab_linkval.field ">\r\n                                    \x3c!-- <p>{{item | json}}</p> --\x3e\r\n                                    <button mat-button\r\n                                        (click)="copyText(row[grab_linkval.colom_name[0].field_name],item.url) ">{{item.label}}</button>\r\n                                </ng-container>\r\n                            </span>\r\n\r\n                            \x3c!-- <span\r\n                            *ngIf=" grab_linkval!=null && grab_linkval[0]!=null && column.columnDef==[grab_linkval[0].col_name] "\r\n                            class="cursor ">\r\n                            <button mat-button\r\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[1].url) ">{{grab_linkval[1].label}}</button>\r\n                        </span>\r\n                        <span\r\n                            *ngIf="grab_linkval!=null && grab_linkval[0]!=null &&column.columnDef==[ grab_linkval[0].col_name] ">\r\n                            <button mat-button\r\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[2].url) ">{{grab_linkval[2].label}}</button>\r\n                        </span> --\x3e\r\n\r\n                            \x3c!--          //grap url end//--\x3e\r\n\r\n\r\n                            \x3c!--          </span>--\x3e\r\n                            \x3c!-- <span *ngIf="column.columnDef==\'contractssigned\' ">\r\n            <span *ngFor="let item of urlval " class="cursor ">\r\n            <i title="{{item.label}} " (click)="clickurl(row,item.url) " class="material-icons ">cloud_download</i>\r\n          </span>\r\n          </span>--\x3e\r\n                        </td>\r\n                    </ng-container>\r\n                    <ng-container *ngIf="column.columnDef== \'#\' ">\r\n                        <td mat-cell *matCellDef="let element; let i=index ">{{limitcondval.skip+(i+1)}}\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf="column.columnDef== \'select\' ">\r\n                        <td mat-cell *matCellDef="let row" data-label="select">\r\n                            <mat-checkbox (click)="$event.stopPropagation();checkedlist()"\r\n                                (change)="$event ? selection.toggle(row) : null" [checked]="selection.isSelected(row)">\r\n                            </mat-checkbox>\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf="column.columnDef== \'Actions\' ">\r\n                        <td mat-cell *matCellDef="let row " data-label="Actions " class="td-cell-center ">\r\n\r\n                            <div class="button_div_custom_cls">\r\n\r\n                                \x3c!-- loader --\x3e\r\n\r\n                                <section class="example-section example-section-button-1 ">\r\n                                    <mat-progress-bar *ngIf="loaderrow!=null && loaderrow==row._id "\r\n                                        class="example-margin " [color]="color " [mode]="mode " [value]="value "\r\n                                        [bufferValue]="bufferValue ">\r\n                                    </mat-progress-bar>\r\n                                </section>\r\n\r\n                                \x3c!-- note block --\x3e\r\n                                <ng-container *ngIf="libdataval.notes!=null ">\r\n                                    <button mat-raised-button color="primary" class="notebtncls" matBadgeColor="warn"\r\n                                        matBadge="{{row.notescount}}" matTooltip="{{libdataval?.notes?.tooltip}}"\r\n                                        (click)="opennotes(row) ">\r\n                                        <span class="notelabelc"> {{libdataval.notes.label}}</span>\r\n                                        \x3c!-- <span class="notebracket1">(</span> --\x3e\r\n                                        \x3c!-- <span class="notecountc"  matBadgeColor="warn" matBadge="{{row.notescount}}"></span> --\x3e\r\n                                        \x3c!-- <span class="notebracket2">)</span> --\x3e\r\n                                    </button>\r\n                                </ng-container>\r\n\r\n                                \x3c!--custom buttions block --\x3e\r\n\r\n                                <ng-container\r\n                                    *ngIf="libdataval !=null && libdataval.custombuttons !=null && libdataval.custombuttons.length>0 ">\r\n                                    <ng-container *ngFor="let custombutton of libdataval.custombuttons; let cb=index">\r\n                                        <section class="custombutton{{cb}} {{custombutton?.classname}}">\r\n                                            <ng-container\r\n                                                *ngIf="custombutton.type==\'listner\' && (custombutton.cond==null  || (row[custombutton.cond]==custombutton.condval) ) ">\r\n                                                \x3c!-- ss {{row[\'status\']}} --\x3e\r\n                                                <button mat-raised-button color="primary"\r\n                                                    matTooltip="{{custombutton?.tooltip}}"\r\n                                                    (click)="custombuttonlistner(row,custombutton)">{{custombutton.label}}</button>\r\n                                            </ng-container>\r\n\r\n                                            <ng-container *ngIf="custombutton.type==\'externallink\'">\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n                                                    <a target="_blank" href="{{custombutton.link}}">\r\n                                                        <button mat-raised-button matTooltip="{{custombutton?.tooltip}}"\r\n                                                            color="primary">{{custombutton.label}}</button>\r\n                                                    </a>\r\n                                                </ng-container>\r\n\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        matTooltip="{{custombutton?.tooltip}}"\r\n                                                        (click)="openextlinkwithparam(custombutton,row)">{{custombutton.label}}</button>\r\n\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n                                            <ng-container *ngIf="custombutton.type==\'internallink\'">\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.toggle == null && custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        matTooltip="{{custombutton?.tooltip}}"\r\n                                                        (click)="openinternallink(custombutton)">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.toggle != null && custombutton.toggle == \'delete\' && custombutton.toggle!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        (click)="deletedata(row)">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        matTooltip="{{custombutton?.tooltip}}"\r\n                                                        (click)="openinternallinkwithparam(custombutton,row)">{{custombutton.label}}</button>\r\n\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n                                            <ng-container *ngIf="custombutton.type==\'action\'">\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.datatype==\'local\' && custombutton != null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        matTooltip="{{custombutton?.tooltip}}"\r\n                                                        (click)="opencustombuttonactionlocaldata(custombutton,row)">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n                                                <ng-container\r\n                                                    *ngIf="custombutton.datatype==\'api\' && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\r\n                                                    <button mat-raised-button color="primary"\r\n                                                        matTooltip="{{custombutton?.tooltip}}"\r\n                                                        (click)="opencustombuttonactionapidata(custombutton,row)">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n\r\n                                        </section>\r\n\r\n                                    </ng-container>\r\n                                </ng-container>\r\n                            </div>\r\n\r\n\r\n\r\n                            <span *ngIf="selection.selected.length==null || selection.selected.length==0">\r\n                                <span *ngIf="libdataval.hideeditbutton==null || libdataval.hideeditbutton==false"\r\n                                    class="cursor" (click)="editdata(row)">\r\n                                    <i class="material-icons" matTooltip="Edit">\r\n                                        edit\r\n                                    </i>\r\n                                </span>\r\n\r\n                                \x3c!--For modern browsers--\x3e\r\n                                <span *ngIf="libdataval.hidedeletebutton==null || libdataval.hidedeletebutton==false"\r\n                                    class="cursor" (click)="deletedata(row)">\r\n                                    <i class="material-icons" matTooltip="Delete">\r\n                                        delete_outline\r\n                                    </i>\r\n                                </span>\r\n\r\n                                \x3c!--For modern browsers--\x3e\r\n                                <span *ngIf="libdataval.hideviewbutton==null || libdataval.hideviewbutton==false"\r\n                                    class="cursor" (click)="viewdata(row)">\r\n                                    <i class="material-icons" matTooltip="Preview">\r\n                                        remove_red_eye\r\n                                    </i>\r\n                                </span>\r\n\r\n                                \x3c!--For modern browsers--\x3e\r\n                                <span class="cursor"\r\n                                    *ngIf="libdataval.hidestatustogglebutton==null || libdataval.hidestatustogglebutton==false"\r\n                                    (click)="managestatus(row)">\r\n                                    <i class="material-icons" matTooltip="Change Status">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <span *ngIf="custombuttonval!=null" class="cursor treeclass"\r\n                                    (click)="custombuttonfunc(row)">\r\n                                    <i class="material-icons treeclass" matTooltip="Change Status">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                \x3c!-- hide status toggle with cond--\x3e\r\n                                <span *ngIf="libdataval?.hidestatustoggle !=null &&libdataval?.hidestatustoggle?.flag != null && libdataval?.hidestatustoggle?.flag==true \r\n                                    && (row[libdataval.hidestatustoggle.cond] == libdataval.hidestatustoggle.condval )"\r\n                                    class="cursor treeclass" (click)="managestatus(row)">\r\n                                    <i class="material-icons treeclass"\r\n                                        matTooltip="{{libdataval?.hidestatustoggle?.tooltip}}">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                \x3c!-- artistxp preview start --\x3e\r\n                                <span *ngIf="previewFlug==true" class="cursor treeclass" (click)="artistxpPreview(row)">\r\n                                    <i class="material-icons">perm_media</i>\r\n                                </span>\r\n                                \x3c!-- artistxp preview end --\x3e\r\n\r\n                            </span>\r\n\r\n                        </td>\r\n                    </ng-container>\r\n\r\n\r\n\r\n\r\n                </ng-container>\r\n\r\n\r\n\r\n\r\n\r\n                <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\r\n                <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\r\n\r\n                <tr mat-footer-row *matFooterRowDef="tableFooterColumns" colspan="2"></tr>\r\n\r\n            </table>\r\n\r\n        </div>\r\n\r\n        \x3c!--for pagination --\x3e\r\n        \x3c!-- <div>*ngIf="tableflag!=0"</div>\r\n        <div *ngIf="tableflag!=0"> jio </div> --\x3e\r\n\r\n        <mat-card *ngIf="tableflag!=0" class="noFoundText">\r\n            <div class="noFoundTextinner">\r\n                <span>Oops !</span>\r\n                <p>NO Record Found</p>\r\n            </div>\r\n        </mat-card>\r\n        \x3c!-- no record found block  --\x3e\r\n        <ng-container *ngIf="tableflag==0">\r\n            <section class="lib-pager-class">\r\n                <mat-label>\r\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\r\n\r\n                    <ng-container\r\n                        *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) ||  date_search_source_countval==0">\r\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\r\n                    </ng-container>\r\n                    <ng-container\r\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\r\n                        {{date_search_source_countval}}\r\n                    </ng-container>\r\n\r\n\r\n\r\n                    of\r\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\r\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\r\n\r\n                </mat-label>\r\n                <span class="pageformfield">\r\n                    <mat-form-field>\r\n                        <mat-label>Page Size</mat-label>\r\n                        <input matInput [(ngModel)]="limitcondval.limit" type="number" max="100" (keyup)="paging(10,\'\')">\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Page No</mat-label>\r\n                        <input matInput [(ngModel)]="limitcondval.pagecount" type="number" (keyup)="paging(10,\'\')">\r\n                    </mat-form-field>\r\n                </span>\r\n                <span>\r\n\r\n\r\n                    <span class="material-icons cursor" (click)="paging(-1,\'\')">\r\n                        skip_previous\r\n                    </span>\r\n\r\n                    <span class="material-icons cursor" (click)="paging(1,\'\')">\r\n                        skip_next\r\n                    </span>\r\n                </span>\r\n                \x3c!-- for pagination in drop down format--\x3e\r\n                <div class="selectpaginationCls" *ngIf="libdataval.selectPagingflag">\r\n                    <mat-label>Show Records per Page</mat-label>\r\n                    <mat-select (selectionChange)="paging($event.value,\'selectpaging\')" [(ngModel)]="limitcondval.limit">\r\n                        <mat-option *ngFor="let no of pages" [value]="no.val">\r\n                            {{no.name}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </div>\r\n            </section>\r\n\r\n\r\n        </ng-container>\r\n        <section *ngIf="loading == true" class="example-section">\r\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\r\n                [bufferValue]="bufferValue">\r\n            </mat-progress-bar>\r\n            <br />\r\n            <br />\r\n        </section>\r\n\r\n\r\n\r\n        \x3c!-- <mat-paginator class="paginator" [pageSizeOptions]="[5,10, 20, 50,100]" showFirstLastButtons></mat-paginator>--\x3e\r\n        \x3c!--<mat-spinner *ngIf="loading == true" ></mat-spinner>--\x3e\r\n\r\n\r\n\r\n        \x3c!-- <form [formGroup]="stateForm">\r\n      <mat-form-field>\r\n        <input type="text" matInput placeholder="States Group" formControlName="stateGroup" required [matAutocomplete]="autoGroup">\r\n        <mat-autocomplete #autoGroup="matAutocomplete">\r\n          <mat-optgroup *ngFor="let group of stateGroupOptions | async" [label]="group.letter">\r\n            <mat-option *ngFor="let name of group.names" [value]="name">\r\n              {{name}}\r\n            </mat-option>\r\n          </mat-optgroup>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </form>--\x3e\r\n\r\n        \x3c!--<form class="example-form">\r\n      <mat-form-field class="example-full-width">\r\n        <input type="text" placeholder="Select state" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">\r\n        <mat-autocomplete #auto="matAutocomplete">\r\n          <mat-option *ngFor="let option of stateGroup | async" [value]="option">\r\n            {{option}}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </form>\r\n--\x3e\r\n\r\n    </mat-card>\r\n\r\n    \x3c!--\r\n  <mat-card>\r\n\r\n    <div class="example-container">\r\n\r\n\r\n      <mat-card-content >\r\n        <mat-form-field class="form-group">\r\n            <input (blur)="inputblur(\'email\')" matInput placeholder="email" type="email" [formControl]="myForm.controls[\'email\']" >\r\n            <mat-error  *ngIf="!myForm.controls[\'email\'].valid && myForm.controls[\'email\'].touched && issubmit==1">email field can not be blank</mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class="form-group">\r\n            <input (blur)="inputblur(\'password\')" matInput placeholder="Password" type="password" [formControl]="myForm.controls[\'password\']" >\r\n            <mat-error  *ngIf="!myForm.controls[\'password\'].valid && myForm.controls[\'password\'].touched && issubmit==1">Password field can not be blank</mat-error>\r\n        </mat-form-field>\r\n\r\n            <button mat-button  (click)="onSubmit()" class="s_getmyoffer_login_button"  >Login</button>\r\n        </mat-card-content>\r\n\r\n\r\n    </div>\r\n\r\n  </mat-card>--\x3e\r\n\r\n\r\n\r\n</div>',animations:[animations.trigger("detailExpand",[animations.state("collapsed",animations.style({height:"0px",minHeight:"0"})),animations.state("expanded",animations.style({height:"*"})),animations.transition("expanded <=> collapsed",animations.animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))])],styles:[".container{background:#fff}.lib-pager-class{display:block;clear:both;float:right}body{font-family:Roboto,Arial,sans-serif;margin:0;display:none!important}.clear{clear:both;display:block}.float-right{float:right;display:inline;clear:none}.pad-gap{margin-left:18px}.basic-container{padding:30px}.version-info{font-size:8pt;float:right}table{width:100%;color:red}th.mat-sort-header-sorted{color:#000}.cursor{cursor:pointer!important}.custom-modalbox{display:none}.module_imgblock{display:block;width:100px;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_imgblock img{width:100%;height:auto}.module_videoblock{display:block;width:100px;position:relative;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_videoblock img{width:100%;height:auto}.module_videoblock::after{content:'';display:block;width:30%;height:38%;background:url(image/video-play-arrow-png.png) 0 0/cover no-repeat;position:absolute;left:31%;top:30%}.tablewrapper tr td,.tablewrapper tr th{padding:5px}.close-btn-modal{float:right!important}.videothumbnailcls{height:50px;width:50px}.container .searchiconcls{height:55px;width:99%;background:#f5f5f5;padding:6px;margin:7px}.searchiconcls .iconcls{cursor:pointer;font-size:53px}.CustomButtonListen_div{padding:10px}.buttonsearch_div button{float:none}.buttonSearchDatacls_div{padding:10px}.searchbtncls{text-align:right}.searchbtncls button{float:none}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}"]}]}],ListingComponent.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialog},{type:material.MatBottomSheet},{type:forms.FormBuilder},{type:router.Router},{type:i0.ComponentFactoryResolver},{type:i0.ViewContainerRef},{type:http.HttpClient},{type:platformBrowser.DomSanitizer},{type:snackBar.MatSnackBar},{type:i0.ElementRef}]},ListingComponent.propDecorators={onLiblistingChange:[{type:i0.Output}],onLiblistingButtonChange:[{type:i0.Output}],search_settings:[{type:i0.Input}],click_to_add_ananother_page:[{type:i0.Input}],limitcond:[{type:i0.Input}],date_search_source_count:[{type:i0.Input}],grab_link:[{type:i0.Input}],custombutton:[{type:i0.Input}],date_search_source:[{type:i0.Input}],sortdata:[{type:i0.Input}],date_search_endpoint:[{type:i0.Input}],url:[{type:i0.Input}],searchendpoint:[{type:i0.Input}],pdf_link:[{type:i0.Input}],searchList:[{type:i0.Input}],libdata:[{type:i0.Input}],datasource:[{type:i0.Input}],datacollection:[{type:i0.Input}],skip:[{type:i0.Input}],detail_datatype:[{type:i0.Input}],detail_skip_array:[{type:i0.Input}],sourcedata:[{type:i0.Input}],modify_header_array:[{type:i0.Input}],deleteendpoint:[{type:i0.Input}],updateendpoint:[{type:i0.Input}],apiurl:[{type:i0.Input}],updatetable:[{type:i0.Input}],jwttoken:[{type:i0.Input}],statusarr:[{type:i0.Input}],emailarray:[{type:i0.Input}],editroute:[{type:i0.Input}],preview_artistxp:[{type:i0.Input}],customlistenbutton:[{type:i0.Input}],sort:[{type:i0.ViewChild,args:[material.MatSort]}],paginator:[{type:i0.ViewChild,args:[material.MatPaginator]}]},ListingComponent}(),Confirmdialog=(dh.prototype.onNoClick=function(){this.dialogRef.close()},dh.prototype.deletenote=function(t){var a=this,e={id:this.data.rowdata._id,index:t};this.data.loading1=t,this._apiService.postSearch(this.data.apiurl+this.data.notedata.deleteendpoint,this.data.jwttokenval,e).subscribe(function(e){"success"==e.status&&(a.data.listdata.splice(t,1),a.data.loading1=null)})},dh.prototype.addnotes=function(){var t=this;if(null!=this.data.notesval&&""!=this.data.notesval){var e={id:this.data.rowdata._id,note:this.data.notesval,user:this.data.notedata.user};this.data.loading=!0,this._apiService.postSearch(this.data.apiurl+this.data.notedata.addendpoint,this.data.jwttokenval,e).subscribe(function(e){"success"==e.status&&(null==t.data.listdata&&(t.data.listdata=[]),t.data.listdata.unshift({_id:t.data.rowdata._id,notes:{userid:t.data.notedata.user,note:t.data.notesval,user:t.data.notedata.currentuserfullname,created_date:Date.now()}}),t.data.notesval="",t.data.loading=null)})}else this.data._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"Notes can't be blank !! "}})},dh.prototype.gettypeof=function(e){return typeof e},dh.prototype.sanitizeUrl=function(e,t,a){for(var n in t)e=e+"/"+a[t[n]];return this.sanitizer.bypassSecurityTrustResourceUrl(e)},dh.decorators=[{type:i0.Component,args:[{selector:"confirmdialog",template:'<div class="maindialog maindialognew">\r\n    <span (click)="onNoClick()" style="float: right; cursor: pointer;" class="close-btn-modal material-icons">\r\n        close\r\n    </span>\r\n\r\n    <div class="dialoghead" *ngIf="data.preview != true">\r\n        <h1 mat-dialog-title *ngIf="data!=null && data.message!=null">Hey !</h1>\r\n        <h1 mat-dialog-title *ngIf="data!=null && data.data!=null && data.data[0]==null">Details </h1>\r\n        <h1 mat-dialog-title *ngIf="data!=null  && data.data!=null &&  data.data.message!=null">{{data.data.message}}\r\n        </h1>\r\n        <h1 class="preview_{{data?.headerData?.class}}" mat-dialog-title\r\n            *ngIf="data!=null && data.headerData != null && data.headerData.header != null">\r\n            {{data?.headerData?.header}}\r\n        </h1>\r\n\r\n        <div mat-dialog-content>\r\n            <p *ngIf="data!=null && data.message!=null">{{data.message}}</p>\r\n\r\n            <ng-container *ngIf="data.notes!=null && data.notes==true">\r\n                \x3c!-- <ng-container *ngFor="let note of data.listdata;"> --\x3e\r\n                <mat-list>\r\n                    <div mat-subheader>\r\n                        <ng-container *ngIf="data.notedata.header !=null && data.rowdata[data.notedata.header]!=null">\r\n                            <span class="notesheader">Notes for : {{data.rowdata[data.notedata.header]}} </span>\r\n                        </ng-container>\r\n                    </div>\r\n                    \x3c!-- <section class="example-section">\r\n                        <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\r\n                            [value]="data.loadervalue" [bufferValue]="data.bufferValue">\r\n                        </mat-progress-bar>\r\n                        <br />\r\n                        <br />\r\n                    </section> --\x3e\r\n                    <mat-list-item *ngFor="let note of data.listdata;let notej=index;">\r\n                        \x3c!-- <p>{{note.notes | json}}</p> --\x3e\r\n\r\n                        <span class="material-icons">\r\n                            notes\r\n                        </span>\r\n                        <div mat-line>\r\n                            {{note.notes.note }}\r\n                        </div>\r\n                        \x3c!-- <div mat-line class="line-user"><span>By:</span>{{note.note.userid}}</div> --\x3e\r\n                        \x3c!-- <div mat-line class="line-user"><span>This User:</span>{{data.notedata.user}}</div> --\x3e\r\n                        <div mat-line class="line-user" *ngIf="note.notes != null && note.notes.user != null">\r\n                            <span>By:</span>{{note.notes.user}}\r\n                        </div>\r\n                        <div mat-line class="line-datetime"\r\n                            *ngIf="note.notes != null && note.notes.created_date != null"> <span>On:</span>\r\n                            {{note.notes.created_date | date:\'medium\' }}\r\n                        </div>\r\n                        <span *ngIf="note.notes.userid==data.notedata.user" class="material-icons"\r\n                            (click)="deletenote(notej)">\r\n                            delete\r\n                        </span>\r\n                        <div mat-line *ngIf="data.loading1!=null && data.loading1== notej ">\r\n                            <section class="example-section">\r\n                                <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\r\n                                    [value]="data.loadervalue" [bufferValue]="data.bufferValue">\r\n                                </mat-progress-bar>\r\n                                <br />\r\n                                <br />\r\n                            </section>\r\n                        </div>\r\n                        <mat-divider></mat-divider>\r\n\r\n\r\n                    </mat-list-item>\r\n                    <mat-divider></mat-divider>\r\n                </mat-list>\r\n                <div>\r\n                    <textarea placeholder="Add Notes Here !! " rows="5" cols="25" [(ngModel)]="data.notesval">\r\n                    </textarea>\r\n                    <button mat-button (click)="addnotes()">Add Note</button>\r\n\r\n                </div>\r\n                <section *ngIf="data.loading !=null && data.loading == true" class="example-section">\r\n                    <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\r\n                        [value]="data.loadervalue" [bufferValue]="data.bufferValue">\r\n                    </mat-progress-bar>\r\n                    <br />\r\n                    <br />\r\n                </section>\r\n                \x3c!-- </ng-container> --\x3e\r\n            </ng-container>\r\n\r\n\r\n\r\n            <div *ngIf="data!=null && data.data!=null">\r\n                <mat-card class="example-card" *ngFor="let item of data.data;">\r\n                    <mat-card-header id="dialogdata{{item[0]}}">\r\n                        \x3c!--<div mat-card-avatar class="example-header-image"></div>--\x3e\r\n                        <mat-card-title>{{item[0]}}</mat-card-title>\r\n                    </mat-card-header>\r\n                    \x3c!--<img mat-card-image src="https://material.angular.io/assets/img/examples/shiba2.jpg" alt="Photo of a Shiba Inu">--\x3e\r\n                    <mat-card-content id="dialogdata{{item[0]}}">\r\n                        \x3c!-- {{gettypeof(item[1])}} --\x3e\r\n                        <p class="innerhtml-content"\r\n                            *ngIf="(item[2]==null && gettypeof(item[1]) !=\'object\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) != \'object\')"\r\n                            [innerHtml]="item[1]">\r\n                        </p>\r\n                        <p class="innerhtml-content-video"\r\n                            *ngIf="(item[2]==null && gettypeof(item[1]) ==\'object\' && item[0]!=\'image_array\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) == \'object\' && (item[0]==\'video\' || item[0]=\'vd_array\' )) "\r\n                            [innerHtml]="item[1]">\r\n\r\n                        </p>\r\n                        <p *ngIf="item[2]!=null && item[2].includes(\'date\') && !item[2].includes(\'datetime\') ">\r\n                            {{item[1] | date}}\r\n                        </p>\r\n                        <p *ngIf="item[2]!=null && item[2].includes(\'date\') && item[2].includes(\'datetime\') ">\r\n                            {{item[1] | date:\'medium\' }}\r\n                        </p>\r\n                        \x3c!-- length : {{item[1].length}} {{gettypeof(item[1])}} --\x3e\r\n                        <p\r\n                            *ngIf=" gettypeof(item[1]) == \'object\' && item[1].length>1 &&  item[0]!==\'video\' && !item[0].includes(\'vd\')  ">\r\n                            \x3c!-- in ng for .. --\x3e\r\n                            <ng-container *ngFor="let arr of item[1]">\r\n                                <span\r\n                                    *ngIf=" !item[0].includes(\'image\') &&  (item[2]!=null &&   !item[2].includes(\'image\') ) && item[0] !=\'video_array\'"\r\n                                    [innerHtml]="arr"></span>\r\n                                <span\r\n                                    *ngIf="item[0].includes(\'image\') || (item[2]!=null && item[2].includes(\'image\')) ">\r\n                                    <img [src]="arr" [alt]="arr">\r\n                                </span>\r\n                                <span\r\n                                    *ngIf="item[0].includes(\'video_array\') || (item[2]!=null && item[2].includes(\'video_array\'))"\r\n                                    [innerHtml]="arr">\r\n\r\n                                </span>\r\n\r\n                            </ng-container>\r\n                        </p>\r\n                    </mat-card-content>\r\n                </mat-card>\r\n\r\n            </div>\r\n\r\n            \x3c!--for custom page in modal(mainly used for tree)--\x3e\r\n            <div *ngIf="data!=null && data.data!=null  && data.data[0]!=null &&  data.data[0].customdata!=null">\r\n\r\n                <iframe class="custom-datadiv" height="auto" [src]="data.data[0].customdata"></iframe>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div *ngIf="data.preview == true">\r\n        <lib-singlepost [post1]="data.previewData.res[0].posts" [user]=""></lib-singlepost>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    <div mat-dialog-actions *ngIf="data.preview != true && data.type==\'confirm\' ">\r\n        <button mat-button *ngIf="data.isconfirmation==null ||  data.isconfirmation!=false"\r\n            (click)="onNoClick()">CANCEL</button>\r\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>CONFIRM</button>\r\n    </div>\r\n\r\n</div>'}]}],dh.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]},{type:platformBrowser.DomSanitizer}]},dh);function dh(e,t,a,n){this._apiService=e,this.dialogRef=t,this.data=a,this.sanitizer=n,this.data.color="primary",this.data.mode="indeterminate",this.data.loadervalue=50,this.data.bufferValue=76}var BottomSheet=(wh.prototype.openLink=function(e){this.bottomSheetRef.dismiss(e)},wh.decorators=[{type:i0.Component,args:[{selector:"bottom-sheet",template:'<div class="bottom-sheet-header-toggle">\r\n    You are about to change status of these record(s)\r\n\r\n</div>\r\n<mat-nav-list class="navlist">\r\n    <a *ngFor="let item of data.items;" mat-list-item (click)="openLink(item)">\r\n        <span class="bottom-sheet{{item.name}}" mat-line>{{item.name}}</span>\r\n    </a>\r\n</mat-nav-list>'}]}],wh.ctorParameters=function(){return[{type:material.MatBottomSheetRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_BOTTOM_SHEET_DATA]}]}]},wh);function wh(e,t){this.bottomSheetRef=e,this.data=t}var ModalForButtomSearch=(Ah.prototype.chooseChipItem=function(e,t){this.selectedData.push(e),this.buttonSearchData.items.value.splice(t,1)},Ah.prototype.searchByItem=function(){this.data.flag="yes",this.data.selectedData=this.selectedData,this.bnottoRef.close(this.data)},Ah.prototype.remove=function(e,t){this.selectedData.splice(t,1),this.buttonSearchData.items.value.push(e)},Ah.prototype.reset=function(){this.searchVal="",this.buttonSearchData.items.value=[],this.buttonSearchData.items.value=this.allButtonData},Ah.prototype.searchByKeyword=function(e){var a=this;if(null!=this.searchVal&&""!=this.searchVal){this.loading_flag=!0;var t=this.buttonSearchData.items.serversearchdata.url+this.buttonSearchData.items.serversearchdata.endpoint,n={search_str:e,limit:50};this.apiService.postSearch1(t,n).subscribe(function(e){var t=e;"success"==t.status&&(a.loading_flag=!1,t=t.res.slice(0,50),a.matAutosearchData=t)})}else this.errmsg="Please Enter Keywords"},Ah.prototype.close=function(){this.data.flag="no",this.bnottoRef.close(this.data)},Ah.decorators=[{type:i0.Component,args:[{selector:"button-search-modal",template:'<div class="bottom-sheet-header-toggle">\r\n    <h2 style="text-align: center;"> {{buttonSearchData.items.label}}</h2>\r\n</div>\r\n\r\n\r\n<div class="selecteditemcls" *ngIf="selectedData.length >0">\r\n    <span>Selected :</span>\r\n    <div class="navlist" style="display: inline;">\r\n        <mat-chip class="example-box" *ngFor="let item of selectedData;let i=index;">{{item.name}}\r\n            <mat-icon style="cursor: pointer;" matChipRemove (click)="remove(item,i)">cancel</mat-icon>\r\n        </mat-chip>\r\n    </div>\r\n    <span>\r\n        <button mat-raised-button color="primary" class="add_button" (click)="searchByItem()">Search\r\n        </button>\r\n    </span>\r\n</div>\r\n<br><br>\r\n\r\n<div>\r\n    <mat-progress-bar mode="indeterminate" *ngIf="loading_flag == true"></mat-progress-bar>\r\n</div>\r\n<br><br>\r\n\r\n<div class="searchValcls">\r\n    <mat-form-field class="example-full-width">\r\n        <mat-label>Search By Keywords</mat-label>\r\n        <input matInput placeholder="filter" [(ngModel)]="searchVal" (keyup)="searchByKeyword(searchVal)" [matAutocomplete]="auto">\r\n    </mat-form-field>\r\n    <mat-autocomplete #auto="matAutocomplete">\r\n        <mat-option *ngFor="let item of matAutosearchData;let i = index" [value]="item.name"\r\n        (click)="chooseChipItem(item,i)">\r\n            {{item.name}}\r\n        </mat-option>\r\n    </mat-autocomplete>\r\n\r\n    \x3c!-- <span class="errcls" style="color: brown;" *ngIf="searchVal == null || searchVal == \'\'">{{errmsg}}</span> --\x3e\r\n    <span class=\'searchByKeywordcls\'>\r\n        <span style="cursor: pointer;" class="material-icons" (click)="reset()">\r\n            sync\r\n        </span>\r\n         \x3c!-- <button mat-raised-button color="primary" class="add_button" (click)="searchByKeyword(searchVal)">Search\r\n        </button> --\x3e\r\n    </span>\r\n\r\n</div>\r\n<br>\r\n\r\n<div class="chipdatacls">\r\n    <div style="display: inline;" *ngIf="buttonSearchData.items?.value.length >0">\r\n        <h2 style="text-align: center;">OR Choose From <span class="material-icons">\r\n                south\r\n            </span></h2>\r\n        <mat-chip-list class="example-chip" cdkDropList cdkDropListOrientation="horizontal">\r\n            <mat-chip class="example-box" cdkDrag *ngFor="let item of buttonSearchData.items?.value;let i =index">\r\n                <span style="cursor: pointer;" (click)="chooseChipItem(item,i)"> {{item.name}}</span>\r\n            </mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <span class=\'norecordcls\' style="text-align: center;" *ngIf="buttonSearchData.items?.value.length == 0"><span\r\n           >No Record Found</span></span>\r\n</div>\r\n\r\n\r\n<div class="clrcls">\r\n    <span style="cursor: pointer;\r\n    float: right;\r\n    margin-bottom: -6px;" matTooltip="Clear" class="material-icons" (click)="close()">\r\n        clear\r\n    </span>\r\n</div>'}]}],Ah.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]},{type:ApiService}]},Ah);function Ah(e,t,a){this.bnottoRef=e,this.data=t,this.apiService=a,this.buttonSearchData={},this.selectedData=[],this.searchVal="",this.allButtonData=[],this.loading_flag=!1,this.errmsg="",this.matChipData=[],this.matAutosearchData=[],this.buttonSearchData={},this.buttonSearchData=t,this.allButtonData=t.items.value}var VideoPlayer=(Oh.prototype.onNoClick=function(){this.dialogRef.close()},Oh.decorators=[{type:i0.Component,args:[{selector:"videoplayer",template:'<lib-youtubeplayer [videoid]="data.previewData.video"></lib-youtubeplayer>\r\n<button type="button" mat-dialog-close class="closemodal">x</button>'}]}],Oh.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},Oh);function Oh(e,t){this.dialogRef=e,this.data=t}var ImageView=(Rh.prototype.addnotes=function(){},Rh.prototype.onNoClick=function(){this.dialogRef.close()},Rh.decorators=[{type:i0.Component,args:[{selector:"image",template:'<mat-card class="imgmodalcls">\r\n    <mat-card-container>\r\n        <span>\r\n            <img src={{data.alldata}} height="100%" width="100%">\r\n        </span>\r\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>Close</button>        \r\n    </mat-card-container>\r\n    </mat-card>'}]}],Rh.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},Rh);function Rh(e,t){this.dialogRef=e,this.data=t}var SnackbarComponent=(Uh.decorators=[{type:i0.Component,args:[{selector:"snack-bar-component-example-snack",template:'<span class="snack-bar-message">\r\n  {{data.errormessage}}\r\n</span>\r\n',styles:["\n    .example-pizza-party {\n      color: hotpink;\n    }\n  "]}]}],Uh.ctorParameters=function(){return[{type:snackBar.MatSnackBarRef},{type:undefined,decorators:[{type:i0.Inject,args:[snackBar.MAT_SNACK_BAR_DATA]}]}]},Uh);function Uh(e,t){this.snackBarRef=e,this.data=t}var ShowformComponent=(Object.defineProperty(Xh.prototype,"formdata",{set:function(e){this.formdataval=e,this.formdataval.fields&&console.log(this.formdataval,"htlmmmmmmm")},enumerable:!0,configurable:!0}),Object.defineProperty(Xh.prototype,"formfieldrefreshdata",{set:function(e){this.formfieldrefreshdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(Xh.prototype,"formfieldrefresh",{set:function(e){this.formfieldrefreshval=e},enumerable:!0,configurable:!0}),Object.defineProperty(Xh.prototype,"custombuttons",{set:function(e){this.customlistenbuttons=e},enumerable:!0,configurable:!0}),Object.defineProperty(Xh.prototype,"externaldatavalue",{set:function(e){this.externalDataVal=e},enumerable:!0,configurable:!0}),Object.defineProperty(Xh.prototype,"name",{get:function(){return this.formGroup.get("name")},enumerable:!0,configurable:!0}),Xh.prototype.ngOnInit=function(){this.createForm(0)},Xh.prototype.getFormVal=function(e){this.onFormFieldChange.emit({field:"formdata",fieldval:"formdataval",fromval:this.formGroup.value,buttonval:e,loading:this.loading})},Xh.prototype.CustomFlagFields=function(e,t){this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,customButtonVal:t,customfield:"add"})},Xh.prototype.CustomFlagFieldsRemove=function(e,t){this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value,customButtonVal:t,customfield:"remove"})},Xh.prototype.GeneratePassword=function(e){var t=this;this.PasswordVal="",this.PasswordVal=this.makeid(10),setTimeout(function(){e.value=t.PasswordVal,t.formGroup.controls[e.name].patchValue(t.PasswordVal)},200)},Xh.prototype.onchoosefiles=function(e,t,a){console.log("works properly",a),void 0===a?(console.log("if part"),document.getElementById("filechoosersingle"+t).click()):(console.log("else part",document.getElementById("filechooser")),document.getElementById("filechoosermultiple"+t).click())},Xh.prototype.copyGeneratePassword=function(e){var t="";if(null!=(t=null!=this.formGroup.controls[e.name].value&&"undefined"!=typeof this.formGroup.controls[e.name].value&&""!=this.formGroup.controls[e.name].value?this.formGroup.controls[e.name].value:"")&&""!=t&&void 0!==t){var a=document.createElement("textarea");a.value=t,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Copy To Clipboard"}})}else this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Please Generate or Enter Password..!"}})},Xh.prototype.previewGeneratePassword=function(e){var t="";if(null!=(t=null!=this.formGroup.controls[e.name].value&&"undefined"!=typeof this.formGroup.controls[e.name].value&&""!=this.formGroup.controls[e.name].value?this.formGroup.controls[e.name].value:"")&&""!=t&&void 0!==t)switch(e.type){case"password":e.type="text",this.isPasswordVisible=!1;break;case"text":e.type="password",this.isPasswordVisible=!0}else this._snackBar.openFromComponent(SnackbarComponent,{duration:3e3,data:{errormessage:"Please Generate or Enter Password..!"}})},Xh.prototype.makeid=function(e){var t="P";e+=1;for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=a.length,r=0;r<e;r++)t+=a.charAt(Math.floor(Math.random()*n));return t},Xh.prototype.externalDataFunction=function(e,t){this.onFormFieldChange.emit({action:"externaldata",flag:"add",fieldVal:e,index:t,externalDataVal:this.externalDataVal})},Xh.prototype.externalDataEditFunction=function(e,t,a,n){"edit"==e&&this.onFormFieldChange.emit({action:"externaldata",flag:"edit",fieldVal:t,index:a,valind:n,externalDataVal:this.externalDataVal}),"remove"==e&&t.value.splice(n,1)},Xh.prototype.openCalendar=function(){this.dateflag=!0},Xh.prototype.navtocancel=function(){this.onFormFieldChange.emit({field:"formcancel",fromval:this.formGroup.value,loading:this.loading}),null!=this.formdataval.cancelroute&&this.router.navigate([this.formdataval.cancelroute])},Xh.prototype.ngAfterViewInit=function(){var t=this;setTimeout(function(){for(var e in t.formdataval.fields)"file"==t.formdataval.fields[e].type&&(t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("drop",t.handleDrop.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("dragenter",t.cancel.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("dragover",t.cancel.bind(t)))},1e3)},Xh.prototype.triggerevents=function(e){var t=this;console.log("in triggerevents",e),setTimeout(function(){t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("drop",t.handleDrop.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragenter",t.cancel.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragdragover",t.cancel.bind(t))},1e3)},Xh.prototype.cancel=function(e){return e.preventDefault(),!1},Xh.prototype.handleDrop=function(r){var i=this;console.log("handelDrop",r),document.getElementById("list"),r.preventDefault();var e=null==r.dataTransfer?r:r.dataTransfer,l=null==r.dataTransfer?1:0;console.log("dt dataaa++",e),console.log("dt filechooserFlag++",l);var o=null==e.files?e.target.files:e.files;console.log("files count",o.length);for(var t=function(n){var e=o[n];function t(a){if("file"==s.formdataval.fields[a].type&&(s.formdataval.fields[a].name==r.target.id.replace("drop","")||s.formdataval.fields[a].name==r.target.id.replace("filechoosersingle","")||s.formdataval.fields[a].name==r.target.id.replace("filechoosermultiple","")))if(console.log("if part",r.target.id,s.formdataval.fields[a]),null==s.formdataval.fields[a].multiple){if(console.log(" before 2nd if part of type checking",o),"image/png"!=o[n].type&&"image/jpg"!=o[n].type&&"image/jpeg"!=o[n].type||(console.log("2nd if part of type checking"),(t=new FileReader).onload=function(e){if(i.formdataval.fields[a].imageUrl=e.target.result,i.formdataval.fields[a].croppedimagearray=[],null!=i.formdataval.fields[a].aspectratio&&null!=i.formdataval.fields[a].imagecroppedratiolabel&&0<i.formdataval.fields[a].aspectratio.length)for(var t in i.formdataval.fields[a].aspectratio)i.formdataval.fields[a].croppedImage=[],i.formdataval.fields[a].imagecroppedratiolabel=i.formdataval.fields[a].imagecroppedratiolabel},t.readAsDataURL(o[n])),s.formdataval.fields[a].loaded=0,s.formdataval.fields[a].loadfile=1,0==l)if(null!=s.filearray[r.target.id.replace("drop","")])for(var e in s.formdataval.fields)s.formdataval.fields[e].name==r.target.id.replace("drop","")&&(s.deletefile(s.formdataval.fields[e],1),setTimeout(function(){i.filearray[r.target.id.replace("drop","")]=o[n]},0));else s.filearray[r.target.id.replace("drop","")]=o[n];else if(1==l)if(null!=s.filearray[r.target.id.replace("filechoosersingle","")])for(var e in s.formdataval.fields)s.formdataval.fields[e].name==r.target.id.replace("filechoosersingle","")&&(s.deletefile(s.formdataval.fields[e],1),setTimeout(function(){i.filearray[r.target.id.replace("filechoosersingle","")]=o[n]},0));else s.filearray[r.target.id.replace("filechoosersingle","")]=o[n]}else{var t;"image/png"!=o[n].type&&"image/jpg"!=o[n].type&&"image/jpeg"!=o[n].type||(console.log("++++++if part",o),(t=new FileReader).onload=function(e){if(o[n].imageUrl=e.target.result,null!=i.formdataval.fields[a].aspectratio&&null!=i.formdataval.fields[a].imagecroppedratiolabel&&0<i.formdataval.fields[a].aspectratio.length)for(var t in o[n].croppedImage=[],o[n].aspectratio=i.formdataval.fields[a].aspectratio,o[n].imagecroppedratiolabel=i.formdataval.fields[a].imagecroppedratiolabel,o[n].croppedimagearray=[],o[n].aspectratio)null!=o[n].aspectratio&&null!=o[n].aspectratio[t]&&o[n].aspectratio[t]},t.readAsDataURL(o[n])),o[n].loaded=0,o[n].loadfile=1,null!=s.formdataval.fields[a]&&null!=s.formdataval.fields[a].imagefields&&0<s.formdataval.fields[a].imagefields.length&&(o[n].imagefields=s.formdataval.fields[a].imagefields),0==l&&(null==s.filearray[r.target.id.replace("drop","")]&&(s.filearray[r.target.id.replace("drop","")]=[]),s.filearray[r.target.id.replace("drop","")].push(o[n])),1==l&&(null==s.filearray[r.target.id.replace("filechoosermultiple","")]&&(s.filearray[r.target.id.replace("filechoosermultiple","")]=[]),s.filearray[r.target.id.replace("filechoosermultiple","")].push(o[n]))}}for(var a in console.log("files++",e),s.formdataval.fields)t(a)},s=this,a=0;a<o.length;a++)t(a);return!1},Xh.prototype.trackByFn=function(e){return e},Xh.prototype.trackByFnMultiple=function(e){return e},Xh.prototype.trackByFnMulti=function(e){return e},Xh.prototype.keyupVal=function(e,t,a,n,r,i,l,o){this.filearray[i][a].imagefields[n].value=o.target.value,null!=this.filearray[i][a].flds&&null!=this.filearray[i][a].flds[n]||(null==this.filearray[i][a].flds&&(this.filearray[i][a].flds=[]),this.filearray[i][a].flds[n]=[]),this.filearray[i][a].flds[n]={key:o.target.name,value:o.target.value}},Xh.prototype.checkValue=function(e,t,a,n,r,i,l){if(null!=this.filearray[i][a].flds&&null!=this.filearray[i][a].flds[n]||(null==this.filearray[i][a].flds&&(this.filearray[i][a].flds=[]),this.filearray[i][a].flds[n]=[]),null!=this.filearray[i][a].flds&&null!=this.filearray[i][a].flds[n]&&null!=this.filearray[i][a].flds[n].key&&this.filearray[i][a].flds[n].key==l)switch(this.filearray[i][a].flds[n].value){case!0:this.filearray[i][a].flds[n].value=!1;break;case!1:this.filearray[i][a].flds[n].value=!0}else this.filearray[i][a].flds[n]={key:l,value:!0}},Xh.prototype.uploadfile=function(t){var a=new FileReader,n=this.filearray[t.name];n.uploaded=2,this.fieldloading[t.name],t.name,a.onloadend=function(e){fetch(t.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t.prefix+n.name.split(" ").join(""),type:n.type,path:t.path,bucket:t.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([a.result],{type:n.type})})}).then(function(){n.uploaded=1,n.loadfile=1,t.loaded=null,n.fileservername=t.prefix+n.name.split(" ").join("")})},a.readAsArrayBuffer(n)},Xh.prototype.uploadall=function(e){for(var t in this.filearray[e.name])null==this.filearray[e.name][t].bucket&&this.uploadfilemultiple(e,this.filearray[e.name][t],t)},Xh.prototype.deletefilemultipleall=function(e){for(var t in this.filearray[e.name])this.deletefilemultiple(e,this.filearray[e.name][t],t);setTimeout(function(){},3e3)},Xh.prototype.uploadfilemultiple=function(t,e,a){var n=new FileReader,r=this.filearray[t.name][a];null==this.filecount[t.name]&&(this.filecount[t.name]=0),this.filecount[t.name]++,r.uploaded=2,r.loadfile=1,this.fieldloading[t.name],t.name,n.onloadend=function(e){fetch(t.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t.prefix+r.name.split(" ").join(""),type:r.type,path:t.path,bucket:t.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([n.result],{type:r.type})})}).then(function(){r.uploaded=1,r.loaded=null,r.fileservername=t.prefix+r.name.split(" ").join("")})},n.readAsArrayBuffer(r)},Xh.prototype.deletefile=function(a,n){var r=this;void 0===n&&(n="");var e={},t=this.filearray[a.name];e.file=a.prefix+t.name,e.path=a.path,e.bucket=a.bucket,this.filearray[a.name].uploaded=2,this.filearray[a.name].loadfile=0,this._apiService.postSearch(a.apideleteurl,this.formdataval.jwttoken,e).subscribe(function(e){var t;"success"==(t=e).status&&""==n&&(a.value={},r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),r.filearray[a.name].uploaded=null,r.filearray[a.name].loadfile=0,a.loadfile=0),"error"==t.status&&r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),r.loading=!1})},Xh.prototype.deletesinglefile=function(e,t){"image/png"==t||"image/jpg"==t||"image/jpeg"==t?(this.filearray[e.name].loadfile=0,e.imageUrl=null,e.loadfile=0):this.filearray[e.name].loadfile=0,this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}})},Xh.prototype.deletesinglefilefrommultiple=function(e,t,a){void 0===t&&(t=""),this.filearray[e.name][a].loadfile=0,null!=this.filearray[e.name]&&this.filearray[e.name].splice(a,1),this._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}})},Xh.prototype.deletefilemultiple=function(a,e,n){var r=this;void 0===e&&(e="");var t={},i=this.filearray[a.name][n];this.filecount[a.name]--,t.file=a.prefix+i.name,t.path=a.path,t.bucket=a.bucket,i.uploaded=2,this._apiService.postSearch(a.apideleteurl,this.formdataval.jwttoken,t).subscribe(function(e){var t;"success"==(t=e).status&&(i.loadfile=0,r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),null!=r.filearray[a.name]&&(i.loadfile=0,r.filearray[a.name].splice(n,1))),"error"==t.status&&r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){r._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),r.loading=!1})},Xh.prototype.ngOnChanges=function(e){var n=this;for(var t in e)"formfieldrefreshdata"==t&&setTimeout(function(){if(null!=n.formfieldrefreshdataval){if(null!=n.formGroup&&null!=n.formfieldrefreshdataval.field&&null!=n.formGroup.controls[n.formfieldrefreshdataval.field]&&n.formGroup.controls[n.formfieldrefreshdataval.field].patchValue(n.formfieldrefreshdataval.value),null==n.formfieldrefreshdataval.field&&null!=n.formfieldrefreshdataval.formvaldata&&"object"==typeof n.formfieldrefreshdataval.formvaldata)for(var e in n.formfieldrefreshdataval.formvaldata)for(var t in null!=n.formGroup.controls[e]&&n.formGroup.controls[e].patchValue(n.formfieldrefreshdataval.formvaldata[e]),n.formdataval.fields){if(n.formdataval.fields[t].name==e&&"autocomplete"==n.formdataval.fields[t].type&&null!=n.formdataval.fields[t].multiple&&0!=n.formdataval.fields[t].multiple)for(var a in n.formdataval.fields[t].val)-1!=n.formfieldrefreshdataval.formvaldata[e].indexOf(n.formdataval.fields[t].val[a].key)&&n.setautocompletevalue(n.formdataval.fields[t].val[a],n.formdataval.fields[t]);if(n.formdataval.fields[t].name==e&&"autocomplete"==n.formdataval.fields[t].type&&(null==n.formdataval.fields[t].multiple||0==n.formdataval.fields[t].multiple))for(var a in n.formdataval.fields[t].val)n.formfieldrefreshdataval.formvaldata[e]==n.formdataval.fields[t].val[a].key&&n.setautocompletevalue(n.formdataval.fields[t].val[a],n.formdataval.fields[t]);if(n.formdataval.fields[t].name==e&&"checkbox"==n.formdataval.fields[t].type&&null!=n.formdataval.fields[t].multiple&&0!=n.formdataval.fields[t].multiple)for(var a in n.formdataval.fields[t].val)-1!=n.formfieldrefreshdataval.formvaldata[e].indexOf(n.formdataval.fields[t].val[a].key)?null!=n.formGroup.controls[e+"__"+a]&&n.formGroup.controls[e+"__"+a].patchValue(!0):null!=n.formGroup.controls[e+"__"+a]&&n.formGroup.controls[e+"__"+a].patchValue(!1)}"showfieldloader"==n.formfieldrefreshdataval.field&&(n.fieldloading=n.formfieldrefreshdataval.value),"addfromcontrol"==n.formfieldrefreshdataval.field&&n.managefromcontrol(n.formfieldrefreshdataval.value,"add"),"removefromcontrol"==n.formfieldrefreshdataval.field&&n.managefromcontrol(n.formfieldrefreshdataval.value,"remove")}},0)},Xh.prototype.inputblur=function(e){this.formGroup.controls[e].markAsUntouched()},Xh.prototype.filterautocomplete=function(e,t){this.inputblur(e);var a=this.formGroup.controls[e].value;if(""==a||null==a)this.filerfielddata=[];else{var n=t.val.filter(function(e){return e.val.includes(a)});this.filerfielddata=[],this.filerfielddata=n}},Xh.prototype.reloadautocomplete=function(e){this.currentautocomplete=e.name},Xh.prototype.removechipsingle=function(e){this.autocompletefiledvalue[e.name]=null},Xh.prototype.removechipmultiple=function(e,t){this.autocompletefiledvalue[e.name].splice(t,1),0==this.autocompletefiledvalue[e.name].length&&(this.autocompletefiledvalue[e.name]=null)},Xh.prototype.setautocompletevalue=function(e,t){null==t.multiple?this.autocompletefiledvalue[t.name]=e.key:(null==this.autocompletefiledvalue[t.name]&&(this.autocompletefiledvalue[t.name]=[]),this.autocompletefiledvalue[t.name].push(e.key)),null!=this.formGroup.controls[t.name]&&(this.formGroup.controls[t.name].patchValue(null),this.inputblur(t.name))},Xh.prototype.managefromcontrol=function(e,t){if("remove"==t&&null!=e.name)for(var a in this.formdataval.fields)this.formdataval.fields[a].name==e.name&&(this.formdataval.fields.splice(parseInt(a),1),this.formGroup.removeControl(e.name));if("remove"==t&&null==e.name&&1<e.length)for(var a in this.formdataval.fields)for(var n in e)this.formdataval.fields[a].name==e[n]&&(this.formdataval.fields.splice(parseInt(a),1),this.formGroup.removeControl(e[n]));if("add"==t)if(null!=e.after)for(var a in this.formdataval.fields)this.formdataval.fields[a].name==e.after&&(this.formdataval.fields.splice(parseInt(a)+1,0,e),this.createForm(1));else if("object"==typeof e)for(var r in e)for(var a in this.formdataval.fields)null!=e[r]&&null!=e[r].name&&this.formdataval.fields[a].name==e[r].after&&(this.formdataval.fields.splice(parseInt(a)+1,0,e[r]),this.createForm(1))},Xh.prototype.resetformdata=function(){this.formGroup.reset(),this.filearray=[],this.autocompletefiledvalue=[],this.currentautocomplete=""},Xh.prototype.checkchange=function(e,t){if(null!=this.formGroup.controls[e.name]&&this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value}),null!=e.dependent&&0<e.dependent.length){var a=0;for(var n in e.dependent)if(e.dependent[n].condval.toString()==this.formGroup.controls[e.name].value.toString())a++,this.formdataval.fields.splice(parseInt(t+parseInt(a)),0,e.dependent[n].field),this.createForm(1);else for(var r in this.formdataval.fields)this.formdataval.fields[r].name==e.dependent[n].field.name&&(this.formdataval.fields.splice(parseInt(r),1),this.formGroup.removeControl(e.dependent[n].field.name))}},Xh.prototype.createForm=function(e){var c=this;function t(e){if(null==m.formGroup.controls[m.formdataval.fields[e]]){var t=[],a=[];if(null!=m.formdataval.fields[e].value?t.push(m.formdataval.fields[e].value):t.push(""),"file"==m.formdataval.fields[e].type)if(m.filearray[m.formdataval.fields[e].name]=m.formdataval.fields[e].value,null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple){for(var n in m.formdataval.fields[e].loadfile=1,m.filearray[m.formdataval.fields[e].name])null!=m.filearray[m.formdataval.fields[e].name][n]&&(m.filearray[m.formdataval.fields[e].name][n].uploaded=1,m.filearray[m.formdataval.fields[e].name][n].loadfile=1,null!=m.formdataval.fields[e].aspectratio&&null!=m.formdataval.fields[e].imagecroppedratiolabel&&""!=m.formdataval.fields[e].aspectratio&&0<m.formdataval.fields[e].aspectratio.length&&(m.filearray[m.formdataval.fields[e].name][n].aspectratio=m.formdataval.fields[e].aspectratio,m.filearray[m.formdataval.fields[e].name][n].imagecroppedratiolabel=m.formdataval.fields[e].imagecroppedratiolabel));null!=m.filearray[m.formdataval.fields[e].name]&&(m.filecount[m.formdataval.fields[e].name]=m.filearray[m.formdataval.fields[e].name].length)}else null!=m.filearray[m.formdataval.fields[e].name]&&(m.filearray[m.formdataval.fields[e].name].uploaded=1,m.formdataval.fields[e].loadfile=1,m.filearray[m.formdataval.fields[e].name].loadfile=1);if("checkbox"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple)if(null==m.formdataval.fields[e].value)t.push([]);else if(null!=m.formdataval.fields[e].val){var r=[];for(var i in m.formdataval.fields[e].val)null!=m.formdataval.fields[e].value&&m.formdataval.fields[e].value.includes(m.formdataval.fields[e].val[i].key)?r.push(!0):r.push(!1);t.push(r)}if(null!=m.formdataval.fields[e].validations&&0<m.formdataval.fields[e].validations.length)for(var l in m.formdataval.fields[e].validations)null==m.formdataval.fields[e].validations[l].message&&(m.formdataval.fields[e].validations[l].message="Not Valid !!"),"required"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.required),"match"==m.formdataval.fields[e].validations[l].rule&&m.formGroup.setValidators(m.checkPasswords),"autorequired"==m.formdataval.fields[e].validations[l].rule&&m.formGroup.setValidators(m.autorequired),"pattern"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.pattern(m.formdataval.fields[e].validations[l].value)),"maxLength"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.maxLength(m.formdataval.fields[e].validations[l].value)),"min"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.min(m.formdataval.fields[e].validations[l].value)),"max"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.max(m.formdataval.fields[e].validations[l].value)),"minLength"==m.formdataval.fields[e].validations[l].rule&&a.push(forms.Validators.minLength(m.formdataval.fields[e].validations[l].value));if("image"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].value&&setTimeout(function(){document.querySelector(".imgwrap_"+c.formdataval.fields[e].name+"_"+c.formdataval.fields[e].value).classList.add("imagechoiceactive")},4e3),"checkbox"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple){var o=!1;for(var s in m.formdataval.fields[e].val)o=!(null==m.formdataval.fields[e].value||!m.formdataval.fields[e].value.includes(m.formdataval.fields[e].val[s].key)),m.formGroup.addControl(m.formdataval.fields[e].name+"__"+s,new forms.FormControl(o,a))}else m.formGroup.addControl(m.formdataval.fields[e].name,new forms.FormControl({value:t[0],disabled:m.formdataval.fields[e].disabled},a));if("autocomplete"==m.formdataval.fields[e].type&&null!=m.formdataval.fields[e].multiple&&1==m.formdataval.fields[e].multiple)for(var d in m.formdataval.fields[e].val)null!=m.formdataval.fields[e].value&&"object"==typeof m.formdataval.fields[e].value&&-1!=m.formdataval.fields[e].value.indexOf(m.formdataval.fields[e].val[d].key)&&m.setautocompletevalue(m.formdataval.fields[e].val[d],m.formdataval.fields[e]);"autocomplete"!=m.formdataval.fields[e].type||null!=m.formdataval.fields[e].multiple&&0!=m.formdataval.fields[e].multiple||null!=m.formdataval.fields[e].value&&m.setautocompletevalue(m.formdataval.fields[e].val[0],m.formdataval.fields[e])}}void 0===e&&(e=0),0==e&&(this.formGroup=this.formBuilder.group({}));var m=this;for(var a in this.formdataval.fields)t(a);setTimeout(function(){c.showform=!0,null==c.formdataval.submitactive&&(c.formdataval.submitactive=!0)},10)},Xh.prototype.setChangeValidate=function(){var t=this;this.formGroup.get("validate").valueChanges.subscribe(function(e){"1"==e?(t.formGroup.get("name").setValidators([forms.Validators.required,forms.Validators.minLength(3)]),t.titleAlert="You need to specify at least 3 characters"):t.formGroup.get("name").setValidators(forms.Validators.required),t.formGroup.get("name").updateValueAndValidity()})},Xh.prototype.chooseimg=function(e,t){document.querySelectorAll(".imgwrapper").forEach(function(e){e.classList.remove("imagechoiceactive")}),document.querySelector(".imgwrap_"+t.name+"_"+e.key).classList.add("imagechoiceactive"),this.formGroup.controls[t.name].patchValue(e.key)},Xh.prototype.checkPasswords=function(e){var t=e.controls.password.value,a=e.controls.confirmpassword.value;return null==a||""==a?(e.controls.confirmpassword.setErrors({required:!0}),{required:!0}):t!=a?(e.controls.confirmpassword.setErrors({match:!0}),{match:!0}):void 0},Xh.prototype.checkPassword=function(e){var t=e.value;return!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/.test(t)&&t?{requirements:!0}:null},Xh.prototype.autorequired=function(e){for(var t in e)if("autocomplete"==e[t].type&&null!=e[t].validations&&null!=e[t].validations[0]&&"autorequired"==e[t].validations[0].rule&&null==this.autocompletefiledvalue[e[t].name])return this.formGroup.controls[e.name].setErrors({autorequired:!0}),{autorequired:!0}},Xh.prototype.checkInUseEmail=function(a){var n=["tony@gmail.com"];return new rxjs.Observable(function(t){setTimeout(function(){var e=-1!==n.indexOf(a.value)?{alreadyInUse:!0}:null;t.next(e),t.complete()},4e3)})},Xh.prototype.getError=function(e){return this.formGroup.get("email").hasError("required")?"Field is required":this.formGroup.get("email").hasError("pattern")?"Not a valid emailaddress":this.formGroup.get("email").hasError("alreadyInUse")?"This emailaddress is already in use":""},Xh.prototype.getErrorPassword=function(){return this.formGroup.get("password").hasError("required")?"Field is required (at least eight characters, one uppercase letter and one number)":this.formGroup.get("password").hasError("requirements")?"Password needs to be at least eight characters, one uppercase letter and one number":""},Xh.prototype.onSubmit=function(e){var a=this;this.post=e;var t={};for(var n in this.formGroup.controls){this.formGroup.controls[n].markAsTouched();var r=n.split("__");for(var i in this.formdataval.fields){if("file"==this.formdataval.fields[i].type&&null==this.formdataval.fields[i].multiple&&null!=this.filearray[this.formdataval.fields[i].name]){if(null!=this.filearray[this.formdataval.fields[i].name]&&null!=this.filearray[this.formdataval.fields[i].name].uploaded&&1==this.filearray[this.formdataval.fields[i].name].uploaded&&1==this.filearray[this.formdataval.fields[i].name].loadfile){var l={};if(("image/png"==this.filearray[this.formdataval.fields[i].name].type||"image/jpg"==this.filearray[this.formdataval.fields[i].name].type||"image/jpeg"==this.filearray[this.formdataval.fields[i].name].type)&&null!=this.formdataval.fields[i].aspectratio&&0<this.formdataval.fields[i].aspectratio.length){for(var o in l.aspectratio=this.formdataval.fields[i].aspectratio,this.formdataval.fields[i].croppedimagearray)delete this.formdataval.fields[i].croppedimagearray[o].file,delete this.formdataval.fields[i].croppedimagearray[o].base64;l.croppedimagearray=this.formdataval.fields[i].croppedimagearray}l.fileservername=this.filearray[this.formdataval.fields[i].name].fileservername,l.name=this.filearray[this.formdataval.fields[i].name].name,l.size=this.filearray[this.formdataval.fields[i].name].size,l.type=this.filearray[this.formdataval.fields[i].name].type,l.path=this.formdataval.fields[i].path,l.bucket=this.formdataval.fields[i].bucket,l.baseurl=this.formdataval.fields[i].baseurl,l.imagefields=this.formdataval.fields[i].imagefields,this.formGroup.controls[this.formdataval.fields[i].name].patchValue(l)}null!=this.filearray[this.formdataval.fields[i].name]&&0==this.filearray[this.formdataval.fields[i].name].loadfile&&(l={},this.formGroup.controls[this.formdataval.fields[i].name].patchValue(l))}if("file"==this.formdataval.fields[i].type&&null!=this.formdataval.fields[i].multiple&&1==this.formdataval.fields[i].multiple){var s=[];for(var d in this.filearray[this.formdataval.fields[i].name]){if(null!=this.filearray[this.formdataval.fields[i].name][d]&&1==this.filearray[this.formdataval.fields[i].name][d].uploaded){if(l={},("image/png"==this.filearray[this.formdataval.fields[i].name][d].type||"image/jpg"==this.filearray[this.formdataval.fields[i].name][d].type||"image/jpeg"==this.filearray[this.formdataval.fields[i].name][d].type)&&null!=this.filearray[this.formdataval.fields[i].name][d].aspectratio&&0<this.filearray[this.formdataval.fields[i].name][d].aspectratio.length){for(var o in l.aspectratio=this.filearray[this.formdataval.fields[i].name][d].aspectratio,l.croppedimagearray=this.filearray[this.formdataval.fields[i].name][d].croppedimagearray,this.filearray[this.formdataval.fields[i].name][d].croppedimagearray)delete this.filearray[this.formdataval.fields[i].name][d].croppedimagearray[o].base64,delete this.filearray[this.formdataval.fields[i].name][d].croppedimagearray[o].file;l.croppedimagearray=this.filearray[this.formdataval.fields[i].name][d].croppedimagearray}l.fileservername=this.filearray[this.formdataval.fields[i].name][d].fileservername,l.name=this.filearray[this.formdataval.fields[i].name][d].name,l.size=this.filearray[this.formdataval.fields[i].name][d].size,l.type=this.filearray[this.formdataval.fields[i].name][d].type,l.path=this.formdataval.fields[i].path,l.bucket=this.formdataval.fields[i].bucket,l.baseurl=this.formdataval.fields[i].baseurl,null!=this.formdataval.fields[i].imagefields&&0<this.formdataval.fields[i].imagefields.length&&null!=this.filearray[this.formdataval.fields[i].name][d].flds&&0<this.filearray[this.formdataval.fields[i].name][d].flds.length&&(l.imgfields=this.filearray[this.formdataval.fields[i].name][d].flds,l.flds=this.filearray[this.formdataval.fields[i].name][d].flds),s.push(l)}this.formGroup.controls[this.formdataval.fields[i].name].patchValue(s)}}if("autocomplete"==this.formdataval.fields[i].type&&(null!=this.autocompletefiledvalue&&null!=this.autocompletefiledvalue[this.formdataval.fields[i].name]&&null!=this.formdataval.fields[i].validations?this.formGroup.controls[this.formdataval.fields[i].name].setErrors({required:null}):this.formGroup.controls[this.formdataval.fields[i].name].setErrors({required:!0}),n==this.formdataval.fields[i].name&&null==t[n]&&(t[n]=this.autocompletefiledvalue[this.formdataval.fields[i].name])),1<r.length&&r[0]==this.formdataval.fields[i].name&&this.formdataval.fields[i].name!=n&&"checkbox"==this.formdataval.fields[i].type&&null!=this.formdataval.fields[i].multiple&&1==this.formGroup.controls[n].value)for(var c in this.formdataval.fields[i].val)this.formdataval.fields[i].val[c].key==r[1]&&(null==t[this.formdataval.fields[i].name]&&(t[this.formdataval.fields[i].name]=[]),t[this.formdataval.fields[i].name].push(r[1]));n==this.formdataval.fields[i].name&&null==t[n]&&(t[n]=this.formGroup.controls[n].value)}}if(this.formGroup.valid){this.loading=!0;var m=this.formdataval.apiUrl+this.formdataval.endpoint,u={};u.data=this.formGroup.value,null!=this.formdataval.secret&&null!=this.formdataval.jwttoken&&(u.secret=this.formdataval.secret,u.jwttoken=this.formdataval.jwttoken),null!=this.formdataval.endpoint&&""!=this.formdataval.endpoint?this._apiService.postSearch(m,this.formdataval.jwttoken,u).subscribe(function(e){var t;"success"==(t=e).status&&(a.onFormFieldChange.emit({field:"fromsubmit",fieldval:t.status,fromval:t}),a.formGroup.reset(),a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:a.formdataval.successmessage}}),null!=a.formdataval.redirectpath&&""!=a.formdataval.redirectpath&&"/"!=a.formdataval.redirectpath?a.router.navigate([a.formdataval.redirectpath]):a.loading=!1),"error"==t.status&&(a.onFormFieldChange.emit({field:"fromsubmit",fieldval:t.status,fromval:t}),a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t}),a.loading=!1)},function(e){a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),a.onFormFieldChange.emit({field:"fromsubmitservererror",fieldval:"servererror",fromval:a.formGroup.value}),a.loading=!1}):(this.loading=!1,this.onFormFieldChange.emit({field:"fromsubmit",fieldval:"success",formdataval:this.formdataval,source:u,loading:this.loading,fromval:this.formGroup.value}))}else this.onFormFieldChange.emit({field:"fromsubmiterror",fieldval:"validationerror",fromval:this.formGroup.value,loading:this.loading}),this.scrollToFirstInvalidControl()},Xh.prototype.scrollToFirstInvalidControl=function(){var e=this.elementRef.nativeElement.querySelector("form .ng-invalid");window.scroll({top:this.getTopOffset(e),left:0,behavior:"smooth"})},Xh.prototype.getTopOffset=function(e){return e.getBoundingClientRect().top+window.scrollY-50},Xh.prototype.fileChangeEvent=function(e){console.log("change event hitted",e),this.imageChangedEvent=e},Xh.prototype.singleimageCropped=function(e,t,a,n){this.formdataval.fields[a].croppedImage[n]=e.base64,this.formdataval.fields[a].croppedimagearray[n]=e},Xh.prototype.multipleimageCropped=function(e,t,a,n,r,i){for(var l in i[r].croppedImage[n]=e.base64,i[r].croppedimagearray[n]=e,i[r].aspectratio)i[r].aspectratio[l]=Number(i[r].aspectratio[l])},Xh.prototype.imageLoaded=function(){},Xh.prototype.cropperReady=function(){},Xh.prototype.loadImageFailed=function(){},Xh.prototype.opensingleimagecrop=function(t){t.croppedimagearray=[],t.croppedImage=[];var e="https://"+t.value.bucket+".s3.amazonaws.com/"+t.value.path+t.value.fileservername;this.getImagetoDataURL(e,function(e){t.imageUrl=e,t.value=null})},Xh.prototype.opensingleimagecropformultiple=function(t){t.croppedimagearray=[],t.croppedImage=[];var e="https://"+t.bucket+".s3.amazonaws.com/"+t.path+t.fileservername;this.getImagetoDataURL(e,function(e){t.imageUrl=e})},Xh.prototype.getImagetoDataURL=function(e,t){var a=new XMLHttpRequest;a.onload=function(){var e=new FileReader;e.onloadend=function(){t(e.result)},e.readAsDataURL(a.response)},a.open("GET",e),a.responseType="blob",a.send()},Xh.decorators=[{type:i0.Component,args:[{selector:"lib-showform",template:'\x3c!--<mat-toolbar color="primary">\r\n  <span class="fill-remaining-space">My Reactive Form with Material</span>\r\n</mat-toolbar>--\x3e\r\n\r\n\r\n\r\n\r\n\r\n<section *ngIf="loading == true" class="example-section">\r\n    <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\r\n    </mat-progress-bar>\r\n</section>\r\n<div class="container" *ngIf="showform; else forminfo" novalidate>\r\n\r\n    <form [formGroup]="formGroup" (ngSubmit)="onSubmit(formGroup.value)" class="form">\r\n\r\n        <ng-container *ngIf="formdataval.fields!=null && formdataval.fields.length>0">\r\n            <ng-container *ngFor="let fields of formdataval.fields ; let ival=index;">\r\n\r\n                <div class="form_field_wrapper form_field_wrapper{{fields.name}}">\r\n                    <mat-card class="form_header_{{fields.name}}"\r\n                        *ngIf="fields.heading!=null && formGroup.controls[fields.name]!=null "\r\n                        [innerHTML]="fields.heading">\r\n                    </mat-card>\r\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'select\'  )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        \x3c!-- for select--\x3e\r\n                        \x3c!-- <div>ff</div> --\x3e\r\n                        <mat-label> Select {{fields.label}} </mat-label>\r\n                        <mat-select (blur)="inputblur(fields.name)" (closed)="inputblur(fields.name)"\r\n                            (selectionChange)="checkchange(fields,ival)" [formControlName]="fields.name"\r\n                            [multiple]="fields.multiple?true:false">\r\n                            <mat-option *ngFor="let data of fields.val" [value]="data.val"> {{data.name}}</mat-option>\r\n                        </mat-select>\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'image\'  )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <div>\r\n                            <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\r\n                            </mat-label>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ng-container *ngFor="let imgvals of fields.val">\r\n                                <span class="imgwrapper imgwrap_{{fields.name}}_{{imgvals.key}}">\r\n                                    <img (click)="chooseimg(imgvals,fields)" src="{{imgvals.image}}">\r\n                                </span>\r\n                            </ng-container>\r\n                        </div>\r\n\r\n\r\n\r\n                        <input (blur)="inputblur(fields.name)" type="hidden" placeholder="{{fields.label}}"\r\n                            formControlName="{{fields.name}}">\r\n                        <mat-error\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n                            <ng-container *ngFor="let valdidations of fields.validations">\r\n                                <span\r\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'checkbox\' && fields.multiple==null )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\r\n                        <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\r\n                        </mat-label>\r\n                        <mat-checkbox *ngIf="fields.multiple ==null && !fields.multiple" class=" example-margin"\r\n                            (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)"\r\n                            [formControlName]="fields.name" [labelPosition]="fields.labelPosition"> {{fields.label}}\r\n                        </mat-checkbox>\r\n\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n                    </div>\r\n                    <div *ngIf="fields.name!=null && (fields.type==\'checkbox\' ) && fields.multiple !=null && fields.multiple==true "\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\r\n                        <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\r\n                        </mat-label>\r\n\r\n                        <ng-container *ngIf="fields.multiple !=null && fields.multiple">\r\n                            <ng-container *ngFor="let vals of fields.val , let vi=index;">\r\n                                <mat-checkbox class="example-radio-button" (blur)="inputblur(fields.name)"\r\n                                    (change)="checkchange(fields,ival)" formControlName="{{fields.name}}__{{vi}}"\r\n                                    [value]="vals.key">{{vals.val}}\r\n                                </mat-checkbox>\r\n\r\n                            </ng-container>\r\n                        </ng-container>\r\n\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        \x3c!-- <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                        <mat-error >\r\n                            <ng-container *ngFor="let valdidations of fields.validations">\r\n                                <span *ngIf="formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n\r\n                    </ng-container>--\x3e\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </div>\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'radio\' )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <mat-label [innerHTML]="fields.label"></mat-label>\r\n\r\n                        <mat-radio-group aria-labelledby="example-radio-group-label"\r\n                            class="example-radio-group form_field_{{fields.name}}" [formControlName]="fields.name">\r\n                            <mat-radio-button class=" example-radio-button" (blur)="inputblur(fields.name)"\r\n                                (change)="checkchange(fields,ival)" *ngFor="let vals of fields.val" [value]="vals.key">\r\n                                {{vals.val}}\r\n                            </mat-radio-button>\r\n                        </mat-radio-group>\r\n\r\n                        \x3c!--<ng-container *ngFor="let vals of fields.val">\r\n             <mat-checkbox class="form_field_{{fields.name}} example-radio-button" (blur)="inputblur(fields.name)"   [formControlName]="fields.name" [value]="vals.key">{{vals.val}}</mat-checkbox>\r\n\r\n         </ng-container>--\x3e\r\n\r\n\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <ng-container *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'numberformat\'">\r\n                        <div class="add_form">\r\n                        <div class="mat-form-field-wrapper">\r\n                            <div class="phonenumber mat-form-field">\r\n                            <input appPhoneMask (blur)="inputblur(fields.name)" type="text"\r\n                            [placeholder]="fields.label" (change)="checkchange(fields,ival)"\r\n                            [formControlName]="fields.name">\r\n                            </div>\r\n                            <div class="errorfield">\r\n                                <ng-container\r\n                                *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                                <mat-error>\r\n                                    <ng-container *ngFor="let valdidations of fields.validations">\r\n                                        <span\r\n                                            *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                    </ng-container>\r\n                                </mat-error>\r\n                            </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </ng-container>\r\n\r\n                        <mat-form-field\r\n                            *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'email\' || fields.type==\'number\' || fields.type==\'text\' || fields.type == \'password\')"\r\n                            class="form-element form_field_{{fields.name}}">\r\n                            <mat-label [innerHTML]="fields.label"></mat-label>\r\n\r\n\r\n                            <input matInput (blur)="inputblur(fields.name)" [type]="fields.type"\r\n                                [placeholder]="fields.label" (change)="checkchange(fields,ival)"\r\n                                [formControlName]="fields.name" >\r\n\r\n                            <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                            <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                            <ng-container\r\n                                *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                                <mat-error>\r\n                                    <ng-container *ngFor="let valdidations of fields.validations">\r\n                                        <span\r\n                                            *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                    </ng-container>\r\n                                </mat-error>\r\n                            </ng-container>\r\n\r\n                            <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                                <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                            </ng-container>\r\n\r\n                        </mat-form-field>\r\n\r\n\r\n                        <div class="passbuttoncls" *ngIf="formGroup.controls[fields.name] != null && (fields.type == \'password\'||fields.type == \'text\' ) && \r\n                        fields.passwordflag == true ">\r\n                            <button mat-raised-button color="accent" type="button" (click)="GeneratePassword(fields)"\r\n                                class="GeneratePasswordcls" matTooltip="Generate Password">\r\n                                Generate Password</button> &nbsp;\r\n\r\n                            <button mat-raised-button color="accent" type="button"\r\n                                (click)="copyGeneratePassword(fields)" class="GeneratePasswordcls" matTooltip="Copy Password">\r\n                                Copy Password</button> &nbsp;\r\n\r\n                            <span *ngIf="isPasswordVisible == true" class="material-icons"\r\n                                (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Show Password">\r\n                                remove_red_eye\r\n                            </span>\r\n\r\n                            <span *ngIf="isPasswordVisible == false" class="material-icons"\r\n                                (click)="previewGeneratePassword(fields)" style="cursor: pointer;" matTooltip="Hide Password">\r\n                                visibility_off\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div class="passbuttoncls"\r\n                            *ngIf="formGroup.controls[fields.name] != null && customlistenbuttons?.flag == true">\r\n\r\n\r\n                            <div *ngFor="let item of customlistenbuttons.buttons">\r\n\r\n                                <div *ngIf="fields.type == item.type && fields?.custombuttonflag == true">\r\n                                    <span>\r\n                                        <button mat-raised-button color="accent" type="button"\r\n                                            (click)="CustomFlagFields(fields,item)" class="CustomFlagFieldscls">\r\n                                            {{item?.labeladd}}<span class="material-icons">\r\n                                                add\r\n                                            </span></button> &nbsp;\r\n\r\n                                        <button mat-raised-button color="accent" type="button"\r\n                                            (click)="CustomFlagFieldsRemove(fields,item)" class="CustomFlagFieldscls">\r\n                                            {{item?.labelremove}}<span class="material-icons">\r\n                                                remove\r\n                                            </span></button>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div *ngIf=" fields?.customheadingflag != null &&  fields?.customheadingflag == true">\r\n                            <div *ngIf="fields?.customheadingtitle != null">\r\n                                <mat-card class="customheadingtitlecls">\r\n                                    {{fields?.customheadingtitle}}</mat-card>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'textarea\' "\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <mat-label [innerHTML]="fields.label"></mat-label>\r\n                        <textarea matInput placeholder="Comment" (blur)="inputblur(fields.name)"\r\n                            [rows]="fields.rows?fields.rows:6" [cols]="fields.cols?fields.cols:50"\r\n                            [formControlName]="fields.name" (change)="inputblur(fields.name)">\r\n                        </textarea>\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n                    </mat-form-field>\r\n\r\n\r\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'date\' "\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <mat-label [innerHTML]="fields.label"></mat-label>\r\n\r\n                        <input matInput [matDatepicker]="picker1" [formControlName]="fields.name" [min]="fields.minDate"\r\n                            [max]="fields.maxDate" (focus)="picker1.open()">\r\n                        <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker1></mat-datepicker>\r\n                        \x3c!-- <textarea matInput \r\n     placeholder="Comment" \r\n     [formControlName]="fields.name" \r\n     (change)="inputblur(fields.name)">\r\n  </textarea> --\x3e\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'autocomplete\' "\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <mat-label [innerHTML]="fields.label"></mat-label>\r\n                        \x3c!-- {{fields.val.length}}\r\n --\x3e\r\n\r\n\r\n\r\n                        \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-valid --\x3e\r\n                        \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-invalid --\x3e\r\n\r\n                        <input matInput (blur)="inputblur(fields.name)" (click)="reloadautocomplete(fields)"\r\n                            (keyup)=filterautocomplete(fields.name,fields) [formControlName]="fields.name"\r\n                            placeholder="{{fields.label}}" [matAutocomplete]="auto">\r\n\r\n                        \x3c!-- <mat-autocomplete #auto="matAutocomplete" *ngIf="currentautocomplete==fields.name || currentautocomplete==\'\' "> --\x3e\r\n                        <mat-autocomplete #auto="matAutocomplete">\r\n                            <ng-container *ngIf="filerfielddata!=null && filerfielddata.length>0 ">\r\n                                <mat-option *ngFor="let vals of filerfielddata " [value]="vals.key"\r\n                                    (click)="setautocompletevalue(vals,fields)">\r\n                                    \x3c!-- <img class="example-option-img" aria-hidden [src]="state.flag" height="25"> --\x3e\r\n                                    <span>{{vals.val}}</span>\r\n                                    \x3c!-- <small>Population: {{state.population}}</small> --\x3e\r\n                                </mat-option>\r\n                            </ng-container>\r\n                        </mat-autocomplete>\r\n\r\n\r\n\r\n\r\n\r\n                        <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple==null"\r\n                            aria-label="{{fields.name}} data">\r\n                            <ng-container *ngFor="let vals of fields.val ">\r\n                                <ng-container *ngIf="vals.key==autocompletefiledvalue[fields.name]">\r\n                                    <mat-chip [removable]=true>{{vals.val}}\r\n                                        <mat-icon matChipRemove (click)="removechipsingle(fields)">cancel</mat-icon>\r\n                                    </mat-chip>\r\n                                </ng-container>\r\n\r\n                            </ng-container>\r\n\r\n                        </mat-chip-list>\r\n\r\n\r\n                        <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple!=null"\r\n                            aria-label="{{fields.name}} data">\r\n                            <ng-container *ngFor="let vals of fields.val ">\r\n                                <ng-container *ngFor="let avals of autocompletefiledvalue[fields.name] ; let ib=index ">\r\n                                    <ng-container *ngIf="vals.key==avals">\r\n                                        <mat-chip [removable]=true>{{vals.val}}\r\n                                            <mat-icon matChipRemove (click)="removechipmultiple(fields,ib)">cancel\r\n                                            </mat-icon>\r\n                                        </mat-chip>\r\n                                    </ng-container>\r\n                                </ng-container>\r\n\r\n                            </ng-container>\r\n\r\n                        </mat-chip-list>\r\n\r\n                        \x3c!-- <textarea matInput \r\n     placeholder="Comment" \r\n     [formControlName]="fields.name" \r\n     (change)="inputblur(fields.name)">\r\n  </textarea> --\x3e\r\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\r\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n\r\n                    \x3c!-- [config]="{uiColor: \'#99000\'}" \r\n\r\n[readonly]="false"\r\n                (change)="onChange($event)"\r\n                (editorChange)="onEditorChange($event)" \r\n                (ready)="onReady($event)"\r\n                (focus)="onFocus($event)"\r\n                (blur)="onBlur($event)"\r\n                (contentDom)="onContentDom($event)"\r\n                (fileUploadRequest)="onFileUploadRequest($event)"\r\n                (fileUploadResponse)="onFileUploadResponse($event)"\r\n                (paste)="onPaste($event)"\r\n                (drop)="onDrop($event)"\r\n                debounce="500"\r\n\r\n                 [ngModelOptions]="{standalone: true}\r\n\r\n\r\n                   <ckeditor\r\n                [(ngModel)]="ckeditorContent"\r\n                [ngModelOptions]="{standalone: true}"\r\n                \r\n                \r\n                >\r\n              </ckeditor>\r\n--\x3e\r\n\r\n\r\n\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'editor\' )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        \x3c!-- <input  (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}"> --\x3e\r\n\r\n                        <div *ngIf="fields.ckeConfig != null && fields.ckeConfig != \'\'">\r\n                            <mat-label [innerHTML]="fields.label"></mat-label>\r\n                            <ckeditor (blur)="inputblur(fields.name)" [config]="fields.ckeConfig"\r\n                                [formControlName]="fields.name"></ckeditor>\r\n                            <mat-error\r\n                                *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </div>\r\n\r\n                        <div *ngIf="fields.ckeConfig == null || fields.ckeConfig == \'\'">\r\n                            <mat-label [innerHTML]="fields.label"></mat-label>\r\n                            <ckeditor (blur)="inputblur(fields.name)" [formControlName]="fields.name"></ckeditor>\r\n                            <mat-error\r\n                                *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n                                <ng-container *ngFor="let valdidations of fields.validations">\r\n                                    <span\r\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'externaldata\' )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n\r\n                        <span class="externalDataFunctioncls">\r\n                            <button type="button" mat-raised-button color="primary"\r\n                                (click)="externalDataFunction(fields,ival)" matTooltip = "{{fields.label}}">{{fields.label}}</button>\r\n                        </span>\r\n                        <br>\r\n\r\n                        <ng-container *ngIf="fields.value != null && fields.value.length >0">\r\n                            \x3c!-- {{fields.value | json}} --\x3e\r\n\r\n                            <div *ngFor="let item of fields.value;let i = index">\r\n                                <div class="externalcardcls">\r\n                                    <mat-card>\r\n\r\n                                        <span class="keycls">\r\n                                            {{item.label}} :\r\n                                        </span>\r\n\r\n                                        <span class="valcls" *ngIf="item.imgflag == null">\r\n                                            {{item.val}}\r\n                                        </span>\r\n\r\n                                        <span class="imgcls" *ngIf="item.imgflag != null && item.imgflag == true">\r\n                                            <img [src]="item.val">\r\n                                        </span>\r\n\r\n                                        <span class="external_buttoncls">\r\n\r\n\r\n                                            <span style="cursor: pointer;"\r\n                                                (click)="externalDataEditFunction(\'edit\',fields,ival,i)"\r\n                                                class="material-icons">\r\n                                                create\r\n                                            </span>\r\n\r\n                                            <span style="cursor: pointer;"\r\n                                                (click)="externalDataEditFunction(\'remove\',fields,ival,i)"\r\n                                                class="material-icons">\r\n                                                clear\r\n                                            </span>\r\n\r\n                                        </span>\r\n\r\n                                    </mat-card>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </ng-container>\r\n                        \x3c!-- <ng-container *ngIf="externalDataVal != null && externalDataVal.length >0">\r\n\r\n                            <ng-container *ngFor="let item of externalDataVal">\r\n                                <div *ngIf="fields.name == item.name && item.value != null && item.value.length >0">\r\n\r\n                                    {{item | json}}\r\n\r\n                                    {{fields.value | json}}\r\n\r\n                                </div>\r\n                            </ng-container>\r\n\r\n                        </ng-container> --\x3e\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'hidden\' )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <input (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}"\r\n                            formControlName="{{fields.name}}">\r\n                        <mat-error\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n                            <ng-container *ngFor="let valdidations of fields.validations">\r\n                                <span\r\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                    </div>\r\n\r\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'file\' )"\r\n                        class="form-element form_field_{{fields.name}}">\r\n                        <mat-label [innerHTML]="fields.label"></mat-label>\r\n                        <div class="aligner" (load)="triggerevents(fields)">\r\n                            <div class="drop" (change)="fileChangeEvent($event)" [attr.fileid]="fields.name"\r\n                                id="drop{{fields.name}}" (click)="onchoosefiles($event,fields.name,fields.multiple)">Browse or Drop Files Here\r\n                                \x3c!-- Or <br><input type="file" (change)="fileChangeEvent($event)" /> --\x3e\r\n\r\n                                <ng-container *ngIf="fields.multiple !=null && fields.multiple==true">\r\n                                 <input type="file" multiple id="filechoosermultiple{{fields.name}}" style="display:none"  (change)="handleDrop($event)">\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf="fields.multiple == null ">\r\n                                 <input type="file" id="filechoosersingle{{fields.name}}" style="display:none" multiple  (change)="handleDrop($event)">\r\n                                </ng-container>\r\n                            </div>\r\n\r\n                            \x3c!-- <input type="file" (change)="fileChangeEvent($event)" /> --\x3e\r\n\r\n                            \x3c!-- <span>{{fields | json}}</span> --\x3e\r\n\r\n                            <div class="filesid" id="list{{fields.name}}">\r\n                                <h1 *ngIf="filearray[fields.name]!=null ">Files:</h1>\r\n                                \x3c!-- <div></div> --\x3e\r\n                                <ng-container\r\n                                    *ngIf="filearray[fields.name] !=null  && fields.multiple==null && fields.loadfile != null && fields.loadfile == 1">\r\n                                    <div class="filecontainerdiv">\r\n                                        <span *ngIf="filearray[fields.name].uploaded==1"\r\n                                            class="material-icons fileuploadcompleteicon ">\r\n                                            cloud_done\r\n                                        </span>\r\n\r\n\r\n                                        <div class="imagedivcls"\r\n                                            *ngIf="filearray[fields.name].type == \'image/jpeg\' || filearray[fields.name].type == \'image/png\' || filearray[fields.name].type == \'image/jpg\'">\r\n\r\n                                            <div class="divimagecardcls">\r\n                                                <mat-card class="example-card imagecardcls"\r\n                                                    *ngIf="fields.imageUrl != null && fields.imageUrl != \'\'">\r\n                                                    <img mat-card-image [src]="fields.imageUrl">\r\n                                                </mat-card>\r\n                                            </div>\r\n\r\n\r\n                                            <div class="divimagecardcls"\r\n                                                *ngIf="fields.value != null && fields.value != \'\' && fields.value.fileservername != null">\r\n\r\n                                                <mat-card class="example-card imagecardcls">\r\n\r\n                                                    <span class="material-icons cropcls"\r\n                                                        *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0"\r\n                                                        (click)="opensingleimagecrop(fields)">\r\n                                                        crop\r\n                                                    </span>\r\n\r\n                                                    <img mat-card-image\r\n                                                        src="https://{{fields.value.bucket}}.s3.amazonaws.com/{{fields.value.path}}{{fields.value.fileservername}}">\r\n                                                </mat-card>\r\n                                            </div>\r\n\r\n\r\n                                            <div class="cropimagesdiv"\r\n                                                *ngIf="fields.aspectratio != null && fields.aspectratio != \'\' && fields.aspectratio.length > 0 && fields.imageUrl != null && fields.imageUrl != \'\'">\r\n                                                <h2> Croped Images :</h2>\r\n\r\n                                                <ng-container *ngFor="let c of fields.aspectratio;let ci=index"\r\n                                                    class="image-cropper-cls">\r\n                                                    <br />\r\n                                                    <span>Croped Image (Asepect Ratio) :\r\n                                                        {{fields.imagecroppedratiolabel[ci]}} </span><br>\r\n\r\n                                                    <image-cropper [imageBase64]="fields.imageUrl"\r\n                                                        [maintainAspectRatio]="true" [aspectRatio]="c"\r\n                                                        (imageCropped)="singleimageCropped($event,fields,ival,ci)"\r\n                                                        (imageLoaded)="imageLoaded()" (cropperReady)="cropperReady()"\r\n                                                        (loadImageFailed)="loadImageFailed()" [imageQuality]="100"\r\n                                                        [resizeToHeight]="300"></image-cropper>\r\n\r\n                                                </ng-container>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class="filesdivcls">\r\n                                            <span class="material-icons"\r\n                                                *ngIf="filearray[fields.name].type == \'application/pdf\'">\r\n                                                picture_as_pdf\r\n                                            </span>\r\n\r\n                                            <span class="material-icons"\r\n                                                *ngIf="filearray[fields.name].type == \'video/mp4\'">\r\n                                                movie_filter\r\n                                            </span>\r\n\r\n                                            <span class="material-icons"\r\n                                                *ngIf="filearray[fields.name].type == \'text/csv\' || filearray[fields.name].type == \'text/plain\'">\r\n                                                description\r\n                                            </span>\r\n\r\n                                            <span\r\n                                                class="uploadedfilename uploadedfilename_{{filearray[fields.name]}}">{{filearray[fields.name].name}}</span>\r\n                                            <br />\r\n                                            <span\r\n                                                class="uploadedfiletype uploadedfiletype_{{filearray[fields.name]}}">{{filearray[fields.name].type}}</span>\r\n                                        </div>\r\n\r\n\r\n                                        <div class="filefieldsmaincls">\r\n                                            <ng-container class="descdiv"\r\n                                                *ngIf=" filearray[fields.name] !=null && fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0 ">\r\n                                                <div class="filefieldscls">\r\n                                                    <div class="filefields"\r\n                                                        *ngFor="let item of fields.imagefields;let i =index;trackBy: trackByFn">\r\n\r\n                                                        <mat-form-field class="example-full-width"\r\n                                                            *ngIf="item.type == \'text\'">\r\n                                                            <input matInput type="text"\r\n                                                                [(ngModel)]="fields.imagefields[i].value"\r\n                                                                [ngModelOptions]="{standalone: true}"\r\n                                                                name="{{item.name}}" matInput\r\n                                                                placeholder="{{item.label}}">\r\n                                                        </mat-form-field>\r\n\r\n                                                        <mat-form-field class="example-full-width"\r\n                                                            *ngIf="item.type == \'textarea\'">\r\n                                                            <textarea matInput name="{{item.name}}"\r\n                                                                [(ngModel)]="fields.imagefields[i].value"\r\n                                                                [ngModelOptions]="{standalone: true}"\r\n                                                                placeholder="{{item.label}}" [rows]=\'3\'\r\n                                                                [cols]=\'30\'></textarea>\r\n                                                        </mat-form-field>\r\n\r\n                                                        <mat-form-field class="example-full-width"\r\n                                                            *ngIf="item.type == \'number\'">\r\n                                                            <input type="number" matInput name="{{item.name}}"\r\n                                                                [ngModelOptions]="{standalone: true}"\r\n                                                                [(ngModel)]="fields.imagefields[i].value" matInput\r\n                                                                placeholder="{{item.label}}">\r\n                                                        </mat-form-field>\r\n\r\n                                                        <div *ngIf="item.type == \'checkbox\'">\r\n                                                            <mat-checkbox name="{{item.name}}"\r\n                                                                [(ngModel)]="fields.imagefields[i].value"\r\n                                                                [ngModelOptions]="{standalone: true}" matInput>\r\n                                                            </mat-checkbox>\r\n                                                            &nbsp; {{item.label}}\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </ng-container>\r\n                                        </div>\r\n\r\n\r\n\r\n                                        <div class="actionbtndiv">\r\n                                            <mat-chip class="fileuploadbutton" style="cursor: pointer;"\r\n                                                *ngIf="filearray[fields.name].uploaded==null " mat-raised-button\r\n                                                (click)="uploadfile(fields)">Upload</mat-chip>\r\n\r\n                                            <mat-chip class="deletesinglefilecls" style="cursor: pointer;"\r\n                                                *ngIf="fields.loaded != null && fields.loaded==0" mat-raised-button\r\n                                                (click)="deletesinglefile(fields,filearray[fields.name].type)">Delete\r\n                                            </mat-chip>\r\n\r\n                                            <mat-chip class="filedeletebutton" style="cursor: pointer;"\r\n                                                *ngIf="filearray[fields.name].uploaded != null && filearray[fields.name].uploaded==1"\r\n                                                mat-raised-button (click)="deletefile(fields)">Delete</mat-chip>\r\n                                        </div>\r\n\r\n                                        \x3c!-- <mat-chip>Papadum</mat-chip> --\x3e\r\n\r\n                                        <section *ngIf="filearray[fields.name].uploaded==2 "\r\n                                            class="example-section uploadprogress">\r\n                                            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode"\r\n                                                [value]="value" [bufferValue]="bufferValue">\r\n                                            </mat-progress-bar>\r\n                                        </section>\r\n                                    </div>\r\n                                </ng-container>\r\n\r\n\r\n                                \x3c!-- for multiple file uploads  --\x3e\r\n                                <ng-container\r\n                                    *ngIf="filearray[fields.name]!=null && fields.multiple !=null  && fields.multiple==true">\r\n                                    <ng-container\r\n                                        *ngFor="let files of filearray[fields.name]; let fi=index;trackBy: trackByFnMulti">\r\n                                        <div class="filecontainerdiv">\r\n\r\n                                            \x3c!-- {{files | json}} ++ --\x3e\r\n\r\n                                            <div *ngIf="files.loadfile != null && files.loadfile==1"\r\n                                                class="filesdivcls">\r\n\r\n                                                \x3c!-- {{files.loadfile}}+++++++++++== --\x3e\r\n\r\n                                                <span *ngIf="files.uploaded==1"\r\n                                                    class="material-icons fileuploadcompleteicon">\r\n                                                    cloud_done\r\n                                                </span>\r\n\r\n                                                <div class="divimagecardcls"\r\n                                                    *ngIf="files.type == \'image/jpeg\' || files.type == \'image/png\' || files.type == \'image/jpg\'">\r\n\r\n\r\n                                                    <mat-card class="example-card imagecardcls"\r\n                                                        *ngIf="files.imageUrl != null && files.imageUrl != \'\'">\r\n                                                        <img mat-card-image [src]="files.imageUrl">\r\n                                                    </mat-card>\r\n\r\n                                                    <mat-card class="example-card imagecardcls"\r\n                                                        *ngIf="files.imageUrl == null">\r\n\r\n                                                        <span class="material-icons cropcls"\r\n                                                            *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0"\r\n                                                            (click)="opensingleimagecropformultiple(files)">\r\n                                                            crop\r\n                                                        </span>\r\n\r\n\r\n                                                        <img mat-card-image\r\n                                                            src="https://{{files.bucket}}.s3.amazonaws.com/{{files.path}}{{files.fileservername}}">\r\n                                                    </mat-card>\r\n\r\n                                                    <div class="cropimagesdiv"\r\n                                                        *ngIf="files.aspectratio != null && files.aspectratio != \'\' && files.aspectratio.length > 0 && files.imageUrl != null && files.imageUrl != \'\'">\r\n                                                        <h2> Croped Images :</h2>\r\n\r\n                                                        <ng-container *ngFor="let c of files.aspectratio;let ci=index">\r\n                                                            <br />\r\n                                                            <span>Croped Image (Asepect Ratio) :\r\n                                                                {{files.imagecroppedratiolabel[ci]}} </span><br>\r\n\r\n                                                            <image-cropper [imageBase64]="files.imageUrl"\r\n                                                                [maintainAspectRatio]="true" [aspectRatio]="c"\r\n                                                                [resizeToWidth]="128"\r\n                                                                (imageCropped)="multipleimageCropped($event,files,ival,ci,fi,filearray[fields.name])"\r\n                                                                (imageLoaded)="imageLoaded()"\r\n                                                                (cropperReady)="cropperReady()"\r\n                                                                (loadImageFailed)="loadImageFailed()"\r\n                                                                [imageQuality]="100" [resizeToHeight]="300">\r\n                                                            </image-cropper>\r\n\r\n                                                            \x3c!-- <mat-card class="example-card imagecardcls"\r\n                                                                *ngIf="files.croppedImage[ci] != null">\r\n                                                                <span>Croped Image Output : </span><br>\r\n                                                                <img class="croppedImagecls"\r\n                                                                    [src]="files.croppedImage[ci]" />\r\n                                                            </mat-card> --\x3e\r\n\r\n                                                        </ng-container>\r\n                                                    </div>\r\n\r\n\r\n                                                </div>\r\n\r\n                                                <span class="material-icons" *ngIf="files.type == \'application/pdf\'">\r\n                                                    picture_as_pdf\r\n                                                </span>\r\n\r\n                                                <span class="material-icons" *ngIf="files.type == \'video/mp4\'">\r\n                                                    movie_filter\r\n                                                </span>\r\n\r\n                                                <span class="material-icons"\r\n                                                    *ngIf="files.type == \'text/csv\' || files.type == \'text/plain\'">\r\n                                                    description\r\n                                                </span>\r\n\r\n                                                <div class="filenamecls">\r\n                                                    <span class="fileuploadednameclass"> {{files.name}}</span>\r\n                                                    <br />\r\n                                                    <span class="fileuploadedtypeclass"> {{files.type}}</span>\r\n                                                </div>\r\n\r\n\r\n                                                <br>\r\n                                                \x3c!-- files ++++ 22 => {{files.imagefields | json}}    --\x3e\r\n                                                \x3c!-- multipleImgFormData --\x3e\r\n                                                <div class="filefieldsmaincls">\r\n                                                    <ng-container class="descdiv"\r\n                                                        *ngIf="fields.imagefields != null && fields.imagefields != \'\' && fields.imagefields.length > 0">\r\n\r\n                                                        \x3c!-- fields {{fields | json}}ss --\x3e\r\n\r\n                                                        <div class="filefieldscls"\r\n                                                            *ngFor="let val of fields.imagefields;let ind=index;trackBy: trackByFnMultiple ">\r\n\r\n                                                            <br>\r\n\r\n                                                            <div *ngIf="val.type == \'text\'" class="filefields">\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields == null">\r\n                                                                    \x3c!-- <span>if imgfields ==</span> --\x3e\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <input matInput type="text"\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\r\n                                                                    \x3c!-- <span>if imgfields ++ </span> --\x3e\r\n\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <input matInput type="text"\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                            </div>\r\n\r\n                                                            \x3c!-- [(ngModel)]="filearray[fields.name][fi].imagefields[ind].value" --\x3e\r\n\r\n                                                            <div *ngIf="val.type == \'textarea\'">\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields == null">\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <textarea matInput\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}"\r\n                                                                            [rows]=\'3\' [cols]=\'30\'></textarea>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <textarea matInput\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}\r\n                                                                            [rows]=\'3\' [cols]=\'30\'></textarea>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n\r\n                                                            </div>\r\n\r\n                                                            <div *ngIf="val.type == \'number\'">\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields == null">\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <input type="number" matInput\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\r\n                                                                    <mat-form-field class="example-full-width">\r\n                                                                        <input type="number" matInput\r\n                                                                            (keyup)="keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)"\r\n                                                                            name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                            matInput\r\n                                                                            placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                            </div>\r\n\r\n\r\n\r\n                                                            <div *ngIf="val.type == \'checkbox\'">\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields == null">\r\n                                                                    <mat-checkbox\r\n                                                                        name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                        matInput\r\n                                                                        placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}"\r\n                                                                        matInput\r\n                                                                        (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)">\r\n                                                                    </mat-checkbox> &nbsp; {{val.label}}\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf="filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0">\r\n                                                                    \x3c!-- chk = >{{filearray[fields.name][fi].imgfields[ind].value}} --\x3e\r\n                                                                    <mat-checkbox\r\n                                                                        name="{{filearray[fields.name][fi].imagefields[ind].name}}"\r\n                                                                        matInput\r\n                                                                        placeholder="{{filearray[fields.name][fi].imagefields[ind].label}}"\r\n                                                                        matInput\r\n                                                                        (change)="checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)"\r\n                                                                        [checked]="filearray[fields.name][fi].imgfields[ind].value">\r\n                                                                    </mat-checkbox> &nbsp; {{val.label}}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        \x3c!-- </div> --\x3e\r\n                                                    </ng-container>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                <div class="actionbtndiv">\r\n\r\n                                                    <mat-chip class="fileuploadbutton" *ngIf="files.uploaded==null "\r\n                                                        style="cursor: pointer;" mat-raised-button\r\n                                                        (click)="uploadfilemultiple(fields,files,fi)">\r\n                                                        Upload\r\n                                                    </mat-chip>\r\n\r\n                                                    <mat-chip class="deletesinglefilecls" style="cursor: pointer;"\r\n                                                        *ngIf="files.loaded != null && files.loaded==0"\r\n                                                        mat-raised-button\r\n                                                        (click)="deletesinglefilefrommultiple(fields,files,fi)">\r\n                                                        Delete\r\n                                                    </mat-chip>\r\n\r\n                                                    <mat-chip class="filedeletebutton" *ngIf="files.uploaded==1"\r\n                                                        style="cursor: pointer;" mat-raised-button\r\n                                                        (click)="deletefilemultiple(fields,files,fi)">\r\n                                                        Delete </mat-chip>\r\n                                                </div>\r\n\r\n                                                <section *ngIf="files.uploaded==2 " class="example-section">\r\n                                                    <mat-progress-bar class="example-margin" [color]="color"\r\n                                                        [mode]="mode" [value]="value" [bufferValue]="bufferValue">\r\n                                                    </mat-progress-bar>\r\n                                                </section>\r\n                                            </div>\r\n                                        </div>\r\n                                        <br />\r\n                                    </ng-container>\r\n                                    <div class="actionbtndiv2">\r\n                                        <mat-chip class="uploadallfile"\r\n                                            *ngIf="(filecount[fields.name] !=null && filecount[fields.name] !=filearray[fields.name].length ) || filecount[fields.name]==null"\r\n                                            mat-raised-button (click)="uploadall(fields)">Upload All</mat-chip>\r\n                                        <mat-chip class="deleteallfile" mat-raised-button\r\n                                            (click)="deletefilemultipleall(fields)">\r\n                                            Delete All\r\n                                        </mat-chip>\r\n                                    </div>\r\n\r\n                                </ng-container>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <mat-error\r\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\r\n                            <ng-container *ngFor="let valdidations of fields.validations">\r\n                                <span\r\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                    </div>\r\n\r\n\r\n                    <section *ngIf="fieldloading == fields.name " class="example-section">\r\n                        <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\r\n                            [bufferValue]="bufferValue">\r\n                        </mat-progress-bar>\r\n                    </section>\r\n                </div>\r\n\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n\r\n\r\n        \x3c!-- <div class="aligner">\r\n            <div id="drop">Drop files here.</div>\r\n            <div id="list">\r\n              <h1>Uploaded Files:</h1>\r\n            </div>\r\n          </div> --\x3e\r\n\r\n        \x3c!-- <label for="singleFile">Upload file</label>\r\n<input id="singleFile" type="file" [fileUploadInputFor]= "fileUploadQueue"/>\r\n<br>\r\n\r\n<mat-file-upload-queue #fileUploadQueue\r\n    [fileAlias]="\'file\'"\r\n    [httpUrl]="\'https://tge24bc2ne.execute-api.us-east-1.amazonaws.com/dev\'">\r\n\r\n    <mat-file-upload [file]="file" [id]="i" *ngFor="let file of fileUploadQueue.files; let i = index"></mat-file-upload>\r\n</mat-file-upload-queue> --\x3e\r\n\r\n\r\n        \x3c!--<mat-form-field class="form-element">\r\n      <input matInput placeholder="Emailaddress" formControlName="email">\r\n      <mat-error *ngIf="!formGroup.controls[\'email\'].valid && formGroup.controls[\'email\'].touched">\r\n        {{ getErrorEmail() }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class="form-element">\r\n      <input matInput placeholder="Name" formControlName="name">\r\n      <mat-error *ngIf="!name.valid && name.touched">\r\n        {{ titleAlert }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class="form-element">\r\n      <textarea matInput placeholder="Description" matTextareaAutosize matAutosizeMinRows="2" matAutosizeMaxRows="5" formControlName="description"></textarea>\r\n      <mat-error *ngIf="!formGroup.controls[\'description\'].valid && formGroup.controls[\'description\'].touched">\r\n        Required field, must be between 5 and 10 characters.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class="form-element">\r\n      <input matInput placeholder="Password" formControlName="password">\r\n      <mat-hint>Choose a password of at least eight characters, one uppercase letter and one number</mat-hint>\r\n      <mat-error *ngIf="!formGroup.controls[\'password\'].valid && formGroup.controls[\'password\'].touched">\r\n        {{ getErrorPassword() }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class="form-element">\r\n      <mat-checkbox formControlName="validate" value="1">Name min. 3 characters</mat-checkbox>\r\n    </div>--\x3e\r\n\r\n        <div class="form-element">\r\n            <button mat-raised-button color="primary" type="submit" class="button"\r\n                [disabled]="!formdataval.submitactive">{{formdataval.submittext}}</button>\r\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidecancel" type="button" class="button"\r\n                (click)="navtocancel()">{{formdataval.canceltext}}</button>\r\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidereset" type="reset"\r\n                (click)="resetformdata()" class="button">{{formdataval.resettext}}</button>\r\n\r\n            <div class="custombuttonscls"\r\n                *ngIf="formdataval.custombuttons != null && formdataval?.custombuttons.length > 0">\r\n                <div *ngFor="let val of formdataval?.custombuttons">\r\n                    <button mat-raised-button color="primary" *ngIf="val?.name !=null && val?.name !=\'\'" type="button"\r\n                        (click)="getFormVal(val)" class="button" matTooltip="{{val?.tooltip}}">{{val?.label}}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </form>\r\n</div>\r\n\r\n<ng-template #forminfo>\r\n    <div class="container">\r\n        {{ post | json }}\r\n    </div>\r\n</ng-template>',styles:[".drop{height:200px;width:200px;border-radius:100px;color:#fff;background-color:#baf;font-size:20px;display:flex;align-items:center}.aligner{height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column}.customheadingtitlecls{background-color:#7fffd4;font-size:x-large;text-align:center}.matimg-cls{height:112px;width:295px}.imgcls img{height:100px;width:100px}.external_buttoncls{float:right}.cropimagesdiv,.croppedImagecls,.imagecardcls{width:300px}.descdiv{margin:5px 0}.cropcls{cursor:pointer;position:absolute;right:10px;top:19px;background:#fffffff2;border-radius:3px;padding:2px}"]}]}],Xh.ctorParameters=function(){return[{type:forms.FormBuilder},{type:ApiService},{type:snackBar.MatSnackBar},{type:router.Router},{type:i0.ElementRef}]},Xh.propDecorators={formdata:[{type:i0.Input}],formfieldrefreshdata:[{type:i0.Input}],formfieldrefresh:[{type:i0.Input}],custombuttons:[{type:i0.Input}],externaldatavalue:[{type:i0.Input}],onFormFieldChange:[{type:i0.Output}]},Xh);function Xh(e,t,a,n,r){this.formBuilder=e,this._apiService=t,this._snackBar=a,this.router=n,this.elementRef=r,this.formatFlag=!1,this.dateflag=!1,this.PasswordVal="",this.externalDataVal=[],this.customlistenbuttons={},this.filechoosersingleTypeFlag=!1,this.filechoosermultipleTypeFlag=!1,this.titleAlert="This field is required",this.post="",this.showform=!1,this.loading=!1,this.formfieldrefreshval=!1,this.formdataval={},this.formfieldrefreshdataval={},this.filerfielddata=[],this.autocompletefiledvalue=[],this.filearray=[],this.filecount=[],this.currentautocomplete="",this.fieldloading="",this.isPasswordVisible=!0,this.singleImgFormData=[],this.imgValue="",this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.onFormFieldChange=new i0.EventEmitter,this.imageChangedEvent="",this.croppedImage=""}var DemoMaterialModule=(fm.decorators=[{type:i0.NgModule,args:[{exports:[a11y.A11yModule,stepper.CdkStepperModule,table.CdkTableModule,tree.CdkTreeModule,dragDrop.DragDropModule,material.MatAutocompleteModule,material.MatBadgeModule,material.MatBottomSheetModule,material.MatButtonModule,material.MatButtonToggleModule,material.MatCardModule,material.MatCheckboxModule,material.MatChipsModule,material.MatStepperModule,material.MatDatepickerModule,material.MatDialogModule,material.MatDividerModule,material.MatExpansionModule,material.MatGridListModule,material.MatIconModule,material.MatInputModule,material.MatListModule,material.MatMenuModule,material.MatNativeDateModule,material.MatPaginatorModule,material.MatProgressBarModule,material.MatProgressSpinnerModule,material.MatRadioModule,material.MatRippleModule,material.MatSelectModule,material.MatSidenavModule,material.MatSliderModule,material.MatSlideToggleModule,material.MatSnackBarModule,material.MatSortModule,material.MatTableModule,material.MatTabsModule,material.MatToolbarModule,material.MatTooltipModule,material.MatTreeModule,portal.PortalModule,scrolling.ScrollingModule]}]}],fm);function fm(){}var YoutubeplayerComponent=(Object.defineProperty(gm.prototype,"videoid",{set:function(e){this.id=e||"<no name set>",this.id=this.sanitizer.bypassSecurityTrustResourceUrl("https://www.youtube.com/embed/"+e+"?autoplay=1")},enumerable:!0,configurable:!0}),gm.prototype.ngOnInit=function(){},gm.decorators=[{type:i0.Component,args:[{selector:"lib-youtubeplayer",template:'\r\n<iframe width="560" height="300" [src]="id" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>',styles:[""]}]}],gm.ctorParameters=function(){return[{type:platformBrowser.DomSanitizer}]},gm.propDecorators={videoid:[{type:i0.Input}]},gm);function gm(e){this.sanitizer=e}var CustomdataPipe=(jm.prototype.transform=function(e,t,a){return"dollar"!=t.match(/dollar/g)&&"currency"!=t.match(/currency/g)?a:"$"+a},jm.decorators=[{type:i0.Pipe,args:[{name:"CustomPipe"}]}],jm);function jm(){}var PhoneFormatingDirective=(om.prototype.onModelChange=function(e){this.onInputChange(e,!1)},om.prototype.keydownBackspace=function(e){this.onInputChange(e.target.value,!0)},om.prototype.onInputChange=function(e,t){if(null!=e&&void 0!==e){var a=e.replace(/\D/g,"");t&&a.length<=6&&(a=a.substring(0,a.length-1)),a=0===a.length?e.replace(/\D/g,""):a.length<=3?a.replace(/^(\d{0,3})/,"($1)"):a.length<=6?a.replace(/^(\d{0,3})(\d{0,3})/,"($1) $2"):a.length<=10?a.replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/,"($1) $2-$3"):(a=a.substring(0,10)).replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/,"($1) $2-$3"),this.ngControl.valueAccessor.writeValue(a)}},om.decorators=[{type:i0.Directive,args:[{selector:"[formControlName][appPhoneMask]"}]}],om.ctorParameters=function(){return[{type:forms.NgControl}]},om.propDecorators={onModelChange:[{type:i0.HostListener,args:["ngModelChange",["$event"]]}],keydownBackspace:[{type:i0.HostListener,args:["keydown.backspace",["$event"]]}]},om);function om(e){this.ngControl=e}var ListingModule=(vm.decorators=[{type:i0.NgModule,args:[{declarations:[ListingComponent,Confirmdialog,BottomSheet,YoutubeplayerComponent,VideoPlayer,ImageView,SnackbarComponent,ShowformComponent,CustomdataPipe,ModalForButtomSearch,PhoneFormatingDirective],imports:[common.CommonModule,DemoMaterialModule,forms.FormsModule,forms.ReactiveFormsModule,router.RouterModule,ngxMoment.MomentModule,ng2Ckeditor.CKEditorModule,ngxImageCropper.ImageCropperModule],schemas:[i0.CUSTOM_ELEMENTS_SCHEMA],exports:[ListingComponent,ShowformComponent],providers:[ApiService],entryComponents:[Confirmdialog,BottomSheet,VideoPlayer,ImageView,SnackbarComponent,ModalForButtomSearch]}]}],vm);function vm(){}exports.ListingService=ListingService,exports.ListingComponent=ListingComponent,exports.Confirmdialog=Confirmdialog,exports.BottomSheet=BottomSheet,exports.ModalForButtomSearch=ModalForButtomSearch,exports.VideoPlayer=VideoPlayer,exports.ImageView=ImageView,exports.SnackbarComponent=SnackbarComponent,exports.ShowformComponent=ShowformComponent,exports.ListingModule=ListingModule,exports.ɵa=ApiService,exports.ɵc=CustomdataPipe,exports.ɵd=PhoneFormatingDirective,exports.ɵe=DemoMaterialModule,exports.ɵb=YoutubeplayerComponent,Object.defineProperty(exports,"__esModule",{value:!0})});
//# sourceMappingURL=listing-angular7.umd.min.js.map