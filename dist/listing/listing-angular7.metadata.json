{"__symbolic":"module","version":4,"metadata":{"ListingService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":2,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor"}]},"statics":{"ngInjectableDef":{}}},"DialogData":{"__symbolic":"interface"},"ListingComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":33,"character":1},"arguments":[{"selector":"lib-listing","animations":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"trigger","line":38,"character":4},"arguments":["detailExpand",[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"state","line":39,"character":6},"arguments":["collapsed",{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"style","line":39,"character":25},"arguments":[{"height":"0px","minHeight":"0"}]}]},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"state","line":40,"character":6},"arguments":["expanded",{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"style","line":40,"character":24},"arguments":[{"height":"*"}]}]},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"transition","line":41,"character":6},"arguments":["expanded <=> collapsed",{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/animations","name":"animate","line":41,"character":43},"arguments":["225ms cubic-bezier(0.4, 0.0, 0.2, 1)"]}]}]]}],"template":"<div class=\"container\">\r\n    <!-- <div>{{testvalue|customdata:\"Mr.\":\"the great\"}}</div> -->\r\n    <mat-card>\r\n\r\n        <div class=\"searchiconcls\" *ngIf=\"searchBarFlagVal == true\">\r\n            <span class=\"material-icons iconcls\" matTooltip=\"{{searchBarToolTip}}\"\r\n                (click)=\"SearchBarToggle(searchBarFlag)\">\r\n                search\r\n            </span>\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"togglesearchcls\" *ngIf=\"searchBarFlag == true\">\r\n\r\n            <mat-toolbar-row class=\"searchbar listmaindivbody\" *ngIf=\"rescount>0\">\r\n\r\n\r\n                <ng-container class=\"inputfilterForloop\"\r\n                    *ngIf=\"search_settingsval !=null && search_settingsval.textsearch != null \">\r\n                    <ng-container *ngFor=\"let item of search_settingsval.textsearch\">\r\n                        <mat-form-field class=\"searchdiv pad-gap\">\r\n\r\n                            <input class=\"filterForText\" matInput (change)=\"textsearchfunction(item.field,item)\"\r\n                                (keyup)=\"textsearchfunction(item.field,item)\" [(ngModel)]='tsearch[item.field]'\r\n                                placeholder=\"{{item.label}}\">\r\n                            <span class=\"filterForTexticon\" matPrefix><i class=\"material-icons searchicon\">\r\n                                    search\r\n                                </i> &nbsp;</span>\r\n                        </mat-form-field>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n                <ng-container class=\"inputfilterForAuto\"\r\n                    *ngIf=\"search_settingsval !=null && search_settingsval.search != null \">\r\n                    <mat-form-field class=\"filterForAuto searchdiv\" *ngFor=\"let item of search_settingsval.search\">\r\n\r\n\r\n                        <mat-chip-list #chipList aria-label=\"Fruit selection\">\r\n                            <mat-chip *ngFor=\"let v of autosearch[item.field]; let i=index;\" [selectable]=\"true\"\r\n                                [removable]=\"true\" (removed)=\"remove(v,i,item.field)\">\r\n                                {{v.name}}\r\n                                <mat-icon matChipRemove>cancel</mat-icon>\r\n                            </mat-chip>\r\n                            <input id=\"autocompletesearch{{item.field}}\" placeholder=\"{{item.label}} \"\r\n                                [matAutocomplete]=\"auto\" [matChipInputFor]=\"chipList\"\r\n                                [(ngModel)]=\"autosearchinput[item.field]\" (blur)=\"resetautocomp(item)\"\r\n                                (keyup)=\"autocompletechangedetected(item);\">\r\n                        </mat-chip-list>\r\n\r\n                        <!--[matChipInputSeparatorKeyCodes]=\"[ENTER, COMMA]\"-->\r\n                        <!--(matChipInputTokenEnd)=\"addautosearchdata($event)\"-->\r\n\r\n\r\n                        <!--<input class=\"filterForAutoInput\"  type=\"text\" placeholder=\"{{item.label}}\" matInput [(ngModel)]=\"autosearch[item.field]\" [matAutocomplete]=\"auto\">-->\r\n                        <mat-autocomplete #auto=\"matAutocomplete\">\r\n                            <!--<mat-option *ngFor=\"let option of item.values | async\" [value]=\"option[item.field]\" (click)=\"autosearchfunction(item.field)\">\r\n                                {{option[item.field]}}\r\n                            </mat-option>-->\r\n\r\n                            <mat-option *ngFor=\"let statusval of currentautosearcharr\" [value]=\"statusval.val\"\r\n                                (click)=\"autosearchfunction(item.field,statusval,item)\">\r\n                                {{statusval.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n\r\n\r\n\r\n                <!--      <span *ngIf=\"search_settingsval !=null && search_settingsval != null \">\r\n    \r\n          <mat-form-field *ngFor=\"let item of search_settingsval.search\">\r\n            <mat-label>{{item.label}}</mat-label>\r\n            <mat-select>\r\n              <mat-option *ngFor=\"let status of preresult\" [value]=\"status\" (click)=\"autosearchfunction(status.email)\">\r\n                {{status.email}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n    \r\n          </span>-->\r\n                <!--  <ng-container  *ngIf=\"search_settingsval !=null && search_settingsval.textsearch != null \">\r\n    &lt;!&ndash;        <span *ngFor=\"let status of this.search_settingsval.textsearch\">&ndash;&gt;\r\n    &lt;!&ndash;        <mat-form-field *ngFor=\"let statusval of status.value\">&ndash;&gt;\r\n            <mat-form-field *ngFor=\"let status of this.search_settingsval.textsearch\">\r\n                  <input matInput (keyup)=\"applyFilter1($event.target.value, status)\" placeholder=\"{{status.label}}\">\r\n            </mat-form-field>\r\n    &lt;!&ndash;              </span>&ndash;&gt;\r\n          </ng-container>-->\r\n\r\n\r\n                <ng-container class=\"filterForTexticon\"\r\n                    *ngIf=\"search_settingsval !=null && search_settingsval.selectsearch != null \">\r\n                    <!-- <span>dddddd</span> -->\r\n                    <mat-form-field class=\"searchdiv\" *ngFor=\"let status of search_settingsval.selectsearch\">\r\n                        <mat-label>{{status.label}}</mat-label>\r\n                        <!-- <mat-select [(ngModel)]=\"selectsearch[status.field]\" [(value)]=\"selectsearch[status.field]\"> -->\r\n                        <mat-select [(ngModel)]=\"selectsearch[status.field]\" [(value)]=\"status.value\"\r\n                            [(ngModel)]='tsearch[status.field]'>\r\n                            <mat-option *ngFor=\"let statusval of status.values\" [value]=\"statusval.val\"\r\n                                (click)=\"selectSearch(statusval.val, status,statusval)\">\r\n                                {{statusval.name}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n\r\n\r\n                <ng-container *ngIf=\" search_settingsval != null && search_settingsval.datesearch != null \">\r\n                    <!-- <span>D search !!</span> -->\r\n                    <ng-container class=\"filterFordatesearch\" *ngFor=\"let status of this.search_settingsval.datesearch\">\r\n\r\n                        <mat-form-field class=\"filterFordatesearchformfield searchdiv\">\r\n                            <input class=\"filterFordatesearchinput\" matInput [matDatepicker]=\"picker\" autocomplete=\"off\"\r\n                                placeholder=\"{{status.startdatelabel}}\" [(ngModel)]=\"start_date\"\r\n                                (dateChange)=\"dateSearch(status.field,status)\">\r\n                            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field class=\"filterFordatesearchend\">\r\n                            <input class=\"filterFordatesearchinput\" matInput [matDatepicker]=\"picker1\"\r\n                                autocomplete=\"off\" placeholder=\"{{status.enddatelabel}}\" [(ngModel)]=\"end_date\"\r\n                                (dateChange)=\"dateSearch(status.field,status)\">\r\n                            <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                        </mat-form-field>\r\n\r\n                        <!-- <span class=\"search_class\">\r\n                            <button mat-raised-button color=\"primary\" class=\"add_button\"\r\n                                (click)=\"dateSearch(status.field)\">{{status.submit}}</button>\r\n                        </span> -->\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n\r\n                <!-- <br><br> <br><br> -->\r\n\r\n                <div class=\"searchbtncls\">\r\n                    <!-- use for refresh all data -->\r\n                    <span class=\"search_class\">\r\n                        <ng-container class=\"refresh\">\r\n                            <i (click)=\"refreshdata()\" class=\"material-icons cursor\" matTooltip=\"refresh\">\r\n                                autorenew\r\n                            </i>\r\n                        </ng-container>\r\n                        <!-- *ngIf=\"date_search_endpointval ==null || date_search_sourceval == null || search_settingsval.datesearch == null \" -->\r\n                        <ng-container class=\"refresh\">\r\n                            <button mat-raised-button color=\"primary\" class=\"add_button\" (click)=\"allSearch()\"\r\n                                matTooltip=\"search\">Search</button>\r\n                        </ng-container>\r\n\r\n                        <br>\r\n                    </span>\r\n                </div>\r\n\r\n\r\n                <!--custom buttons -->\r\n                <div class=\"CustomButtonListen_div\">\r\n                    <ng-container *ngIf=\"customButtonFlagVal?.flag == true  && customButtonFlagVal?.tooltipflag != true\"\r\n                        class=\"filterForTexticon\">\r\n                        <ng-container *ngFor=\"let bt of customButtonFlagVal.buttons;let i = index\"\r\n                            class=\"add_custom_button\">\r\n                            <button mat-raised-button color=\"primary\" type=\"button\" color=\"primary\" class=\"add_button\"\r\n                                (click)=\"CustomButtonListen(bt)\">\r\n                                {{bt.label}}</button> &nbsp;\r\n                        </ng-container>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"customButtonFlagVal?.flag == true && customButtonFlagVal?.tooltipflag == true\"\r\n                        class=\"filterForTexticon\">\r\n                        <ng-container *ngFor=\"let bt of customButtonFlagVal.buttons;let i = index\"\r\n                            class=\"add_custom_button\">\r\n                            <button matTooltip=\"{{bt.tooltip}}\" mat-raised-button color=\"primary\" type=\"button\"\r\n                                color=\"primary\" class=\"add_button\" (click)=\"CustomButtonListen(bt)\">\r\n                                {{bt.label}}</button> &nbsp;\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                <!-- for button search  -->\r\n                <div class=\"buttonsearch_div\">\r\n                    <ng-container class=\"filterForTexticon\"\r\n                        *ngIf=\" search_settingsval != null && search_settingsval.buttonsearch != null \">\r\n                        <ng-container *ngFor=\"let button of search_settingsval.buttonsearch;let i= index\">\r\n\r\n                            <button mat-raised-button color=\"primary\" class=\"add_button search_btn_class{{i}}\"\r\n                                (click)=\"openBottomSheetForSearch(button,i)\">{{button.label}}\r\n                            </button>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n\r\n                <!-- *ngIf=\" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || buttonSearchData[i].value != null \" -->\r\n\r\n\r\n                <!-- buttonvSearch Data div -->\r\n                <div class=\"buttonSearchDatacls_div\">\r\n                    <ng-container class=\"buttonSearchDatacls\"\r\n                        *ngIf=\"buttonSearchData != null && buttonSearchData.length >0\">\r\n                        <!-- <span>{{buttonSearchData | json}}</span> -->\r\n                        <div *ngFor=\"let bs of buttonSearchData;let i =index\">\r\n                            <div *ngIf=\"bs.field == search_settingsval.buttonsearch[bs.key].field\">\r\n\r\n                                <h3 class=\"search_settingsval_bs_cls\"\r\n                                    *ngIf=\" (search_settingsval.buttonsearch[bs.key].values != null && search_settingsval.buttonsearch[bs.key].values.length > 0) || (bs.field == search_settingsval.buttonsearch[bs.key].field && bs.value.length > 0)\">\r\n                                    {{search_settingsval.buttonsearch[bs.key].label}} :</h3>\r\n\r\n                                <mat-chip-list class=\"example-chip\" cdkDropList cdkDropListOrientation=\"horizontal\">\r\n                                    <mat-chip class=\"example-box\" cdkDrag *ngFor=\"let item of bs.value;let j = index\">\r\n                                        {{item.name}}\r\n                                        <mat-icon style=\"cursor: pointer;\" matChipRemove\r\n                                            (click)=\"clearButtonSearchChips(bs,i,item,j)\">cancel</mat-icon>\r\n                                    </mat-chip>\r\n                                </mat-chip-list>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n                <br />\r\n\r\n                <span *ngIf=\"click_to_add_ananother_pageval !=null\">\r\n                    <button mat-raised-button color=\"primary\" class=\"add_button\"\r\n                        [routerLink]=\"click_to_add_ananother_pageval\">Add</button>\r\n                </span>\r\n            </mat-toolbar-row>\r\n        </div>\r\n\r\n        <div class=\"recordflagcls\" *ngIf=\"recordFoundFlag == true && libdataval.recordfounddata != null\">\r\n            <div class=\"recorddatacls\" [innerHTML]=\"libdataval?.recordfounddata\"></div>\r\n        </div>\r\n\r\n\r\n\r\n        <ng-container\r\n            *ngIf=\"selection.selected !=null && selection.selected.length!=null && selection.selected.length>0\">\r\n            <span class=\"multipledeleteandupdatebuttan\">\r\n\r\n                <button *ngIf=\"libdataval.hidedeletemany==null || libdataval.hidedeletemany==false\" mat-raised-button\r\n                    (click)=\"deletemultiple()\"> Delete </button>\r\n                <button *ngIf=\"libdataval.hideupdatemany==null || libdataval.hideupdatemany==false\" mat-raised-button\r\n                    (click)=\"managestatusmultiple()\"> Update Status </button>\r\n                <ng-container\r\n                    *ngIf=\"libdataval!=null && libdataval.customselectbuttons!=null && libdataval.customselectbuttons.length>0\">\r\n                    <!-- has hhh  -->\r\n                    <ng-container *ngFor=\"let cbtns of libdataval.customselectbuttons\">\r\n\r\n                        <button class=\"customselbtn\" mat-raised-button (click)=\"clickmultipleselectoption(cbtns)\">\r\n                            {{cbtns.label}} </button>\r\n                    </ng-container>\r\n\r\n                </ng-container>\r\n\r\n            </span>\r\n        </ng-container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <section *ngIf=\"loading == true\" class=\"example-section\">\r\n            <mat-progress-bar class=\"example-margin\" [color]=\"color\" [mode]=\"mode\" [value]=\"value\"\r\n                [bufferValue]=\"bufferValue\">\r\n            </mat-progress-bar>\r\n            <br />\r\n            <br />\r\n        </section>\r\n\r\n\r\n        <ng-container *ngIf=\"tableflag==0\">\r\n            <section class=\"lib-pager-class\">\r\n                <mat-label>\r\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\r\n\r\n                    <ng-container\r\n                        *ngIf=\"date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) || date_search_source_countval==0\">\r\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\r\n                    </ng-container>\r\n                    <ng-container\r\n                        *ngIf=\"date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)\">\r\n                        {{date_search_source_countval}}\r\n                    </ng-container>\r\n\r\n\r\n\r\n                    of\r\n                    <span *ngIf=\"date_search_source_countval!=0 \"> {{date_search_source_countval}} </span>\r\n                    <span *ngIf=\"date_search_source_countval==0 \"> Many </span>\r\n\r\n                </mat-label>\r\n                <span class=\"pageformfield\">\r\n                    <mat-form-field>\r\n                        <mat-label>Page Size</mat-label>\r\n                        <input matInput [(ngModel)]=\"limitcondval.limit\" type=\"number\" max=\"100\" (keyup)=\"paging(10,'')\">\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Page No</mat-label>\r\n                        <input matInput [(ngModel)]=\"limitcondval.pagecount\" type=\"number\" (keyup)=\"paging(10,'')\">\r\n                    </mat-form-field>\r\n                </span>\r\n                <span>\r\n\r\n\r\n                    <span class=\"material-icons cursor\" (click)=\"paging(-1,'')\">\r\n                        skip_previous\r\n                    </span>\r\n\r\n                    <span class=\"material-icons cursor\" (click)=\"paging(1,'')\">\r\n                        skip_next\r\n                    </span>\r\n                </span>\r\n\r\n                <!-- for pagination in drop down format-->\r\n                <div class=\"selectpaginationCls\" *ngIf=\"libdataval.selectPagingflag\">\r\n                    <mat-label>Show Records per Page</mat-label>\r\n                    <mat-select (selectionChange)=\"paging($event.value,'selectpaging')\" [(ngModel)]=\"limitcondval.limit\">\r\n                        <mat-option *ngFor=\"let no of pages\" [value]=\"no.val\">\r\n                            {{no.name}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </div>\r\n                \r\n            </section>\r\n        </ng-container>\r\n        <!-- <div>{{rescount}} d lemgth </div> -->\r\n\r\n        <div class=\"tablewrapper\" *ngIf=\"tableflag==0\">\r\n\r\n            <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n                <!-- <ng-container matColumnDef=\"select\" *ngIf=\"tableflag==0\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\" [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n                        </mat-checkbox>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" data-label=\"select\">\r\n                        <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\">\r\n                        </mat-checkbox>\r\n                    </td>\r\n                </ng-container> -->\r\n                <!-- <ng-container matColumnDef=\"#\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        #\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element; let i = index\">{{limitcondval.skip+(i+1)}}</td>\r\n                </ng-container> -->\r\n                <!-- footer loop  -->\r\n                <ng-container *ngFor=\"let footer of libdataval.footersettings\">\r\n                    <ng-container matColumnDef=\"{{footer.key}}\">\r\n                        <td mat-footer-cell *matFooterCellDef [attr.colspan]=\"footer.colspan\">\r\n                            <span [innerHtml]=\"footer.data\"></span>\r\n                        </td>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n\r\n                <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\r\n                    <ng-container *ngIf=\"column.columnDef== 'select' \">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                                [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n                            </mat-checkbox>\r\n                        </th>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"column.columnDef != 'select' \">\r\n                        <th mat-header-cell *matHeaderCellDef class=\"th-header-center\">\r\n                            <span>\r\n\r\n                                <span *ngIf=\"libdataval.header_tooltip_array == null\">\r\n                                    <span [innerHtml]=\"column.header\"></span>\r\n                                </span>\r\n\r\n                                <span *ngIf=\"libdataval.header_tooltip_array != null\">\r\n                                    <span [innerHtml]=\"column.header\" matTooltip=\"{{column?.tooltip}}\"></span>\r\n                                </span>\r\n\r\n\r\n                                <!-- {{column.header}} -->\r\n                                <span *ngIf=\"column.columnDef==sortdataval.field && sortdataval.type=='desc'\"\r\n                                    class=\"material-icons cursor float-right\"\r\n                                    (click)=\"sorttable(column.columnDef,'asc')\">\r\n                                    arrow_downward\r\n                                </span>\r\n                                <span class=\"material-icons cursor float-right\"\r\n                                    *ngIf=\"column.columnDef==sortdataval.field && sortdataval.type=='asc'\"\r\n                                    (click)=\"sorttable(column.columnDef,'desc')\">arrow_upward\r\n                                </span>\r\n\r\n                                <span class=\"material-icons cursor\"\r\n                                    *ngIf=\"sortdataval!=null && sortdataval.options !=null && sortdataval.options.indexOf(column.columnDef) >-1  && column.columnDef!=sortdataval.field\"\r\n                                    (click)=\"sorttable(column.columnDef,'desc')\">\r\n                                    unfold_more\r\n                                </span>\r\n                            </span>\r\n                        </th>\r\n                    </ng-container>\r\n\r\n                    <ng-container\r\n                        *ngIf=\"column.columnDef!= '#' && column.columnDef!= 'Actions' && column.columnDef!= 'select'  \">\r\n                        <td mat-cell *matCellDef=\"let row \" [ngStyle]=\"styleCell(column,row) \"\r\n                            data-title=\"{{column.header.split('<br/>').join('')}}  \" class=\"td-cell-center \">\r\n\r\n                            <span *ngIf=\"column.columnDef=='status' \">{{ getstatus([column.cell(row)]) }}\r\n                                {{pdfFlag(row)}}</span>\r\n                            <span\r\n                                *ngIf=\"column.columnDef!='status' && column.columnDef!='image' && column.columnDef!='video' \">\r\n\r\n                                <ng-container\r\n                                    *ngIf=\"column!=null && row[column.columnDef]!=null && !column.columnDef.includes( 'date') && !column.columnDef.includes( 'datetime') \">\r\n\r\n                                    <!-- <span>=++++{{row[column.columnDef] |json}} = {{column.columnDef}}</span><br> -->\r\n\r\n                                    <span\r\n                                        [innerHTML]=\"row[column.columnDef] | CustomPipe: column.columnDef:row[column.columnDef]\"></span>\r\n\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"column!=null && row[column.columnDef]!=null && column.columnDef.includes( 'date') && !column.columnDef.includes( 'datetime') && (row[column.columnDef] !=0 && row[column.columnDef] !='na' && row[column.columnDef]\r\n                        !='NA' ) \">\r\n                                    {{row[column.columnDef] | date}}\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"column!=null && row[column.columnDef]!=null && column.columnDef.includes( 'date') && column.columnDef.includes( 'datetime') && (row[column.columnDef] !=0 && row[column.columnDef] !='na' && row[column.columnDef] !='NA'\r\n                        ) \">\r\n                                    {{row[column.columnDef] | date:'medium'}}\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"column!=null && row[column.columnDef]!=null && (column.columnDef.includes( 'date') || column.columnDef.includes( 'datetime') )&& (row[column.columnDef]==0 || row[column.columnDef]=='na' || row[column.columnDef]=='NA'\r\n                        ) \">\r\n                                    NA\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"column!=null && row[column.columnDef]==null \">\r\n                                    NA\r\n                                </ng-container>\r\n\r\n                            </span>\r\n                            <!-- for image view  -->\r\n                            <span\r\n                                *ngIf=\"column.columnDef=='image' && row[column.columnDef] !=null && row[column.columnDef] !='' \"\r\n                                (click)=\"img_modal_view(row[column.columnDef]) \"> <span class=\"module_imgblock \">\r\n                                    <img src=\"{{row[column.columnDef]}} \" alt=\"{{row[column.columnDef]}} \">\r\n                                </span></span>\r\n                            <!-- for video view -->\r\n                            <span\r\n                                *ngIf=\"column.columnDef=='video' && row[column.columnDef] !=null && row[column.columnDef] !='' \"><span\r\n                                    class=\"module_videoblock \" (click)=\"fetchvideo(row) \">\r\n                                    <img class=\"videothumbnailcls\"\r\n                                        src='https://awsbackend-dev-patient-files-test.s3.amazonaws.com/icon-videoplay.png'>\r\n                                    <img class=\"videovicls\"\r\n                                        src=\"https://img.youtube.com/vi/{{row[column.columnDef]}}/sddefault.jpg \"\r\n                                        alt=\"{{row[column.columnDef]}} \" (click)=\"fetchvideo(row) \"></span>\r\n                            </span>\r\n\r\n                            <span\r\n                                *ngIf=\"column.columnDef=='grab_url && grab_linkval!=null && grab_linkval[0]!=null' \">{{grapurl(row[this.grab_linkval[0].field_name])}}</span>\r\n\r\n\r\n                            <!--          <span *ngIf=\"sh==true \">-->\r\n                            <span *ngIf=\"column.columnDef=='contractssigned' && sh==true && urlval !=null \"\r\n                                class=\"cursor \">\r\n                                <i title=\"{{urlval[0].label}} \" (click)=\"clickurl(row,urlval[0].url) \"\r\n                                    class=\"material-icons \">cloud_download</i>\r\n                            </span>\r\n                            <!--          </span>-->\r\n                            <!--          <span *ngIf=\"aud==true \">-->\r\n                            <span *ngIf=\"column.columnDef=='contractssigned' && aud==true && urlval !=null \">\r\n                                <i title=\"{{urlval[1].label}} \" (click)=\"clickurl(row,urlval[1].url) \"\r\n                                    class=\"material-icons \">cloud_download</i>\r\n                            </span>\r\n\r\n                            <!--// for grap url//-->\r\n\r\n                            <span\r\n                                *ngIf=\" grab_linkval!=null && column.columnDef==[grab_linkval.colom_name[0].col_name] \"\r\n                                class=\"cursor \">\r\n                                <ng-container *ngFor=\"let item of grab_linkval.field \">\r\n                                    <!-- <p>{{item | json}}</p> -->\r\n                                    <button mat-button\r\n                                        (click)=\"copyText(row[grab_linkval.colom_name[0].field_name],item.url) \">{{item.label}}</button>\r\n                                </ng-container>\r\n                            </span>\r\n\r\n                            <!-- <span\r\n                            *ngIf=\" grab_linkval!=null && grab_linkval[0]!=null && column.columnDef==[grab_linkval[0].col_name] \"\r\n                            class=\"cursor \">\r\n                            <button mat-button\r\n                                (click)=\"copyText(row[grab_linkval[0].field_name],grab_linkval[1].url) \">{{grab_linkval[1].label}}</button>\r\n                        </span>\r\n                        <span\r\n                            *ngIf=\"grab_linkval!=null && grab_linkval[0]!=null &&column.columnDef==[ grab_linkval[0].col_name] \">\r\n                            <button mat-button\r\n                                (click)=\"copyText(row[grab_linkval[0].field_name],grab_linkval[2].url) \">{{grab_linkval[2].label}}</button>\r\n                        </span> -->\r\n\r\n                            <!--          //grap url end//-->\r\n\r\n\r\n                            <!--          </span>-->\r\n                            <!-- <span *ngIf=\"column.columnDef=='contractssigned' \">\r\n            <span *ngFor=\"let item of urlval \" class=\"cursor \">\r\n            <i title=\"{{item.label}} \" (click)=\"clickurl(row,item.url) \" class=\"material-icons \">cloud_download</i>\r\n          </span>\r\n          </span>-->\r\n                        </td>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"column.columnDef== '#' \">\r\n                        <td mat-cell *matCellDef=\"let element; let i=index \">{{limitcondval.skip+(i+1)}}\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"column.columnDef== 'select' \">\r\n                        <td mat-cell *matCellDef=\"let row\" data-label=\"select\">\r\n                            <mat-checkbox (click)=\"$event.stopPropagation();checkedlist()\"\r\n                                (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\">\r\n                            </mat-checkbox>\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"column.columnDef== 'Actions' \">\r\n                        <td mat-cell *matCellDef=\"let row \" data-label=\"Actions \" class=\"td-cell-center \">\r\n\r\n                            <div class=\"button_div_custom_cls\">\r\n\r\n                                <!-- loader -->\r\n\r\n                                <section class=\"example-section example-section-button-1 \">\r\n                                    <mat-progress-bar *ngIf=\"loaderrow!=null && loaderrow==row._id \"\r\n                                        class=\"example-margin \" [color]=\"color \" [mode]=\"mode \" [value]=\"value \"\r\n                                        [bufferValue]=\"bufferValue \">\r\n                                    </mat-progress-bar>\r\n                                </section>\r\n\r\n                                <!-- note block -->\r\n                                <ng-container *ngIf=\"libdataval.notes!=null \">\r\n                                    <button mat-raised-button color=\"primary\" class=\"notebtncls\" matBadgeColor=\"warn\"\r\n                                        matBadge=\"{{row.notescount}}\" matTooltip=\"{{libdataval?.notes?.tooltip}}\"\r\n                                        (click)=\"opennotes(row) \">\r\n                                        <span class=\"notelabelc\"> {{libdataval.notes.label}}</span>\r\n                                        <!-- <span class=\"notebracket1\">(</span> -->\r\n                                        <!-- <span class=\"notecountc\"  matBadgeColor=\"warn\" matBadge=\"{{row.notescount}}\"></span> -->\r\n                                        <!-- <span class=\"notebracket2\">)</span> -->\r\n                                    </button>\r\n                                </ng-container>\r\n\r\n                                <!--custom buttions block -->\r\n\r\n                                <ng-container\r\n                                    *ngIf=\"libdataval !=null && libdataval.custombuttons !=null && libdataval.custombuttons.length>0 \">\r\n                                    <ng-container *ngFor=\"let custombutton of libdataval.custombuttons; let cb=index\">\r\n                                        <section class=\"custombutton{{cb}} {{custombutton?.classname}}\">\r\n                                            <ng-container\r\n                                                *ngIf=\"custombutton.type=='listner' && (custombutton.cond==null  || (row[custombutton.cond]==custombutton.condval) ) \">\r\n                                                <!-- ss {{row['status']}} -->\r\n                                                <button mat-raised-button color=\"primary\"\r\n                                                    matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                    (click)=\"custombuttonlistner(row,custombutton)\">{{custombutton.label}}</button>\r\n                                            </ng-container>\r\n\r\n                                            <ng-container *ngIf=\"custombutton.type=='externallink'\">\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n                                                    <a target=\"_blank\" href=\"{{custombutton.link}}\">\r\n                                                        <button mat-raised-button matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                            color=\"primary\">{{custombutton.label}}</button>\r\n                                                    </a>\r\n                                                </ng-container>\r\n\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                        (click)=\"openextlinkwithparam(custombutton,row)\">{{custombutton.label}}</button>\r\n\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n                                            <ng-container *ngIf=\"custombutton.type=='internallink'\">\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.toggle == null && custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                        (click)=\"openinternallink(custombutton)\">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.toggle != null && custombutton.toggle == 'delete' && custombutton.toggle!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        (click)=\"deletedata(row)\">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                        (click)=\"openinternallinkwithparam(custombutton,row)\">{{custombutton.label}}</button>\r\n\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n                                            <ng-container *ngIf=\"custombutton.type=='action'\">\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.datatype=='local' && custombutton != null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                        (click)=\"opencustombuttonactionlocaldata(custombutton,row)\">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n                                                <ng-container\r\n                                                    *ngIf=\"custombutton.datatype=='api' && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )\">\r\n                                                    <button mat-raised-button color=\"primary\"\r\n                                                        matTooltip=\"{{custombutton?.tooltip}}\"\r\n                                                        (click)=\"opencustombuttonactionapidata(custombutton,row)\">{{custombutton.label}}</button>\r\n                                                </ng-container>\r\n\r\n                                            </ng-container>\r\n\r\n                                        </section>\r\n\r\n                                    </ng-container>\r\n                                </ng-container>\r\n                            </div>\r\n\r\n\r\n\r\n                            <span *ngIf=\"selection.selected.length==null || selection.selected.length==0\">\r\n                                <span *ngIf=\"libdataval.hideeditbutton==null || libdataval.hideeditbutton==false\"\r\n                                    class=\"cursor\" (click)=\"editdata(row)\">\r\n                                    <i class=\"material-icons\" matTooltip=\"Edit\">\r\n                                        edit\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <!--For modern browsers-->\r\n                                <span *ngIf=\"libdataval.hidedeletebutton==null || libdataval.hidedeletebutton==false\"\r\n                                    class=\"cursor\" (click)=\"deletedata(row)\">\r\n                                    <i class=\"material-icons\" matTooltip=\"Delete\">\r\n                                        delete_outline\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <!--For modern browsers-->\r\n                                <span *ngIf=\"libdataval.hideviewbutton==null || libdataval.hideviewbutton==false\"\r\n                                    class=\"cursor\" (click)=\"viewdata(row)\">\r\n                                    <i class=\"material-icons\" matTooltip=\"Preview\">\r\n                                        remove_red_eye\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <!--For modern browsers-->\r\n                                <span class=\"cursor\"\r\n                                    *ngIf=\"libdataval.hidestatustogglebutton==null || libdataval.hidestatustogglebutton==false\"\r\n                                    (click)=\"managestatus(row)\">\r\n                                    <i class=\"material-icons\" matTooltip=\"Change Status\">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <span *ngIf=\"custombuttonval!=null\" class=\"cursor treeclass\"\r\n                                    (click)=\"custombuttonfunc(row)\">\r\n                                    <i class=\"material-icons treeclass\" matTooltip=\"Change Status\">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <!-- hide status toggle with cond-->\r\n                                <span *ngIf=\"libdataval?.hidestatustoggle !=null &&libdataval?.hidestatustoggle?.flag != null && libdataval?.hidestatustoggle?.flag==true \r\n                                    && (row[libdataval.hidestatustoggle.cond] == libdataval.hidestatustoggle.condval )\"\r\n                                    class=\"cursor treeclass\" (click)=\"managestatus(row)\">\r\n                                    <i class=\"material-icons treeclass\"\r\n                                        matTooltip=\"{{libdataval?.hidestatustoggle?.tooltip}}\">\r\n                                        toggle_off\r\n                                    </i>\r\n                                </span>\r\n\r\n                                <!-- artistxp preview start -->\r\n                                <span *ngIf=\"previewFlug==true\" class=\"cursor treeclass\" (click)=\"artistxpPreview(row)\">\r\n                                    <i class=\"material-icons\">perm_media</i>\r\n                                </span>\r\n                                <!-- artistxp preview end -->\r\n\r\n                            </span>\r\n\r\n                        </td>\r\n                    </ng-container>\r\n\r\n\r\n\r\n\r\n                </ng-container>\r\n\r\n\r\n\r\n\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <tr mat-footer-row *matFooterRowDef=\"tableFooterColumns\" colspan=\"2\"></tr>\r\n\r\n            </table>\r\n\r\n        </div>\r\n\r\n        <!--for pagination -->\r\n        <!-- <div>*ngIf=\"tableflag!=0\"</div>\r\n        <div *ngIf=\"tableflag!=0\"> jio </div> -->\r\n\r\n        <mat-card *ngIf=\"tableflag!=0\" class=\"noFoundText\">\r\n            <div class=\"noFoundTextinner\">\r\n                <span>Oops !</span>\r\n                <p>NO Record Found</p>\r\n            </div>\r\n        </mat-card>\r\n        <!-- no record found block  -->\r\n        <ng-container *ngIf=\"tableflag==0\">\r\n            <section class=\"lib-pager-class\">\r\n                <mat-label>\r\n                    Showing {{((limitcondval.pagecount-1)*limitcondval.limit)+1}} To\r\n\r\n                    <ng-container\r\n                        *ngIf=\"date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit) ||  date_search_source_countval==0\">\r\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\r\n                    </ng-container>\r\n                    <ng-container\r\n                        *ngIf=\"date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)\">\r\n                        {{date_search_source_countval}}\r\n                    </ng-container>\r\n\r\n\r\n\r\n                    of\r\n                    <span *ngIf=\"date_search_source_countval!=0 \"> {{date_search_source_countval}} </span>\r\n                    <span *ngIf=\"date_search_source_countval==0 \"> Many </span>\r\n\r\n                </mat-label>\r\n                <span class=\"pageformfield\">\r\n                    <mat-form-field>\r\n                        <mat-label>Page Size</mat-label>\r\n                        <input matInput [(ngModel)]=\"limitcondval.limit\" type=\"number\" max=\"100\" (keyup)=\"paging(10,'')\">\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Page No</mat-label>\r\n                        <input matInput [(ngModel)]=\"limitcondval.pagecount\" type=\"number\" (keyup)=\"paging(10,'')\">\r\n                    </mat-form-field>\r\n                </span>\r\n                <span>\r\n\r\n\r\n                    <span class=\"material-icons cursor\" (click)=\"paging(-1,'')\">\r\n                        skip_previous\r\n                    </span>\r\n\r\n                    <span class=\"material-icons cursor\" (click)=\"paging(1,'')\">\r\n                        skip_next\r\n                    </span>\r\n                </span>\r\n                <!-- for pagination in drop down format-->\r\n                <div class=\"selectpaginationCls\" *ngIf=\"libdataval.selectPagingflag\">\r\n                    <mat-label>Show Records per Page</mat-label>\r\n                    <mat-select (selectionChange)=\"paging($event.value,'selectpaging')\" [(ngModel)]=\"limitcondval.limit\">\r\n                        <mat-option *ngFor=\"let no of pages\" [value]=\"no.val\">\r\n                            {{no.name}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </div>\r\n            </section>\r\n\r\n\r\n        </ng-container>\r\n        <section *ngIf=\"loading == true\" class=\"example-section\">\r\n            <mat-progress-bar class=\"example-margin\" [color]=\"color\" [mode]=\"mode\" [value]=\"value\"\r\n                [bufferValue]=\"bufferValue\">\r\n            </mat-progress-bar>\r\n            <br />\r\n            <br />\r\n        </section>\r\n\r\n\r\n\r\n        <!-- <mat-paginator class=\"paginator\" [pageSizeOptions]=\"[5,10, 20, 50,100]\" showFirstLastButtons></mat-paginator>-->\r\n        <!--<mat-spinner *ngIf=\"loading == true\" ></mat-spinner>-->\r\n\r\n\r\n\r\n        <!-- <form [formGroup]=\"stateForm\">\r\n      <mat-form-field>\r\n        <input type=\"text\" matInput placeholder=\"States Group\" formControlName=\"stateGroup\" required [matAutocomplete]=\"autoGroup\">\r\n        <mat-autocomplete #autoGroup=\"matAutocomplete\">\r\n          <mat-optgroup *ngFor=\"let group of stateGroupOptions | async\" [label]=\"group.letter\">\r\n            <mat-option *ngFor=\"let name of group.names\" [value]=\"name\">\r\n              {{name}}\r\n            </mat-option>\r\n          </mat-optgroup>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </form>-->\r\n\r\n        <!--<form class=\"example-form\">\r\n      <mat-form-field class=\"example-full-width\">\r\n        <input type=\"text\" placeholder=\"Select state\" aria-label=\"Number\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\r\n        <mat-autocomplete #auto=\"matAutocomplete\">\r\n          <mat-option *ngFor=\"let option of stateGroup | async\" [value]=\"option\">\r\n            {{option}}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </form>\r\n-->\r\n\r\n    </mat-card>\r\n\r\n    <!--\r\n  <mat-card>\r\n\r\n    <div class=\"example-container\">\r\n\r\n\r\n      <mat-card-content >\r\n        <mat-form-field class=\"form-group\">\r\n            <input (blur)=\"inputblur('email')\" matInput placeholder=\"email\" type=\"email\" [formControl]=\"myForm.controls['email']\" >\r\n            <mat-error  *ngIf=\"!myForm.controls['email'].valid && myForm.controls['email'].touched && issubmit==1\">email field can not be blank</mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"form-group\">\r\n            <input (blur)=\"inputblur('password')\" matInput placeholder=\"Password\" type=\"password\" [formControl]=\"myForm.controls['password']\" >\r\n            <mat-error  *ngIf=\"!myForm.controls['password'].valid && myForm.controls['password'].touched && issubmit==1\">Password field can not be blank</mat-error>\r\n        </mat-form-field>\r\n\r\n            <button mat-button  (click)=\"onSubmit()\" class=\"s_getmyoffer_login_button\"  >Login</button>\r\n        </mat-card-content>\r\n\r\n\r\n    </div>\r\n\r\n  </mat-card>-->\r\n\r\n\r\n\r\n</div>","styles":[".container{background:#fff}.lib-pager-class{display:block;clear:both;float:right}body{font-family:Roboto,Arial,sans-serif;margin:0;display:none!important}.clear{clear:both;display:block}.float-right{float:right;display:inline;clear:none}.pad-gap{margin-left:18px}.basic-container{padding:30px}.version-info{font-size:8pt;float:right}table{width:100%;color:red}th.mat-sort-header-sorted{color:#000}.cursor{cursor:pointer!important}.custom-modalbox{display:none}.module_imgblock{display:block;width:100px;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_imgblock img{width:100%;height:auto}.module_videoblock{display:block;width:100px;position:relative;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_videoblock img{width:100%;height:auto}.module_videoblock::after{content:'';display:block;width:30%;height:38%;background:url(image/video-play-arrow-png.png) 0 0/cover no-repeat;position:absolute;left:31%;top:30%}.tablewrapper tr td,.tablewrapper tr th{padding:5px}.close-btn-modal{float:right!important}.videothumbnailcls{height:50px;width:50px}.container .searchiconcls{height:55px;width:99%;background:#f5f5f5;padding:6px;margin:7px}.searchiconcls .iconcls{cursor:pointer;font-size:53px}.CustomButtonListen_div{padding:10px}.buttonsearch_div button{float:none}.buttonSearchDatacls_div{padding:10px}.searchbtncls{text-align:right}.searchbtncls button{float:none}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}"]}]}],"members":{"onLiblistingChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":118,"character":3}}]}],"onLiblistingButtonChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":120,"character":3}}]}],"search_settings":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":126,"character":3}}]}],"click_to_add_ananother_page":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":140,"character":3}}]}],"limitcond":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":144,"character":3}}]}],"date_search_source_count":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":150,"character":3}}]}],"grab_link":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":157,"character":3}}]}],"custombutton":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":162,"character":3}}]}],"date_search_source":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":167,"character":3}}]}],"sortdata":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":171,"character":3}}]}],"date_search_endpoint":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":177,"character":3}}]}],"url":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":181,"character":3}}]}],"searchendpoint":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":185,"character":3}}]}],"pdf_link":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":189,"character":3}}]}],"searchList":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":193,"character":3}}]}],"libdata":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":197,"character":3}}]}],"datasource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":230,"character":3}}]}],"datacollection":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":235,"character":3}}]}],"skip":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":240,"character":3}}]}],"detail_datatype":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":244,"character":3}}]}],"detail_skip_array":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":248,"character":3}}]}],"sourcedata":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":253,"character":3}}]}],"modify_header_array":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":258,"character":3}}]}],"deleteendpoint":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":263,"character":3}}]}],"updateendpoint":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":268,"character":3}}]}],"apiurl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":272,"character":3}}]}],"updatetable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":277,"character":3}}]}],"jwttoken":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":283,"character":3}}]}],"statusarr":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":289,"character":3}}]}],"emailarray":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":294,"character":3}}]}],"editroute":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":299,"character":3}}]}],"preview_artistxp":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":306,"character":3}}]}],"customlistenbutton":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":312,"character":3}}]}],"sort":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":349,"character":3},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MatSort","line":349,"character":13}]}]}],"paginator":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":350,"character":3},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MatPaginator","line":350,"character":13}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","module":"@angular/material","name":"MatDialog","line":364,"character":61},{"__symbolic":"reference","module":"@angular/material","name":"MatBottomSheet","line":365,"character":24},{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":366,"character":15},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":367,"character":20},{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver","line":368,"character":22},{"__symbolic":"reference","module":"@angular/core","name":"ViewContainerRef","line":369,"character":23},{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":370,"character":18},{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer","line":371,"character":22},{"__symbolic":"reference","module":"@angular/material/snack-bar","name":"MatSnackBar","line":372,"character":23},{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":373,"character":25}]}],"ngOnChanges":[{"__symbolic":"method"}],"inputblur":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"CustomButtonListen":[{"__symbolic":"method"}],"img_modal_view":[{"__symbolic":"method"}],"ngAfterContentInit":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"SearchBarToggle":[{"__symbolic":"method"}],"upTo":[{"__symbolic":"method"}],"ngAfterContentChecked":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"clickmultipleselectoption":[{"__symbolic":"method"}],"onSubmit":[{"__symbolic":"method"}],"dateSearch":[{"__symbolic":"method"}],"selectSearch":[{"__symbolic":"method"}],"paging":[{"__symbolic":"method"}],"addautosearchdata":[{"__symbolic":"method"}],"remove":[{"__symbolic":"method"}],"autocompletechangedetected":[{"__symbolic":"method"}],"filterautoval":[{"__symbolic":"method"}],"resetautocomp":[{"__symbolic":"method"}],"autosearchfunction":[{"__symbolic":"method"}],"textsearchfunction":[{"__symbolic":"method"}],"refreshdata":[{"__symbolic":"method"}],"refreshalldata":[{"__symbolic":"method"}],"_filter":[{"__symbolic":"method"}],"getstatus":[{"__symbolic":"method"}],"pdfFlag":[{"__symbolic":"method"}],"grapurl":[{"__symbolic":"method"}],"copyText":[{"__symbolic":"method"}],"openinternallink":[{"__symbolic":"method"}],"openinternallinkwithparam":[{"__symbolic":"method"}],"opencustombuttonactionlocaldata":[{"__symbolic":"method"}],"opencustombuttonactionapidata":[{"__symbolic":"method"}],"openextlinkwithparam":[{"__symbolic":"method"}],"clickurl":[{"__symbolic":"method"}],"checkedlist":[{"__symbolic":"method"}],"isAllSelected":[{"__symbolic":"method"}],"masterToggle":[{"__symbolic":"method"}],"checkboxLabel":[{"__symbolic":"method"}],"createData":[{"__symbolic":"method"}],"applyFilter":[{"__symbolic":"method"}],"styleCell":[{"__symbolic":"method"}],"fetchvideo":[{"__symbolic":"method"}],"opennotes":[{"__symbolic":"method"}],"viewdata":[{"__symbolic":"method"}],"managestatus":[{"__symbolic":"method"}],"custombuttonlistner":[{"__symbolic":"method"}],"custombuttonfunc":[{"__symbolic":"method"}],"managestatusmultiple":[{"__symbolic":"method"}],"deletemultiple":[{"__symbolic":"method"}],"deletedata":[{"__symbolic":"method"}],"editdata":[{"__symbolic":"method"}],"sorttable":[{"__symbolic":"method"}],"allSearch":[{"__symbolic":"method"}],"gettypeof":[{"__symbolic":"method"}],"openBottomSheetForSearch":[{"__symbolic":"method"}],"clearButtonSearchChips":[{"__symbolic":"method"}],"artistxpPreview":[{"__symbolic":"method"}]}},"Confirmdialog":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2513,"character":1},"arguments":[{"selector":"confirmdialog","template":"<div class=\"maindialog maindialognew\">\r\n    <span (click)=\"onNoClick()\" style=\"float: right; cursor: pointer;\" class=\"close-btn-modal material-icons\">\r\n        close\r\n    </span>\r\n\r\n    <div class=\"dialoghead\" *ngIf=\"data.preview != true\">\r\n        <h1 mat-dialog-title *ngIf=\"data!=null && data.message!=null\">Hey !</h1>\r\n        <h1 mat-dialog-title *ngIf=\"data!=null && data.data!=null && data.data[0]==null\">Details </h1>\r\n        <h1 mat-dialog-title *ngIf=\"data!=null  && data.data!=null &&  data.data.message!=null\">{{data.data.message}}\r\n        </h1>\r\n        <h1 class=\"preview_{{data?.headerData?.class}}\" mat-dialog-title\r\n            *ngIf=\"data!=null && data.headerData != null && data.headerData.header != null\">\r\n            {{data?.headerData?.header}}\r\n        </h1>\r\n\r\n        <div mat-dialog-content>\r\n            <p *ngIf=\"data!=null && data.message!=null\">{{data.message}}</p>\r\n\r\n            <ng-container *ngIf=\"data.notes!=null && data.notes==true\">\r\n                <!-- <ng-container *ngFor=\"let note of data.listdata;\"> -->\r\n                <mat-list>\r\n                    <div mat-subheader>\r\n                        <ng-container *ngIf=\"data.notedata.header !=null && data.rowdata[data.notedata.header]!=null\">\r\n                            <span class=\"notesheader\">Notes for : {{data.rowdata[data.notedata.header]}} </span>\r\n                        </ng-container>\r\n                    </div>\r\n                    <!-- <section class=\"example-section\">\r\n                        <mat-progress-bar class=\"example-margin\" [color]=\"data.color\" [mode]=\"data.mode\"\r\n                            [value]=\"data.loadervalue\" [bufferValue]=\"data.bufferValue\">\r\n                        </mat-progress-bar>\r\n                        <br />\r\n                        <br />\r\n                    </section> -->\r\n                    <mat-list-item *ngFor=\"let note of data.listdata;let notej=index;\">\r\n                        <!-- <p>{{note.notes | json}}</p> -->\r\n\r\n                        <span class=\"material-icons\">\r\n                            notes\r\n                        </span>\r\n                        <div mat-line>\r\n                            {{note.notes.note }}\r\n                        </div>\r\n                        <!-- <div mat-line class=\"line-user\"><span>By:</span>{{note.note.userid}}</div> -->\r\n                        <!-- <div mat-line class=\"line-user\"><span>This User:</span>{{data.notedata.user}}</div> -->\r\n                        <div mat-line class=\"line-user\" *ngIf=\"note.notes != null && note.notes.user != null\">\r\n                            <span>By:</span>{{note.notes.user}}\r\n                        </div>\r\n                        <div mat-line class=\"line-datetime\"\r\n                            *ngIf=\"note.notes != null && note.notes.created_date != null\"> <span>On:</span>\r\n                            {{note.notes.created_date | date:'medium' }}\r\n                        </div>\r\n                        <span *ngIf=\"note.notes.userid==data.notedata.user\" class=\"material-icons\"\r\n                            (click)=\"deletenote(notej)\">\r\n                            delete\r\n                        </span>\r\n                        <div mat-line *ngIf=\"data.loading1!=null && data.loading1== notej \">\r\n                            <section class=\"example-section\">\r\n                                <mat-progress-bar class=\"example-margin\" [color]=\"data.color\" [mode]=\"data.mode\"\r\n                                    [value]=\"data.loadervalue\" [bufferValue]=\"data.bufferValue\">\r\n                                </mat-progress-bar>\r\n                                <br />\r\n                                <br />\r\n                            </section>\r\n                        </div>\r\n                        <mat-divider></mat-divider>\r\n\r\n\r\n                    </mat-list-item>\r\n                    <mat-divider></mat-divider>\r\n                </mat-list>\r\n                <div>\r\n                    <textarea placeholder=\"Add Notes Here !! \" rows=\"5\" cols=\"25\" [(ngModel)]=\"data.notesval\">\r\n                    </textarea>\r\n                    <button mat-button (click)=\"addnotes()\">Add Note</button>\r\n\r\n                </div>\r\n                <section *ngIf=\"data.loading !=null && data.loading == true\" class=\"example-section\">\r\n                    <mat-progress-bar class=\"example-margin\" [color]=\"data.color\" [mode]=\"data.mode\"\r\n                        [value]=\"data.loadervalue\" [bufferValue]=\"data.bufferValue\">\r\n                    </mat-progress-bar>\r\n                    <br />\r\n                    <br />\r\n                </section>\r\n                <!-- </ng-container> -->\r\n            </ng-container>\r\n\r\n\r\n\r\n            <div *ngIf=\"data!=null && data.data!=null\">\r\n                <mat-card class=\"example-card\" *ngFor=\"let item of data.data;\">\r\n                    <mat-card-header id=\"dialogdata{{item[0]}}\">\r\n                        <!--<div mat-card-avatar class=\"example-header-image\"></div>-->\r\n                        <mat-card-title>{{item[0]}}</mat-card-title>\r\n                    </mat-card-header>\r\n                    <!--<img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">-->\r\n                    <mat-card-content id=\"dialogdata{{item[0]}}\">\r\n                        <!-- {{gettypeof(item[1])}} -->\r\n                        <p class=\"innerhtml-content\"\r\n                            *ngIf=\"(item[2]==null && gettypeof(item[1]) !='object' ) || ( item[2]!=null &&  !item[2].includes('date') && !item[2].includes('datetime') && gettypeof(item[1]) != 'object')\"\r\n                            [innerHtml]=\"item[1]\">\r\n                        </p>\r\n                        <p class=\"innerhtml-content-video\"\r\n                            *ngIf=\"(item[2]==null && gettypeof(item[1]) =='object' && item[0]!='image_array' ) || ( item[2]!=null &&  !item[2].includes('date') && !item[2].includes('datetime') && gettypeof(item[1]) == 'object' && (item[0]=='video' || item[0]='vd_array' )) \"\r\n                            [innerHtml]=\"item[1]\">\r\n\r\n                        </p>\r\n                        <p *ngIf=\"item[2]!=null && item[2].includes('date') && !item[2].includes('datetime') \">\r\n                            {{item[1] | date}}\r\n                        </p>\r\n                        <p *ngIf=\"item[2]!=null && item[2].includes('date') && item[2].includes('datetime') \">\r\n                            {{item[1] | date:'medium' }}\r\n                        </p>\r\n                        <!-- length : {{item[1].length}} {{gettypeof(item[1])}} -->\r\n                        <p\r\n                            *ngIf=\" gettypeof(item[1]) == 'object' && item[1].length>1 &&  item[0]!=='video' && !item[0].includes('vd')  \">\r\n                            <!-- in ng for .. -->\r\n                            <ng-container *ngFor=\"let arr of item[1]\">\r\n                                <span\r\n                                    *ngIf=\" !item[0].includes('image') &&  (item[2]!=null &&   !item[2].includes('image') ) && item[0] !='video_array'\"\r\n                                    [innerHtml]=\"arr\"></span>\r\n                                <span\r\n                                    *ngIf=\"item[0].includes('image') || (item[2]!=null && item[2].includes('image')) \">\r\n                                    <img [src]=\"arr\" [alt]=\"arr\">\r\n                                </span>\r\n                                <span\r\n                                    *ngIf=\"item[0].includes('video_array') || (item[2]!=null && item[2].includes('video_array'))\"\r\n                                    [innerHtml]=\"arr\">\r\n\r\n                                </span>\r\n\r\n                            </ng-container>\r\n                        </p>\r\n                    </mat-card-content>\r\n                </mat-card>\r\n\r\n            </div>\r\n\r\n            <!--for custom page in modal(mainly used for tree)-->\r\n            <div *ngIf=\"data!=null && data.data!=null  && data.data[0]!=null &&  data.data[0].customdata!=null\">\r\n\r\n                <iframe class=\"custom-datadiv\" height=\"auto\" [src]=\"data.data[0].customdata\"></iframe>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div *ngIf=\"data.preview == true\">\r\n        <lib-singlepost [post1]=\"data.previewData.res[0].posts\" [user]=\"\"></lib-singlepost>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    <div mat-dialog-actions *ngIf=\"data.preview != true && data.type=='confirm' \">\r\n        <button mat-button *ngIf=\"data.isconfirmation==null ||  data.isconfirmation!=false\"\r\n            (click)=\"onNoClick()\">CANCEL</button>\r\n        <button mat-button mat-dialog-close=\"yes\" cdkFocusInitial>CONFIRM</button>\r\n    </div>\r\n\r\n</div>"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2523,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":2523,"character":12}]}],null],"parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"ImageView"}]},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer","line":371,"character":22}]}],"onNoClick":[{"__symbolic":"method"}],"deletenote":[{"__symbolic":"method"}],"addnotes":[{"__symbolic":"method"}],"gettypeof":[{"__symbolic":"method"}],"sanitizeUrl":[{"__symbolic":"method"}]}},"BottomSheet":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2611,"character":1},"arguments":[{"selector":"bottom-sheet","template":"<div class=\"bottom-sheet-header-toggle\">\r\n    You are about to change status of these record(s)\r\n\r\n</div>\r\n<mat-nav-list class=\"navlist\">\r\n    <a *ngFor=\"let item of data.items;\" mat-list-item (click)=\"openLink(item)\">\r\n        <span class=\"bottom-sheet{{item.name}}\" mat-line>{{item.name}}</span>\r\n    </a>\r\n</mat-nav-list>"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2616,"character":71},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_BOTTOM_SHEET_DATA","line":2616,"character":78}]}]],"parameters":[{"__symbolic":"reference","name":"MatBottomSheetRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"BottomSheet"}]},{"__symbolic":"reference","name":"any"}]}],"openLink":[{"__symbolic":"method"}]}},"ModalForButtomSearch":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2628,"character":1},"arguments":[{"selector":"button-search-modal","template":"<div class=\"bottom-sheet-header-toggle\">\r\n    <h2 style=\"text-align: center;\"> {{buttonSearchData.items.label}}</h2>\r\n</div>\r\n\r\n\r\n<div class=\"selecteditemcls\" *ngIf=\"selectedData.length >0\">\r\n    <span>Selected :</span>\r\n    <div class=\"navlist\" style=\"display: inline;\">\r\n        <mat-chip class=\"example-box\" *ngFor=\"let item of selectedData;let i=index;\">{{item.name}}\r\n            <mat-icon style=\"cursor: pointer;\" matChipRemove (click)=\"remove(item,i)\">cancel</mat-icon>\r\n        </mat-chip>\r\n    </div>\r\n    <span>\r\n        <button mat-raised-button color=\"primary\" class=\"add_button\" (click)=\"searchByItem()\">Search\r\n        </button>\r\n    </span>\r\n</div>\r\n<br><br>\r\n\r\n<div>\r\n    <mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading_flag == true\"></mat-progress-bar>\r\n</div>\r\n<br><br>\r\n\r\n<div class=\"searchValcls\">\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Search By Keywords</mat-label>\r\n        <input matInput placeholder=\"filter\" [(ngModel)]=\"searchVal\" (keyup)=\"searchByKeyword(searchVal)\" [matAutocomplete]=\"auto\">\r\n    </mat-form-field>\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n        <mat-option *ngFor=\"let item of matAutosearchData;let i = index\" [value]=\"item.name\"\r\n        (click)=\"chooseChipItem(item,i)\">\r\n            {{item.name}}\r\n        </mat-option>\r\n    </mat-autocomplete>\r\n\r\n    <!-- <span class=\"errcls\" style=\"color: brown;\" *ngIf=\"searchVal == null || searchVal == ''\">{{errmsg}}</span> -->\r\n    <span class='searchByKeywordcls'>\r\n        <span style=\"cursor: pointer;\" class=\"material-icons\" (click)=\"reset()\">\r\n            sync\r\n        </span>\r\n         <!-- <button mat-raised-button color=\"primary\" class=\"add_button\" (click)=\"searchByKeyword(searchVal)\">Search\r\n        </button> -->\r\n    </span>\r\n\r\n</div>\r\n<br>\r\n\r\n<div class=\"chipdatacls\">\r\n    <div style=\"display: inline;\" *ngIf=\"buttonSearchData.items?.value.length >0\">\r\n        <h2 style=\"text-align: center;\">OR Choose From <span class=\"material-icons\">\r\n                south\r\n            </span></h2>\r\n        <mat-chip-list class=\"example-chip\" cdkDropList cdkDropListOrientation=\"horizontal\">\r\n            <mat-chip class=\"example-box\" cdkDrag *ngFor=\"let item of buttonSearchData.items?.value;let i =index\">\r\n                <span style=\"cursor: pointer;\" (click)=\"chooseChipItem(item,i)\"> {{item.name}}</span>\r\n            </mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <span class='norecordcls' style=\"text-align: center;\" *ngIf=\"buttonSearchData.items?.value.length == 0\"><span\r\n           >No Record Found</span></span>\r\n</div>\r\n\r\n\r\n<div class=\"clrcls\">\r\n    <span style=\"cursor: pointer;\r\n    float: right;\r\n    margin-bottom: -6px;\" matTooltip=\"Clear\" class=\"material-icons\" (click)=\"close()\">\r\n        clear\r\n    </span>\r\n</div>"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2646,"character":70},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":2646,"character":77}]}],null],"parameters":[{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"ImageView"}]},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"ɵa"}]}],"chooseChipItem":[{"__symbolic":"method"}],"searchByItem":[{"__symbolic":"method"}],"remove":[{"__symbolic":"method"}],"reset":[{"__symbolic":"method"}],"searchByKeyword":[{"__symbolic":"method"}],"close":[{"__symbolic":"method"}]}},"VideoPlayer":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2723,"character":1},"arguments":[{"selector":"videoplayer","template":"<lib-youtubeplayer [videoid]=\"data.previewData.video\"></lib-youtubeplayer>\r\n<button type=\"button\" mat-dialog-close class=\"closemodal\">x</button>"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2731,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":2731,"character":12}]}]],"parameters":[{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"ImageView"}]},{"__symbolic":"reference","name":"any"}]}],"onNoClick":[{"__symbolic":"method"}]}},"ImageView":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2741,"character":1},"arguments":[{"selector":"image","template":"<mat-card class=\"imgmodalcls\">\r\n    <mat-card-container>\r\n        <span>\r\n            <img src={{data.alldata}} height=\"100%\" width=\"100%\">\r\n        </span>\r\n        <button mat-button mat-dialog-close=\"yes\" cdkFocusInitial>Close</button>        \r\n    </mat-card-container>\r\n    </mat-card>"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2750,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":2750,"character":12}]}]],"parameters":[{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"ImageView"}]},{"__symbolic":"reference","name":"any"}]}],"addnotes":[{"__symbolic":"method"}],"onNoClick":[{"__symbolic":"method"}]}},"SnackbarComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2762,"character":1},"arguments":[{"selector":"snack-bar-component-example-snack","styles":["\n    .example-pizza-party {\n      color: hotpink;\n    }\n  "],"template":"<span class=\"snack-bar-message\">\r\n  {{data.errormessage}}\r\n</span>\r\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":2774,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material/snack-bar","name":"MAT_SNACK_BAR_DATA","line":2774,"character":12}]}]],"parameters":[{"__symbolic":"reference","name":"MatSnackBarRef","module":"@angular/material/snack-bar","arguments":[{"__symbolic":"reference","name":"SnackbarComponent"}]},{"__symbolic":"reference","name":"any"}]}]}},"ShowformComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":13,"character":1},"arguments":[{"selector":"lib-showform","template":"<!--<mat-toolbar color=\"primary\">\r\n  <span class=\"fill-remaining-space\">My Reactive Form with Material</span>\r\n</mat-toolbar>-->\r\n\r\n\r\n\r\n\r\n\r\n<section *ngIf=\"loading == true\" class=\"example-section\">\r\n    <mat-progress-bar class=\"example-margin\" [color]=\"color\" [mode]=\"mode\" [value]=\"value\" [bufferValue]=\"bufferValue\">\r\n    </mat-progress-bar>\r\n</section>\r\n<div class=\"container\" *ngIf=\"showform; else forminfo\" novalidate>\r\n\r\n    <form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit(formGroup.value)\" class=\"form\">\r\n\r\n        <ng-container *ngIf=\"formdataval.fields!=null && formdataval.fields.length>0\">\r\n            <ng-container *ngFor=\"let fields of formdataval.fields ; let ival=index;\">\r\n\r\n                <div class=\"form_field_wrapper form_field_wrapper{{fields.name}}\">\r\n                    <mat-card class=\"form_header_{{fields.name}}\"\r\n                        *ngIf=\"fields.heading!=null && formGroup.controls[fields.name]!=null \"\r\n                        [innerHTML]=\"fields.heading\">\r\n                    </mat-card>\r\n                    <mat-form-field *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='select'  )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <!-- for select-->\r\n                        <!-- <div>ff</div> -->\r\n                        <mat-label> Select {{fields.label}} </mat-label>\r\n                        <mat-select (blur)=\"inputblur(fields.name)\" (closed)=\"inputblur(fields.name)\"\r\n                            (selectionChange)=\"checkchange(fields,ival)\" [formControlName]=\"fields.name\"\r\n                            [multiple]=\"fields.multiple?true:false\">\r\n                            <mat-option *ngFor=\"let data of fields.val\" [value]=\"data.val\"> {{data.name}}</mat-option>\r\n                        </mat-select>\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='image'  )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <div>\r\n                            <mat-label *ngIf=\"fields.multiple !=null && fields.multiple\" [innerHTML]=\"fields.label\">\r\n                            </mat-label>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ng-container *ngFor=\"let imgvals of fields.val\">\r\n                                <span class=\"imgwrapper imgwrap_{{fields.name}}_{{imgvals.key}}\">\r\n                                    <img (click)=\"chooseimg(imgvals,fields)\" src=\"{{imgvals.image}}\">\r\n                                </span>\r\n                            </ng-container>\r\n                        </div>\r\n\r\n\r\n\r\n                        <input (blur)=\"inputblur(fields.name)\" type=\"hidden\" placeholder=\"{{fields.label}}\"\r\n                            formControlName=\"{{fields.name}}\">\r\n                        <mat-error\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n                            <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                <span\r\n                                    *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='checkbox' && fields.multiple==null )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <!-- <input   (blur)=\"inputblur(fields.name)\" [type]=\"fields.type\"  [formControlName]=\"fields.name\">-->\r\n                        <mat-label *ngIf=\"fields.multiple !=null && fields.multiple\" [innerHTML]=\"fields.label\">\r\n                        </mat-label>\r\n                        <mat-checkbox *ngIf=\"fields.multiple ==null && !fields.multiple\" class=\" example-margin\"\r\n                            (blur)=\"inputblur(fields.name)\" (change)=\"checkchange(fields,ival)\"\r\n                            [formControlName]=\"fields.name\" [labelPosition]=\"fields.labelPosition\"> {{fields.label}}\r\n                        </mat-checkbox>\r\n\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n                    </div>\r\n                    <div *ngIf=\"fields.name!=null && (fields.type=='checkbox' ) && fields.multiple !=null && fields.multiple==true \"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <!-- <input   (blur)=\"inputblur(fields.name)\" [type]=\"fields.type\"  [formControlName]=\"fields.name\">-->\r\n                        <mat-label *ngIf=\"fields.multiple !=null && fields.multiple\" [innerHTML]=\"fields.label\">\r\n                        </mat-label>\r\n\r\n                        <ng-container *ngIf=\"fields.multiple !=null && fields.multiple\">\r\n                            <ng-container *ngFor=\"let vals of fields.val , let vi=index;\">\r\n                                <mat-checkbox class=\"example-radio-button\" (blur)=\"inputblur(fields.name)\"\r\n                                    (change)=\"checkchange(fields,ival)\" formControlName=\"{{fields.name}}__{{vi}}\"\r\n                                    [value]=\"vals.key\">{{vals.val}}\r\n                                </mat-checkbox>\r\n\r\n                            </ng-container>\r\n                        </ng-container>\r\n\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <!-- <ng-container *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                        <mat-error >\r\n                            <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                <span *ngIf=\"formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n\r\n                    </ng-container>-->\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </div>\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='radio' )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n\r\n                        <mat-radio-group aria-labelledby=\"example-radio-group-label\"\r\n                            class=\"example-radio-group form_field_{{fields.name}}\" [formControlName]=\"fields.name\">\r\n                            <mat-radio-button class=\" example-radio-button\" (blur)=\"inputblur(fields.name)\"\r\n                                (change)=\"checkchange(fields,ival)\" *ngFor=\"let vals of fields.val\" [value]=\"vals.key\">\r\n                                {{vals.val}}\r\n                            </mat-radio-button>\r\n                        </mat-radio-group>\r\n\r\n                        <!--<ng-container *ngFor=\"let vals of fields.val\">\r\n             <mat-checkbox class=\"form_field_{{fields.name}} example-radio-button\" (blur)=\"inputblur(fields.name)\"   [formControlName]=\"fields.name\" [value]=\"vals.key\">{{vals.val}}</mat-checkbox>\r\n\r\n         </ng-container>-->\r\n\r\n\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <ng-container *ngIf=\"formGroup.controls[fields.name]!=null && fields.type=='numberformat'\">\r\n                        <div class=\"add_form\">\r\n                        <div class=\"mat-form-field-wrapper\">\r\n                            <div class=\"phonenumber mat-form-field\">\r\n                            <input appPhoneMask (blur)=\"inputblur(fields.name)\" type=\"text\"\r\n                            [placeholder]=\"fields.label\" (change)=\"checkchange(fields,ival)\"\r\n                            [formControlName]=\"fields.name\">\r\n                            </div>\r\n                            <div class=\"errorfield\">\r\n                                <ng-container\r\n                                *ngIf=\"formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                                <mat-error>\r\n                                    <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                        <span\r\n                                            *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                    </ng-container>\r\n                                </mat-error>\r\n                            </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </ng-container>\r\n\r\n                        <mat-form-field\r\n                            *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='email' || fields.type=='number' || fields.type=='text' || fields.type == 'password')\"\r\n                            class=\"form-element form_field_{{fields.name}}\">\r\n                            <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n\r\n\r\n                            <input matInput (blur)=\"inputblur(fields.name)\" [type]=\"fields.type\"\r\n                                [placeholder]=\"fields.label\" (change)=\"checkchange(fields,ival)\"\r\n                                [formControlName]=\"fields.name\" >\r\n\r\n                            <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                            <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                            <ng-container\r\n                                *ngIf=\"formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                                <mat-error>\r\n                                    <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                        <span\r\n                                            *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                    </ng-container>\r\n                                </mat-error>\r\n                            </ng-container>\r\n\r\n                            <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                                <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                            </ng-container>\r\n\r\n                        </mat-form-field>\r\n\r\n\r\n                        <div class=\"passbuttoncls\" *ngIf=\"formGroup.controls[fields.name] != null && (fields.type == 'password'||fields.type == 'text' ) && \r\n                        fields.passwordflag == true \">\r\n                            <button mat-raised-button color=\"accent\" type=\"button\" (click)=\"GeneratePassword(fields)\"\r\n                                class=\"GeneratePasswordcls\" matTooltip=\"Generate Password\">\r\n                                Generate Password</button> &nbsp;\r\n\r\n                            <button mat-raised-button color=\"accent\" type=\"button\"\r\n                                (click)=\"copyGeneratePassword(fields)\" class=\"GeneratePasswordcls\" matTooltip=\"Copy Password\">\r\n                                Copy Password</button> &nbsp;\r\n\r\n                            <span *ngIf=\"isPasswordVisible == true\" class=\"material-icons\"\r\n                                (click)=\"previewGeneratePassword(fields)\" style=\"cursor: pointer;\" matTooltip=\"Show Password\">\r\n                                remove_red_eye\r\n                            </span>\r\n\r\n                            <span *ngIf=\"isPasswordVisible == false\" class=\"material-icons\"\r\n                                (click)=\"previewGeneratePassword(fields)\" style=\"cursor: pointer;\" matTooltip=\"Hide Password\">\r\n                                visibility_off\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div class=\"passbuttoncls\"\r\n                            *ngIf=\"formGroup.controls[fields.name] != null && customlistenbuttons?.flag == true\">\r\n\r\n\r\n                            <div *ngFor=\"let item of customlistenbuttons.buttons\">\r\n\r\n                                <div *ngIf=\"fields.type == item.type && fields?.custombuttonflag == true\">\r\n                                    <span>\r\n                                        <button mat-raised-button color=\"accent\" type=\"button\"\r\n                                            (click)=\"CustomFlagFields(fields,item)\" class=\"CustomFlagFieldscls\">\r\n                                            {{item?.labeladd}}<span class=\"material-icons\">\r\n                                                add\r\n                                            </span></button> &nbsp;\r\n\r\n                                        <button mat-raised-button color=\"accent\" type=\"button\"\r\n                                            (click)=\"CustomFlagFieldsRemove(fields,item)\" class=\"CustomFlagFieldscls\">\r\n                                            {{item?.labelremove}}<span class=\"material-icons\">\r\n                                                remove\r\n                                            </span></button>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div *ngIf=\" fields?.customheadingflag != null &&  fields?.customheadingflag == true\">\r\n                            <div *ngIf=\"fields?.customheadingtitle != null\">\r\n                                <mat-card class=\"customheadingtitlecls\">\r\n                                    {{fields?.customheadingtitle}}</mat-card>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <mat-form-field *ngIf=\"formGroup.controls[fields.name]!=null && fields.type=='textarea' \"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n                        <textarea matInput placeholder=\"Comment\" (blur)=\"inputblur(fields.name)\"\r\n                            [rows]=\"fields.rows?fields.rows:6\" [cols]=\"fields.cols?fields.cols:50\"\r\n                            [formControlName]=\"fields.name\" (change)=\"inputblur(fields.name)\">\r\n                        </textarea>\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n                    </mat-form-field>\r\n\r\n\r\n                    <mat-form-field *ngIf=\"formGroup.controls[fields.name]!=null && fields.type=='date' \"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n\r\n                        <input matInput [matDatepicker]=\"picker1\" [formControlName]=\"fields.name\" [min]=\"fields.minDate\"\r\n                            [max]=\"fields.maxDate\" (focus)=\"picker1.open()\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker1></mat-datepicker>\r\n                        <!-- <textarea matInput \r\n     placeholder=\"Comment\" \r\n     [formControlName]=\"fields.name\" \r\n     (change)=\"inputblur(fields.name)\">\r\n  </textarea> -->\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n                    <mat-form-field *ngIf=\"formGroup.controls[fields.name]!=null && fields.type=='autocomplete' \"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n                        <!-- {{fields.val.length}}\r\n -->\r\n\r\n\r\n\r\n                        <!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-valid -->\r\n                        <!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-invalid -->\r\n\r\n                        <input matInput (blur)=\"inputblur(fields.name)\" (click)=\"reloadautocomplete(fields)\"\r\n                            (keyup)=filterautocomplete(fields.name,fields) [formControlName]=\"fields.name\"\r\n                            placeholder=\"{{fields.label}}\" [matAutocomplete]=\"auto\">\r\n\r\n                        <!-- <mat-autocomplete #auto=\"matAutocomplete\" *ngIf=\"currentautocomplete==fields.name || currentautocomplete=='' \"> -->\r\n                        <mat-autocomplete #auto=\"matAutocomplete\">\r\n                            <ng-container *ngIf=\"filerfielddata!=null && filerfielddata.length>0 \">\r\n                                <mat-option *ngFor=\"let vals of filerfielddata \" [value]=\"vals.key\"\r\n                                    (click)=\"setautocompletevalue(vals,fields)\">\r\n                                    <!-- <img class=\"example-option-img\" aria-hidden [src]=\"state.flag\" height=\"25\"> -->\r\n                                    <span>{{vals.val}}</span>\r\n                                    <!-- <small>Population: {{state.population}}</small> -->\r\n                                </mat-option>\r\n                            </ng-container>\r\n                        </mat-autocomplete>\r\n\r\n\r\n\r\n\r\n\r\n                        <mat-chip-list *ngIf=\"autocompletefiledvalue[fields.name] !=null && fields.multiple==null\"\r\n                            aria-label=\"{{fields.name}} data\">\r\n                            <ng-container *ngFor=\"let vals of fields.val \">\r\n                                <ng-container *ngIf=\"vals.key==autocompletefiledvalue[fields.name]\">\r\n                                    <mat-chip [removable]=true>{{vals.val}}\r\n                                        <mat-icon matChipRemove (click)=\"removechipsingle(fields)\">cancel</mat-icon>\r\n                                    </mat-chip>\r\n                                </ng-container>\r\n\r\n                            </ng-container>\r\n\r\n                        </mat-chip-list>\r\n\r\n\r\n                        <mat-chip-list *ngIf=\"autocompletefiledvalue[fields.name] !=null && fields.multiple!=null\"\r\n                            aria-label=\"{{fields.name}} data\">\r\n                            <ng-container *ngFor=\"let vals of fields.val \">\r\n                                <ng-container *ngFor=\"let avals of autocompletefiledvalue[fields.name] ; let ib=index \">\r\n                                    <ng-container *ngIf=\"vals.key==avals\">\r\n                                        <mat-chip [removable]=true>{{vals.val}}\r\n                                            <mat-icon matChipRemove (click)=\"removechipmultiple(fields,ib)\">cancel\r\n                                            </mat-icon>\r\n                                        </mat-chip>\r\n                                    </ng-container>\r\n                                </ng-container>\r\n\r\n                            </ng-container>\r\n\r\n                        </mat-chip-list>\r\n\r\n                        <!-- <textarea matInput \r\n     placeholder=\"Comment\" \r\n     [formControlName]=\"fields.name\" \r\n     (change)=\"inputblur(fields.name)\">\r\n  </textarea> -->\r\n                        <span *ngIf=\"fields.prefix!=null\" matPrefix> {{fields.prefix}} &nbsp;</span>\r\n                        <span *ngIf=\"fields.suffix!=null\" matSuffix>{{fields.suffix}}</span>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n\r\n                            <mat-error>\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"  fields.hint!=null && formGroup.controls[fields.name]!=null  \">\r\n                            <mat-hint align=\"start\">{{fields.hint}}</mat-hint>\r\n                        </ng-container>\r\n\r\n\r\n                    </mat-form-field>\r\n\r\n                    <!-- [config]=\"{uiColor: '#99000'}\" \r\n\r\n[readonly]=\"false\"\r\n                (change)=\"onChange($event)\"\r\n                (editorChange)=\"onEditorChange($event)\" \r\n                (ready)=\"onReady($event)\"\r\n                (focus)=\"onFocus($event)\"\r\n                (blur)=\"onBlur($event)\"\r\n                (contentDom)=\"onContentDom($event)\"\r\n                (fileUploadRequest)=\"onFileUploadRequest($event)\"\r\n                (fileUploadResponse)=\"onFileUploadResponse($event)\"\r\n                (paste)=\"onPaste($event)\"\r\n                (drop)=\"onDrop($event)\"\r\n                debounce=\"500\"\r\n\r\n                 [ngModelOptions]=\"{standalone: true}\r\n\r\n\r\n                   <ckeditor\r\n                [(ngModel)]=\"ckeditorContent\"\r\n                [ngModelOptions]=\"{standalone: true}\"\r\n                \r\n                \r\n                >\r\n              </ckeditor>\r\n-->\r\n\r\n\r\n\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='editor' )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <!-- <input  (blur)=\"inputblur(fields.name)\" type=\"{{fields.type}}\" placeholder=\"{{fields.label}}\" formControlName=\"{{fields.name}}\"> -->\r\n\r\n                        <div *ngIf=\"fields.ckeConfig != null && fields.ckeConfig != ''\">\r\n                            <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n                            <ckeditor (blur)=\"inputblur(fields.name)\" [config]=\"fields.ckeConfig\"\r\n                                [formControlName]=\"fields.name\"></ckeditor>\r\n                            <mat-error\r\n                                *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"fields.ckeConfig == null || fields.ckeConfig == ''\">\r\n                            <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n                            <ckeditor (blur)=\"inputblur(fields.name)\" [formControlName]=\"fields.name\"></ckeditor>\r\n                            <mat-error\r\n                                *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n                                <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                    <span\r\n                                        *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                                </ng-container>\r\n                            </mat-error>\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='externaldata' )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n\r\n                        <span class=\"externalDataFunctioncls\">\r\n                            <button type=\"button\" mat-raised-button color=\"primary\"\r\n                                (click)=\"externalDataFunction(fields,ival)\" matTooltip = \"{{fields.label}}\">{{fields.label}}</button>\r\n                        </span>\r\n                        <br>\r\n\r\n                        <ng-container *ngIf=\"fields.value != null && fields.value.length >0\">\r\n                            <!-- {{fields.value | json}} -->\r\n\r\n                            <div *ngFor=\"let item of fields.value;let i = index\">\r\n                                <div class=\"externalcardcls\">\r\n                                    <mat-card>\r\n\r\n                                        <span class=\"keycls\">\r\n                                            {{item.label}} :\r\n                                        </span>\r\n\r\n                                        <span class=\"valcls\" *ngIf=\"item.imgflag == null\">\r\n                                            {{item.val}}\r\n                                        </span>\r\n\r\n                                        <span class=\"imgcls\" *ngIf=\"item.imgflag != null && item.imgflag == true\">\r\n                                            <img [src]=\"item.val\">\r\n                                        </span>\r\n\r\n                                        <span class=\"external_buttoncls\">\r\n\r\n\r\n                                            <span style=\"cursor: pointer;\"\r\n                                                (click)=\"externalDataEditFunction('edit',fields,ival,i)\"\r\n                                                class=\"material-icons\">\r\n                                                create\r\n                                            </span>\r\n\r\n                                            <span style=\"cursor: pointer;\"\r\n                                                (click)=\"externalDataEditFunction('remove',fields,ival,i)\"\r\n                                                class=\"material-icons\">\r\n                                                clear\r\n                                            </span>\r\n\r\n                                        </span>\r\n\r\n                                    </mat-card>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </ng-container>\r\n                        <!-- <ng-container *ngIf=\"externalDataVal != null && externalDataVal.length >0\">\r\n\r\n                            <ng-container *ngFor=\"let item of externalDataVal\">\r\n                                <div *ngIf=\"fields.name == item.name && item.value != null && item.value.length >0\">\r\n\r\n                                    {{item | json}}\r\n\r\n                                    {{fields.value | json}}\r\n\r\n                                </div>\r\n                            </ng-container>\r\n\r\n                        </ng-container> -->\r\n\r\n                    </div>\r\n\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='hidden' )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <input (blur)=\"inputblur(fields.name)\" type=\"{{fields.type}}\" placeholder=\"{{fields.label}}\"\r\n                            formControlName=\"{{fields.name}}\">\r\n                        <mat-error\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n                            <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                <span\r\n                                    *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                    </div>\r\n\r\n                    <div *ngIf=\"formGroup.controls[fields.name]!=null && (fields.type=='file' )\"\r\n                        class=\"form-element form_field_{{fields.name}}\">\r\n                        <mat-label [innerHTML]=\"fields.label\"></mat-label>\r\n                        <div class=\"aligner\" (load)=\"triggerevents(fields)\">\r\n                            <div class=\"drop\" (change)=\"fileChangeEvent($event)\" [attr.fileid]=\"fields.name\"\r\n                                id=\"drop{{fields.name}}\" (click)=\"onchoosefiles($event,fields.name,fields.multiple)\">Browse or Drop Files Here\r\n                                <!-- Or <br><input type=\"file\" (change)=\"fileChangeEvent($event)\" /> -->\r\n\r\n                                <ng-container *ngIf=\"fields.multiple !=null && fields.multiple==true\">\r\n                                 <input type=\"file\" multiple id=\"filechoosermultiple{{fields.name}}\" style=\"display:none\"  (change)=\"handleDrop($event)\">\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"fields.multiple == null \">\r\n                                 <input type=\"file\" id=\"filechoosersingle{{fields.name}}\" style=\"display:none\" multiple  (change)=\"handleDrop($event)\">\r\n                                </ng-container>\r\n                            </div>\r\n\r\n                            <!-- <input type=\"file\" (change)=\"fileChangeEvent($event)\" /> -->\r\n\r\n                            <!-- <span>{{fields | json}}</span> -->\r\n\r\n                            <div class=\"filesid\" id=\"list{{fields.name}}\">\r\n                                <h1 *ngIf=\"filearray[fields.name]!=null \">Files:</h1>\r\n                                <!-- <div></div> -->\r\n                                <ng-container\r\n                                    *ngIf=\"filearray[fields.name] !=null  && fields.multiple==null && fields.loadfile != null && fields.loadfile == 1\">\r\n                                    <div class=\"filecontainerdiv\">\r\n                                        <span *ngIf=\"filearray[fields.name].uploaded==1\"\r\n                                            class=\"material-icons fileuploadcompleteicon \">\r\n                                            cloud_done\r\n                                        </span>\r\n\r\n\r\n                                        <div class=\"imagedivcls\"\r\n                                            *ngIf=\"filearray[fields.name].type == 'image/jpeg' || filearray[fields.name].type == 'image/png' || filearray[fields.name].type == 'image/jpg'\">\r\n\r\n                                            <div class=\"divimagecardcls\">\r\n                                                <mat-card class=\"example-card imagecardcls\"\r\n                                                    *ngIf=\"fields.imageUrl != null && fields.imageUrl != ''\">\r\n                                                    <img mat-card-image [src]=\"fields.imageUrl\">\r\n                                                </mat-card>\r\n                                            </div>\r\n\r\n\r\n                                            <div class=\"divimagecardcls\"\r\n                                                *ngIf=\"fields.value != null && fields.value != '' && fields.value.fileservername != null\">\r\n\r\n                                                <mat-card class=\"example-card imagecardcls\">\r\n\r\n                                                    <span class=\"material-icons cropcls\"\r\n                                                        *ngIf=\"fields.aspectratio != null && fields.aspectratio != '' && fields.aspectratio.length > 0\"\r\n                                                        (click)=\"opensingleimagecrop(fields)\">\r\n                                                        crop\r\n                                                    </span>\r\n\r\n                                                    <img mat-card-image\r\n                                                        src=\"https://{{fields.value.bucket}}.s3.amazonaws.com/{{fields.value.path}}{{fields.value.fileservername}}\">\r\n                                                </mat-card>\r\n                                            </div>\r\n\r\n\r\n                                            <div class=\"cropimagesdiv\"\r\n                                                *ngIf=\"fields.aspectratio != null && fields.aspectratio != '' && fields.aspectratio.length > 0 && fields.imageUrl != null && fields.imageUrl != ''\">\r\n                                                <h2> Croped Images :</h2>\r\n\r\n                                                <ng-container *ngFor=\"let c of fields.aspectratio;let ci=index\"\r\n                                                    class=\"image-cropper-cls\">\r\n                                                    <br />\r\n                                                    <span>Croped Image (Asepect Ratio) :\r\n                                                        {{fields.imagecroppedratiolabel[ci]}} </span><br>\r\n\r\n                                                    <image-cropper [imageBase64]=\"fields.imageUrl\"\r\n                                                        [maintainAspectRatio]=\"true\" [aspectRatio]=\"c\"\r\n                                                        (imageCropped)=\"singleimageCropped($event,fields,ival,ci)\"\r\n                                                        (imageLoaded)=\"imageLoaded()\" (cropperReady)=\"cropperReady()\"\r\n                                                        (loadImageFailed)=\"loadImageFailed()\" [imageQuality]=\"100\"\r\n                                                        [resizeToHeight]=\"300\"></image-cropper>\r\n\r\n                                                </ng-container>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"filesdivcls\">\r\n                                            <span class=\"material-icons\"\r\n                                                *ngIf=\"filearray[fields.name].type == 'application/pdf'\">\r\n                                                picture_as_pdf\r\n                                            </span>\r\n\r\n                                            <span class=\"material-icons\"\r\n                                                *ngIf=\"filearray[fields.name].type == 'video/mp4'\">\r\n                                                movie_filter\r\n                                            </span>\r\n\r\n                                            <span class=\"material-icons\"\r\n                                                *ngIf=\"filearray[fields.name].type == 'text/csv' || filearray[fields.name].type == 'text/plain'\">\r\n                                                description\r\n                                            </span>\r\n\r\n                                            <span\r\n                                                class=\"uploadedfilename uploadedfilename_{{filearray[fields.name]}}\">{{filearray[fields.name].name}}</span>\r\n                                            <br />\r\n                                            <span\r\n                                                class=\"uploadedfiletype uploadedfiletype_{{filearray[fields.name]}}\">{{filearray[fields.name].type}}</span>\r\n                                        </div>\r\n\r\n\r\n                                        <div class=\"filefieldsmaincls\">\r\n                                            <ng-container class=\"descdiv\"\r\n                                                *ngIf=\" filearray[fields.name] !=null && fields.imagefields != null && fields.imagefields != '' && fields.imagefields.length > 0 \">\r\n                                                <div class=\"filefieldscls\">\r\n                                                    <div class=\"filefields\"\r\n                                                        *ngFor=\"let item of fields.imagefields;let i =index;trackBy: trackByFn\">\r\n\r\n                                                        <mat-form-field class=\"example-full-width\"\r\n                                                            *ngIf=\"item.type == 'text'\">\r\n                                                            <input matInput type=\"text\"\r\n                                                                [(ngModel)]=\"fields.imagefields[i].value\"\r\n                                                                [ngModelOptions]=\"{standalone: true}\"\r\n                                                                name=\"{{item.name}}\" matInput\r\n                                                                placeholder=\"{{item.label}}\">\r\n                                                        </mat-form-field>\r\n\r\n                                                        <mat-form-field class=\"example-full-width\"\r\n                                                            *ngIf=\"item.type == 'textarea'\">\r\n                                                            <textarea matInput name=\"{{item.name}}\"\r\n                                                                [(ngModel)]=\"fields.imagefields[i].value\"\r\n                                                                [ngModelOptions]=\"{standalone: true}\"\r\n                                                                placeholder=\"{{item.label}}\" [rows]='3'\r\n                                                                [cols]='30'></textarea>\r\n                                                        </mat-form-field>\r\n\r\n                                                        <mat-form-field class=\"example-full-width\"\r\n                                                            *ngIf=\"item.type == 'number'\">\r\n                                                            <input type=\"number\" matInput name=\"{{item.name}}\"\r\n                                                                [ngModelOptions]=\"{standalone: true}\"\r\n                                                                [(ngModel)]=\"fields.imagefields[i].value\" matInput\r\n                                                                placeholder=\"{{item.label}}\">\r\n                                                        </mat-form-field>\r\n\r\n                                                        <div *ngIf=\"item.type == 'checkbox'\">\r\n                                                            <mat-checkbox name=\"{{item.name}}\"\r\n                                                                [(ngModel)]=\"fields.imagefields[i].value\"\r\n                                                                [ngModelOptions]=\"{standalone: true}\" matInput>\r\n                                                            </mat-checkbox>\r\n                                                            &nbsp; {{item.label}}\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </ng-container>\r\n                                        </div>\r\n\r\n\r\n\r\n                                        <div class=\"actionbtndiv\">\r\n                                            <mat-chip class=\"fileuploadbutton\" style=\"cursor: pointer;\"\r\n                                                *ngIf=\"filearray[fields.name].uploaded==null \" mat-raised-button\r\n                                                (click)=\"uploadfile(fields)\">Upload</mat-chip>\r\n\r\n                                            <mat-chip class=\"deletesinglefilecls\" style=\"cursor: pointer;\"\r\n                                                *ngIf=\"fields.loaded != null && fields.loaded==0\" mat-raised-button\r\n                                                (click)=\"deletesinglefile(fields,filearray[fields.name].type)\">Delete\r\n                                            </mat-chip>\r\n\r\n                                            <mat-chip class=\"filedeletebutton\" style=\"cursor: pointer;\"\r\n                                                *ngIf=\"filearray[fields.name].uploaded != null && filearray[fields.name].uploaded==1\"\r\n                                                mat-raised-button (click)=\"deletefile(fields)\">Delete</mat-chip>\r\n                                        </div>\r\n\r\n                                        <!-- <mat-chip>Papadum</mat-chip> -->\r\n\r\n                                        <section *ngIf=\"filearray[fields.name].uploaded==2 \"\r\n                                            class=\"example-section uploadprogress\">\r\n                                            <mat-progress-bar class=\"example-margin\" [color]=\"color\" [mode]=\"mode\"\r\n                                                [value]=\"value\" [bufferValue]=\"bufferValue\">\r\n                                            </mat-progress-bar>\r\n                                        </section>\r\n                                    </div>\r\n                                </ng-container>\r\n\r\n\r\n                                <!-- for multiple file uploads  -->\r\n                                <ng-container\r\n                                    *ngIf=\"filearray[fields.name]!=null && fields.multiple !=null  && fields.multiple==true\">\r\n                                    <ng-container\r\n                                        *ngFor=\"let files of filearray[fields.name]; let fi=index;trackBy: trackByFnMulti\">\r\n                                        <div class=\"filecontainerdiv\">\r\n\r\n                                            <!-- {{files | json}} ++ -->\r\n\r\n                                            <div *ngIf=\"files.loadfile != null && files.loadfile==1\"\r\n                                                class=\"filesdivcls\">\r\n\r\n                                                <!-- {{files.loadfile}}+++++++++++== -->\r\n\r\n                                                <span *ngIf=\"files.uploaded==1\"\r\n                                                    class=\"material-icons fileuploadcompleteicon\">\r\n                                                    cloud_done\r\n                                                </span>\r\n\r\n                                                <div class=\"divimagecardcls\"\r\n                                                    *ngIf=\"files.type == 'image/jpeg' || files.type == 'image/png' || files.type == 'image/jpg'\">\r\n\r\n\r\n                                                    <mat-card class=\"example-card imagecardcls\"\r\n                                                        *ngIf=\"files.imageUrl != null && files.imageUrl != ''\">\r\n                                                        <img mat-card-image [src]=\"files.imageUrl\">\r\n                                                    </mat-card>\r\n\r\n                                                    <mat-card class=\"example-card imagecardcls\"\r\n                                                        *ngIf=\"files.imageUrl == null\">\r\n\r\n                                                        <span class=\"material-icons cropcls\"\r\n                                                            *ngIf=\"files.aspectratio != null && files.aspectratio != '' && files.aspectratio.length > 0\"\r\n                                                            (click)=\"opensingleimagecropformultiple(files)\">\r\n                                                            crop\r\n                                                        </span>\r\n\r\n\r\n                                                        <img mat-card-image\r\n                                                            src=\"https://{{files.bucket}}.s3.amazonaws.com/{{files.path}}{{files.fileservername}}\">\r\n                                                    </mat-card>\r\n\r\n                                                    <div class=\"cropimagesdiv\"\r\n                                                        *ngIf=\"files.aspectratio != null && files.aspectratio != '' && files.aspectratio.length > 0 && files.imageUrl != null && files.imageUrl != ''\">\r\n                                                        <h2> Croped Images :</h2>\r\n\r\n                                                        <ng-container *ngFor=\"let c of files.aspectratio;let ci=index\">\r\n                                                            <br />\r\n                                                            <span>Croped Image (Asepect Ratio) :\r\n                                                                {{files.imagecroppedratiolabel[ci]}} </span><br>\r\n\r\n                                                            <image-cropper [imageBase64]=\"files.imageUrl\"\r\n                                                                [maintainAspectRatio]=\"true\" [aspectRatio]=\"c\"\r\n                                                                [resizeToWidth]=\"128\"\r\n                                                                (imageCropped)=\"multipleimageCropped($event,files,ival,ci,fi,filearray[fields.name])\"\r\n                                                                (imageLoaded)=\"imageLoaded()\"\r\n                                                                (cropperReady)=\"cropperReady()\"\r\n                                                                (loadImageFailed)=\"loadImageFailed()\"\r\n                                                                [imageQuality]=\"100\" [resizeToHeight]=\"300\">\r\n                                                            </image-cropper>\r\n\r\n                                                            <!-- <mat-card class=\"example-card imagecardcls\"\r\n                                                                *ngIf=\"files.croppedImage[ci] != null\">\r\n                                                                <span>Croped Image Output : </span><br>\r\n                                                                <img class=\"croppedImagecls\"\r\n                                                                    [src]=\"files.croppedImage[ci]\" />\r\n                                                            </mat-card> -->\r\n\r\n                                                        </ng-container>\r\n                                                    </div>\r\n\r\n\r\n                                                </div>\r\n\r\n                                                <span class=\"material-icons\" *ngIf=\"files.type == 'application/pdf'\">\r\n                                                    picture_as_pdf\r\n                                                </span>\r\n\r\n                                                <span class=\"material-icons\" *ngIf=\"files.type == 'video/mp4'\">\r\n                                                    movie_filter\r\n                                                </span>\r\n\r\n                                                <span class=\"material-icons\"\r\n                                                    *ngIf=\"files.type == 'text/csv' || files.type == 'text/plain'\">\r\n                                                    description\r\n                                                </span>\r\n\r\n                                                <div class=\"filenamecls\">\r\n                                                    <span class=\"fileuploadednameclass\"> {{files.name}}</span>\r\n                                                    <br />\r\n                                                    <span class=\"fileuploadedtypeclass\"> {{files.type}}</span>\r\n                                                </div>\r\n\r\n\r\n                                                <br>\r\n                                                <!-- files ++++ 22 => {{files.imagefields | json}}    -->\r\n                                                <!-- multipleImgFormData -->\r\n                                                <div class=\"filefieldsmaincls\">\r\n                                                    <ng-container class=\"descdiv\"\r\n                                                        *ngIf=\"fields.imagefields != null && fields.imagefields != '' && fields.imagefields.length > 0\">\r\n\r\n                                                        <!-- fields {{fields | json}}ss -->\r\n\r\n                                                        <div class=\"filefieldscls\"\r\n                                                            *ngFor=\"let val of fields.imagefields;let ind=index;trackBy: trackByFnMultiple \">\r\n\r\n                                                            <br>\r\n\r\n                                                            <div *ngIf=\"val.type == 'text'\" class=\"filefields\">\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields == null\">\r\n                                                                    <!-- <span>if imgfields ==</span> -->\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <input matInput type=\"text\"\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0\">\r\n                                                                    <!-- <span>if imgfields ++ </span> -->\r\n\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <input matInput type=\"text\"\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                            </div>\r\n\r\n                                                            <!-- [(ngModel)]=\"filearray[fields.name][fi].imagefields[ind].value\" -->\r\n\r\n                                                            <div *ngIf=\"val.type == 'textarea'\">\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields == null\">\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <textarea matInput\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\"\r\n                                                                            [rows]='3' [cols]='30'></textarea>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0\">\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <textarea matInput\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}\r\n                                                                            [rows]='3' [cols]='30'></textarea>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n\r\n                                                            </div>\r\n\r\n                                                            <div *ngIf=\"val.type == 'number'\">\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields == null\">\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <input type=\"number\" matInput\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\">\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0\">\r\n                                                                    <mat-form-field class=\"example-full-width\">\r\n                                                                        <input type=\"number\" matInput\r\n                                                                            (keyup)=\"keyupVal(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name,$event)\"\r\n                                                                            name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                            matInput\r\n                                                                            placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\"\r\n                                                                            value={{filearray[fields.name][fi].imgfields[ind].value}}>\r\n                                                                    </mat-form-field>\r\n                                                                </div>\r\n\r\n                                                            </div>\r\n\r\n\r\n\r\n                                                            <div *ngIf=\"val.type == 'checkbox'\">\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields == null\">\r\n                                                                    <mat-checkbox\r\n                                                                        name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                        matInput\r\n                                                                        placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\"\r\n                                                                        matInput\r\n                                                                        (change)=\"checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)\">\r\n                                                                    </mat-checkbox> &nbsp; {{val.label}}\r\n                                                                </div>\r\n\r\n                                                                <div\r\n                                                                    *ngIf=\"filearray[fields.name][fi].imgfields != null && filearray[fields.name][fi].imgfields.length > 0\">\r\n                                                                    <!-- chk = >{{filearray[fields.name][fi].imgfields[ind].value}} -->\r\n                                                                    <mat-checkbox\r\n                                                                        name=\"{{filearray[fields.name][fi].imagefields[ind].name}}\"\r\n                                                                        matInput\r\n                                                                        placeholder=\"{{filearray[fields.name][fi].imagefields[ind].label}}\"\r\n                                                                        matInput\r\n                                                                        (change)=\"checkValue(filearray[fields.name],fields.imagefields,fi,ind,filearray[fields.name][fi].imagefields[ind],fields.name,filearray[fields.name][fi].imagefields[ind].name)\"\r\n                                                                        [checked]=\"filearray[fields.name][fi].imgfields[ind].value\">\r\n                                                                    </mat-checkbox> &nbsp; {{val.label}}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <!-- </div> -->\r\n                                                    </ng-container>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                <div class=\"actionbtndiv\">\r\n\r\n                                                    <mat-chip class=\"fileuploadbutton\" *ngIf=\"files.uploaded==null \"\r\n                                                        style=\"cursor: pointer;\" mat-raised-button\r\n                                                        (click)=\"uploadfilemultiple(fields,files,fi)\">\r\n                                                        Upload\r\n                                                    </mat-chip>\r\n\r\n                                                    <mat-chip class=\"deletesinglefilecls\" style=\"cursor: pointer;\"\r\n                                                        *ngIf=\"files.loaded != null && files.loaded==0\"\r\n                                                        mat-raised-button\r\n                                                        (click)=\"deletesinglefilefrommultiple(fields,files,fi)\">\r\n                                                        Delete\r\n                                                    </mat-chip>\r\n\r\n                                                    <mat-chip class=\"filedeletebutton\" *ngIf=\"files.uploaded==1\"\r\n                                                        style=\"cursor: pointer;\" mat-raised-button\r\n                                                        (click)=\"deletefilemultiple(fields,files,fi)\">\r\n                                                        Delete </mat-chip>\r\n                                                </div>\r\n\r\n                                                <section *ngIf=\"files.uploaded==2 \" class=\"example-section\">\r\n                                                    <mat-progress-bar class=\"example-margin\" [color]=\"color\"\r\n                                                        [mode]=\"mode\" [value]=\"value\" [bufferValue]=\"bufferValue\">\r\n                                                    </mat-progress-bar>\r\n                                                </section>\r\n                                            </div>\r\n                                        </div>\r\n                                        <br />\r\n                                    </ng-container>\r\n                                    <div class=\"actionbtndiv2\">\r\n                                        <mat-chip class=\"uploadallfile\"\r\n                                            *ngIf=\"(filecount[fields.name] !=null && filecount[fields.name] !=filearray[fields.name].length ) || filecount[fields.name]==null\"\r\n                                            mat-raised-button (click)=\"uploadall(fields)\">Upload All</mat-chip>\r\n                                        <mat-chip class=\"deleteallfile\" mat-raised-button\r\n                                            (click)=\"deletefilemultipleall(fields)\">\r\n                                            Delete All\r\n                                        </mat-chip>\r\n                                    </div>\r\n\r\n                                </ng-container>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <mat-error\r\n                            *ngIf=\"!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched\">\r\n                            <ng-container *ngFor=\"let valdidations of fields.validations\">\r\n                                <span\r\n                                    *ngIf=\"formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]\">{{valdidations.message}}</span>\r\n                            </ng-container>\r\n                        </mat-error>\r\n                    </div>\r\n\r\n\r\n                    <section *ngIf=\"fieldloading == fields.name \" class=\"example-section\">\r\n                        <mat-progress-bar class=\"example-margin\" [color]=\"color\" [mode]=\"mode\" [value]=\"value\"\r\n                            [bufferValue]=\"bufferValue\">\r\n                        </mat-progress-bar>\r\n                    </section>\r\n                </div>\r\n\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n\r\n\r\n        <!-- <div class=\"aligner\">\r\n            <div id=\"drop\">Drop files here.</div>\r\n            <div id=\"list\">\r\n              <h1>Uploaded Files:</h1>\r\n            </div>\r\n          </div> -->\r\n\r\n        <!-- <label for=\"singleFile\">Upload file</label>\r\n<input id=\"singleFile\" type=\"file\" [fileUploadInputFor]= \"fileUploadQueue\"/>\r\n<br>\r\n\r\n<mat-file-upload-queue #fileUploadQueue\r\n    [fileAlias]=\"'file'\"\r\n    [httpUrl]=\"'https://tge24bc2ne.execute-api.us-east-1.amazonaws.com/dev'\">\r\n\r\n    <mat-file-upload [file]=\"file\" [id]=\"i\" *ngFor=\"let file of fileUploadQueue.files; let i = index\"></mat-file-upload>\r\n</mat-file-upload-queue> -->\r\n\r\n\r\n        <!--<mat-form-field class=\"form-element\">\r\n      <input matInput placeholder=\"Emailaddress\" formControlName=\"email\">\r\n      <mat-error *ngIf=\"!formGroup.controls['email'].valid && formGroup.controls['email'].touched\">\r\n        {{ getErrorEmail() }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"form-element\">\r\n      <input matInput placeholder=\"Name\" formControlName=\"name\">\r\n      <mat-error *ngIf=\"!name.valid && name.touched\">\r\n        {{ titleAlert }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"form-element\">\r\n      <textarea matInput placeholder=\"Description\" matTextareaAutosize matAutosizeMinRows=\"2\" matAutosizeMaxRows=\"5\" formControlName=\"description\"></textarea>\r\n      <mat-error *ngIf=\"!formGroup.controls['description'].valid && formGroup.controls['description'].touched\">\r\n        Required field, must be between 5 and 10 characters.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"form-element\">\r\n      <input matInput placeholder=\"Password\" formControlName=\"password\">\r\n      <mat-hint>Choose a password of at least eight characters, one uppercase letter and one number</mat-hint>\r\n      <mat-error *ngIf=\"!formGroup.controls['password'].valid && formGroup.controls['password'].touched\">\r\n        {{ getErrorPassword() }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class=\"form-element\">\r\n      <mat-checkbox formControlName=\"validate\" value=\"1\">Name min. 3 characters</mat-checkbox>\r\n    </div>-->\r\n\r\n        <div class=\"form-element\">\r\n            <button mat-raised-button color=\"primary\" type=\"submit\" class=\"button\"\r\n                [disabled]=\"!formdataval.submitactive\">{{formdataval.submittext}}</button>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"!formdataval.hidecancel\" type=\"button\" class=\"button\"\r\n                (click)=\"navtocancel()\">{{formdataval.canceltext}}</button>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"!formdataval.hidereset\" type=\"reset\"\r\n                (click)=\"resetformdata()\" class=\"button\">{{formdataval.resettext}}</button>\r\n\r\n            <div class=\"custombuttonscls\"\r\n                *ngIf=\"formdataval.custombuttons != null && formdataval?.custombuttons.length > 0\">\r\n                <div *ngFor=\"let val of formdataval?.custombuttons\">\r\n                    <button mat-raised-button color=\"primary\" *ngIf=\"val?.name !=null && val?.name !=''\" type=\"button\"\r\n                        (click)=\"getFormVal(val)\" class=\"button\" matTooltip=\"{{val?.tooltip}}\">{{val?.label}}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </form>\r\n</div>\r\n\r\n<ng-template #forminfo>\r\n    <div class=\"container\">\r\n        {{ post | json }}\r\n    </div>\r\n</ng-template>","styles":[".drop{height:200px;width:200px;border-radius:100px;color:#fff;background-color:#baf;font-size:20px;display:flex;align-items:center}.aligner{height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column}.customheadingtitlecls{background-color:#7fffd4;font-size:x-large;text-align:center}.matimg-cls{height:112px;width:295px}.imgcls img{height:100px;width:100px}.external_buttoncls{float:right}.cropimagesdiv,.croppedImagecls,.imagecardcls{width:300px}.descdiv{margin:5px 0}.cropcls{cursor:pointer;position:absolute;right:10px;top:19px;background:#fffffff2;border-radius:3px;padding:2px}"]}]}],"members":{"formdata":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":23,"character":3}}]}],"formfieldrefreshdata":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":29,"character":3}}]}],"formfieldrefresh":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"custombuttons":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":49,"character":3}}]}],"externaldatavalue":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":56,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":64,"character":35},{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","module":"@angular/material/snack-bar","name":"MatSnackBar","line":64,"character":99},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":64,"character":128},{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":64,"character":156}]}],"onFormFieldChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":99,"character":3}}]}],"ngOnInit":[{"__symbolic":"method"}],"getFormVal":[{"__symbolic":"method"}],"CustomFlagFields":[{"__symbolic":"method"}],"CustomFlagFieldsRemove":[{"__symbolic":"method"}],"GeneratePassword":[{"__symbolic":"method"}],"onchoosefiles":[{"__symbolic":"method"}],"copyGeneratePassword":[{"__symbolic":"method"}],"previewGeneratePassword":[{"__symbolic":"method"}],"makeid":[{"__symbolic":"method"}],"externalDataFunction":[{"__symbolic":"method"}],"externalDataEditFunction":[{"__symbolic":"method"}],"openCalendar":[{"__symbolic":"method"}],"navtocancel":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"triggerevents":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"handleDrop":[{"__symbolic":"method"}],"trackByFn":[{"__symbolic":"method"}],"trackByFnMultiple":[{"__symbolic":"method"}],"trackByFnMulti":[{"__symbolic":"method"}],"keyupVal":[{"__symbolic":"method"}],"checkValue":[{"__symbolic":"method"}],"uploadfile":[{"__symbolic":"method"}],"uploadall":[{"__symbolic":"method"}],"deletefilemultipleall":[{"__symbolic":"method"}],"uploadfilemultiple":[{"__symbolic":"method"}],"deletefile":[{"__symbolic":"method"}],"deletesinglefile":[{"__symbolic":"method"}],"deletesinglefilefrommultiple":[{"__symbolic":"method"}],"deletefilemultiple":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"inputblur":[{"__symbolic":"method"}],"filterautocomplete":[{"__symbolic":"method"}],"reloadautocomplete":[{"__symbolic":"method"}],"removechipsingle":[{"__symbolic":"method"}],"removechipmultiple":[{"__symbolic":"method"}],"setautocompletevalue":[{"__symbolic":"method"}],"managefromcontrol":[{"__symbolic":"method"}],"resetformdata":[{"__symbolic":"method"}],"checkchange":[{"__symbolic":"method"}],"createForm":[{"__symbolic":"method"}],"setChangeValidate":[{"__symbolic":"method"}],"chooseimg":[{"__symbolic":"method"}],"checkPasswords":[{"__symbolic":"method"}],"checkPassword":[{"__symbolic":"method"}],"autorequired":[{"__symbolic":"method"}],"checkInUseEmail":[{"__symbolic":"method"}],"getError":[{"__symbolic":"method"}],"getErrorPassword":[{"__symbolic":"method"}],"onSubmit":[{"__symbolic":"method"}],"scrollToFirstInvalidControl":[{"__symbolic":"method"}],"getTopOffset":[{"__symbolic":"method"}],"fileChangeEvent":[{"__symbolic":"method"}],"singleimageCropped":[{"__symbolic":"method"}],"multipleimageCropped":[{"__symbolic":"method"}],"imageLoaded":[{"__symbolic":"method"}],"cropperReady":[{"__symbolic":"method"}],"loadImageFailed":[{"__symbolic":"method"}],"opensingleimagecrop":[{"__symbolic":"method"}],"opensingleimagecropformultiple":[{"__symbolic":"method"}],"getImagetoDataURL":[{"__symbolic":"method"}]}},"ListingModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":21,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"ListingComponent"},{"__symbolic":"reference","name":"Confirmdialog"},{"__symbolic":"reference","name":"BottomSheet"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"VideoPlayer"},{"__symbolic":"reference","name":"ImageView"},{"__symbolic":"reference","name":"SnackbarComponent"},{"__symbolic":"reference","name":"ShowformComponent"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ModalForButtomSearch"},{"__symbolic":"reference","name":"ɵd"}],"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":24,"character":8},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":27,"character":8},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":27,"character":21},{"__symbolic":"reference","module":"@angular/router","name":"RouterModule","line":28,"character":8},{"__symbolic":"reference","module":"ngx-moment","name":"MomentModule","line":29,"character":8},{"__symbolic":"reference","module":"ng2-ckeditor","name":"CKEditorModule","line":29,"character":22},{"__symbolic":"reference","module":"ngx-image-cropper","name":"ImageCropperModule","line":30,"character":8}],"schemas":[{"__symbolic":"reference","module":"@angular/core","name":"CUSTOM_ELEMENTS_SCHEMA","line":32,"character":15}],"exports":[{"__symbolic":"reference","name":"ListingComponent"},{"__symbolic":"reference","name":"ShowformComponent"}],"providers":[{"__symbolic":"reference","name":"ɵa"}],"entryComponents":[{"__symbolic":"reference","name":"Confirmdialog"},{"__symbolic":"reference","name":"BottomSheet"},{"__symbolic":"reference","name":"VideoPlayer"},{"__symbolic":"reference","name":"ImageView"},{"__symbolic":"reference","name":"SnackbarComponent"},{"__symbolic":"reference","name":"ModalForButtomSearch"}]}]}],"members":{}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":390,"character":1}}],"members":{"uploaderInput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":398,"character":3},"arguments":["fileInput1"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":421,"character":29},{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":421,"character":29},{"__symbolic":"reference","module":"ngx-cookie-service","name":"CookieService","line":423,"character":27}]}],"onUploadOutput":[{"__symbolic":"method"}],"isTokenExpired":[{"__symbolic":"method"}],"getclientip":[{"__symbolic":"method"}],"getEndpoint":[{"__symbolic":"method"}],"getData":[{"__symbolic":"method"}],"postData":[{"__symbolic":"method"}],"postDatawithoutToken":[{"__symbolic":"method"}],"postlogin":[{"__symbolic":"method"}],"postSearch":[{"__symbolic":"method"}],"postSearch1":[{"__symbolic":"method"}],"putData":[{"__symbolic":"method"}],"deteOneData":[{"__symbolic":"method"}],"togglestatus":[{"__symbolic":"method"}],"deteManyData":[{"__symbolic":"method"}],"togglestatusmany":[{"__symbolic":"method"}],"getEndpointUrl":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"lib-youtubeplayer","template":"\r\n<iframe width=\"560\" height=\"300\" [src]=\"id\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","styles":[""]}]}],"members":{"videoid":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer","line":17,"character":32}]}],"ngOnInit":[{"__symbolic":"method"}]}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":2,"character":1},"arguments":[{"name":"CustomPipe"}]}],"members":{"transform":[{"__symbolic":"method"}]}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Directive","line":3,"character":1},"arguments":[{"selector":"[formControlName][appPhoneMask]"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/forms","name":"NgControl","line":8,"character":32}]}],"onModelChange":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"HostListener","line":10,"character":3},"arguments":["ngModelChange",["$event"]]}]}],"keydownBackspace":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"HostListener","line":15,"character":3},"arguments":["keydown.backspace",["$event"]]}]}],"onInputChange":[{"__symbolic":"method"}]}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":52,"character":1},"arguments":[{"exports":[{"__symbolic":"reference","module":"@angular/cdk/a11y","name":"A11yModule","line":54,"character":8},{"__symbolic":"reference","module":"@angular/cdk/stepper","name":"CdkStepperModule","line":55,"character":8},{"__symbolic":"reference","module":"@angular/cdk/table","name":"CdkTableModule","line":56,"character":8},{"__symbolic":"reference","module":"@angular/cdk/tree","name":"CdkTreeModule","line":57,"character":8},{"__symbolic":"reference","module":"@angular/cdk/drag-drop","name":"DragDropModule","line":58,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatAutocompleteModule","line":59,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatBadgeModule","line":60,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatBottomSheetModule","line":61,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonModule","line":62,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonToggleModule","line":63,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatCardModule","line":64,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatCheckboxModule","line":65,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatChipsModule","line":66,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatStepperModule","line":67,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatDatepickerModule","line":68,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatDialogModule","line":69,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatDividerModule","line":70,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatExpansionModule","line":71,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatGridListModule","line":72,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatIconModule","line":73,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatInputModule","line":74,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatListModule","line":75,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatMenuModule","line":76,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatNativeDateModule","line":77,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatPaginatorModule","line":78,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatProgressBarModule","line":79,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatProgressSpinnerModule","line":80,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatRadioModule","line":81,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatRippleModule","line":82,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSelectModule","line":83,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSidenavModule","line":84,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSliderModule","line":85,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSlideToggleModule","line":86,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSnackBarModule","line":87,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSortModule","line":88,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatTableModule","line":89,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatTabsModule","line":90,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatToolbarModule","line":91,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatTooltipModule","line":92,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatTreeModule","line":93,"character":8},{"__symbolic":"reference","module":"@angular/cdk/portal","name":"PortalModule","line":94,"character":8},{"__symbolic":"reference","module":"@angular/cdk/scrolling","name":"ScrollingModule","line":95,"character":8}]}]}],"members":{}}},"origins":{"ListingService":"./lib/listing.service","DialogData":"./lib/listing.component","ListingComponent":"./lib/listing.component","Confirmdialog":"./lib/listing.component","BottomSheet":"./lib/listing.component","ModalForButtomSearch":"./lib/listing.component","VideoPlayer":"./lib/listing.component","ImageView":"./lib/listing.component","SnackbarComponent":"./lib/listing.component","ShowformComponent":"./lib/showform/showform.component","ListingModule":"./lib/listing.module","ɵa":"./lib/api.service","ɵb":"./lib/youtubeplayer/youtubeplayer.component","ɵc":"./lib/customdata.pipe","ɵd":"./lib/directive/phone-formating.directive","ɵe":"./lib/materialmodules"},"importAs":"listing-angular7"}